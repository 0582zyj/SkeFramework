<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAAAAAAAAAAAAAAAAADelhE83pYRPAAAAAAAAAAAAAAAAAAAAADblhF625YRetqVEYTalRGEAAAAAAAA
        AAAAAAAAAAAAANqUED7alBA+AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADblxBA25cQQAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAN6WETzelhE8AAAAAAAAAAAAAAAAAAAAANuWEXrblhF63JYRltyW
        EZbblxBA25cQQNuXEEDblxBA2pcQbtqXEG7blxBA25cQQNuXEEDblxBA25cQQNuXEEDblxBA25cQQNuW
        EHDblhBw25cQQNuXEEDblxBA25cQQNuXEEDblxBA2pcQbtqXEG7blxBA25cQQNuXEEDblxBA25QQlNuU
        EJTclhGW3JYRltuXEEDblxBA25cQQNuXEEDalxBu2pcQbtuXEEDblxBA25cQQNuXEEDblxBA25cQQNuX
        EEDblxBA25YQcNuWEHDblxBA25cQQNuXEEDblxBA25cQQNuXEEDalxBu2pcQbtuXEEDblxBA25cQQNuX
        EEDblBCU25QQlNqVEHzalRB8AAAAAAAAAAAAAAAAAAAAAN2VETzdlRE8AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADblxBA25cQQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN2VETzdlRE8AAAAAAAA
        AAAAAAAAAAAAANuXEn7blxJ+2pUQfNqVEHwAAAAAAAAAAAAAAAAAAAAA3ZURPN2VETwAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAANuXEEDblxBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3ZURPN2V
        ETwAAAAAAAAAAAAAAAAAAAAA25cSftuXEn7clRF63JURegAAAAAAAAAAAAAAAAAAAADdlRE83ZURPAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA25cQQNuXEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADalBA+2pQQPgAAAAAAAAAAAAAAAAAAAADblhGG25YRhtyVEXrclRF6AAAAAAAAAAAAAAAAAAAAAN2V
        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
        AAAAAAAAAAAAAAAAAAAAAAAA/8AP///AD//8/////P////P////z////z///88////P//////////z//
        //8/////P////z////8////8P////P///////////////P////z////8/////P//////////z///88//
        //P////P////z////z////8///AP///wD/8=
</value>
  </data>
</root>