<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CSRedisCore</name>
    </assembly>
    <members>
        <member name="P:CSRedis.CSRedisClient.Nodes">
            <summary>
            按 key 规则分区存储
            </summary>
        </member>
        <member name="F:CSRedis.CSRedisClient.Serialize">
            <summary>
            自定义序列化(全局默认)
            </summary>
        </member>
        <member name="F:CSRedis.CSRedisClient.Deserialize">
            <summary>
            自定义反序列化(全局默认)
            </summary>
        </member>
        <member name="F:CSRedis.CSRedisClient.CurrentSerialize">
            <summary>
            自定义序列化
            </summary>
        </member>
        <member name="F:CSRedis.CSRedisClient.CurrentDeserialize">
            <summary>
            自定义反序列化
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClient.#ctor(System.String)">
            <summary>
            创建redis访问类(支持单机或集群)
            </summary>
            <param name="connectionString">127.0.0.1[:6379],password=123456,defaultDatabase=13,poolsize=50,ssl=false,writeBuffer=10240,prefix=key前辍</param>
        </member>
        <member name="M:CSRedis.CSRedisClient.#ctor(System.String,System.String[],System.Boolean)">
            <summary>
            创建redis哨兵访问类(Redis Sentinel)
            </summary>
            <param name="connectionString">mymaster,password=123456,poolsize=50,connectTimeout=200,ssl=false</param>
            <param name="sentinels">哨兵节点，如：ip1:26379、ip2:26379</param>
            <param name="readOnly">false: 只获取master节点进行读写操作<para></para>true: 只获取可用slave节点进行只读操作</param>
        </member>
        <member name="M:CSRedis.CSRedisClient.#ctor(System.String,System.String[],System.Boolean,CSRedis.SentinelMasterConverter)">
            <summary>
            创建redis哨兵访问类(Redis Sentinel) <see cref="T:CSRedis.CSRedisClient"/> 
            </summary>
            <param name="connectionString">mymaster,password=123456,poolsize=50,connectTimeout=200,ssl=false</param>
            <param name="sentinels">哨兵节点，如：ip1:26379、ip2:26379</param>
            <param name="readOnly">false: 只获取master节点进行读写操作<para></para>true: 只获取可用slave节点进行只读操作</param>
            <param name="convert">哨兵主机转换规则</param>
        </member>
        <member name="M:CSRedis.CSRedisClient.#ctor(System.Func{System.String,System.String},System.String[])">
            <summary>
            创建redis分区访问类，通过 KeyRule 对 key 进行分区，连接对应的 connectionString
            </summary>
            <param name="NodeRule">按key分区规则，返回值格式：127.0.0.1:6379/13，默认方案(null)：取key哈希与节点数取模</param>
            <param name="connectionStrings">127.0.0.1[:6379],password=123456,defaultDatabase=13,poolsize=50,ssl=false,writeBuffer=10240,prefix=key前辍</param>
        </member>
        <member name="M:CSRedis.CSRedisClient.CacheShell``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            缓存壳
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.CacheShell``1(System.String,System.String,System.Int32,System.Func{``0})">
            <summary>
            缓存壳(哈希表)
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.CacheShell``1(System.String,System.String[],System.Int32,System.Func{System.String[],System.ValueTuple{System.String,``0}[]})">
            <summary>
            缓存壳(哈希表)，将 fields 每个元素存储到单独的缓存片，实现最大化复用
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数，输入参数是没有缓存的 fields，返回值应该是 (field, value)[]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.StartPipe(System.Action{CSRedis.CSRedisClientPipe{System.String}})">
            <summary>
            创建管道传输，注意：官方集群时请务必预热slotCache，否则会产生moved错误
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.StartPipe">
            <summary>
            创建管道传输，注意：官方集群时请务必预热slotCache，否则会产生moved错误，打包提交如：RedisHelper.StartPipe().Set("a", "1").HSet("b", "f", "2").EndPipe();
            </summary>
            <returns></returns>
        </member>
        <member name="P:CSRedis.CSRedisClient.NodesServerManager">
            <summary>
            在所有分区节点上，执行服务器命令
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.BgRewriteAof">
            <summary>
            异步执行一个 AOF（AppendOnly File） 文件重写操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.BgSave">
            <summary>
            在后台异步保存当前数据库的数据到磁盘
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientKill(System.String,System.Int32)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="ip">ip</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientKill(System.String,System.String,System.Nullable{CSRedis.ClientKillType},System.Nullable{System.Boolean})">
            <summary>
            关闭客户端连接
            </summary>
            <param name="addr">ip:port</param>
            <param name="id">客户唯一标识</param>
            <param name="type">类型：normal | slave | pubsub</param>
            <param name="skipMe">跳过自己</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientList">
            <summary>
            获取连接到服务器的客户端连接列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientGetName">
            <summary>
            获取连接的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientPause(System.TimeSpan)">
            <summary>
            在指定时间内终止运行来自客户端的命令
            </summary>
            <param name="timeout">阻塞时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientSetName(System.String)">
            <summary>
            设置当前连接的名称
            </summary>
            <param name="connectionName">连接名称</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.Time">
            <summary>
            返回当前服务器时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ConfigGet(System.String)">
            <summary>
            获取指定配置参数的值
            </summary>
            <param name="parameter">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ConfigRewrite">
            <summary>
            对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ConfigSet(System.String,System.String)">
            <summary>
            修改 redis 配置参数，无需重启
            </summary>
            <param name="parameter">参数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ConfigResetStat">
            <summary>
            重置 INFO 命令中的某些统计数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.DbSize">
            <summary>
            返回当前数据库的 key 的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.DebugSegFault">
            <summary>
            让 Redis 服务崩溃
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.FlushAll">
            <summary>
            删除所有数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.FlushDb">
            <summary>
            删除当前数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.Info(System.Nullable{CSRedis.InfoSection})">
            <summary>
            获取 Redis 服务器的各种信息和统计数值
            </summary>
            <param name="section">部分(all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.LastSave">
            <summary>
            返回最近一次 Redis 成功将数据保存到磁盘上的时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.Role">
            <summary>
            返回主从实例所属的角色
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.Save">
            <summary>
            同步保存数据到硬盘
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.Shutdown(System.Boolean)">
            <summary>
            异步保存数据到硬盘，并关闭服务器
            </summary>
            <param name="isSave">是否保存</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlaveOf(System.String,System.Int32)">
            <summary>
            将服务器转变为指定服务器的从属服务器(slave server)，如果当前服务器已经是某个主服务器(master server)的从属服务器，那么执行 SLAVEOF host port 将使当前服务器停止对旧主服务器的同步，丢弃旧数据集，转而开始对新主服务器进行同步。
            </summary>
            <param name="host">主机</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlaveOfNoOne">
            <summary>
            从属服务器执行命令 SLAVEOF NO ONE 将使得这个从属服务器关闭复制功能，并从从属服务器转变回主服务器，原来同步所得的数据集不会被丢弃。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlowLogGet(System.Nullable{System.Int64})">
            <summary>
            管理 redis 的慢日志，按数量获取
            </summary>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlowLogLen">
            <summary>
            管理 redis 的慢日志，总数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlowLogReset">
            <summary>
            管理 redis 的慢日志，清空
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.Sync">
            <summary>
            用于复制功能(replication)的内部命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.BgRewriteAofAsync">
            <summary>
            异步执行一个 AOF（AppendOnly File） 文件重写操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.BgSaveAsync">
            <summary>
            在后台异步保存当前数据库的数据到磁盘
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientKillAsync(System.String,System.Int32)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="ip">ip</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientKillAsync(System.String,System.String,System.Nullable{CSRedis.ClientKillType},System.Nullable{System.Boolean})">
            <summary>
            关闭客户端连接
            </summary>
            <param name="addr">ip:port</param>
            <param name="id">客户唯一标识</param>
            <param name="type">类型：normal | slave | pubsub</param>
            <param name="skipMe">跳过自己</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientListAsync">
            <summary>
            获取连接到服务器的客户端连接列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientGetNameAsync">
            <summary>
            获取连接的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientPauseAsync(System.TimeSpan)">
            <summary>
            在指定时间内终止运行来自客户端的命令
            </summary>
            <param name="timeout">阻塞时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ClientSetNameAsync(System.String)">
            <summary>
            设置当前连接的名称
            </summary>
            <param name="connectionName">连接名称</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.TimeAsync">
            <summary>
            返回当前服务器时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ConfigGetAsync(System.String)">
            <summary>
            获取指定配置参数的值
            </summary>
            <param name="parameter">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ConfigRewriteAsync">
            <summary>
            对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ConfigSetAsync(System.String,System.String)">
            <summary>
            修改 redis 配置参数，无需重启
            </summary>
            <param name="parameter">参数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ConfigResetStatAsync">
            <summary>
            重置 INFO 命令中的某些统计数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.DbSizeAsync">
            <summary>
            返回当前数据库的 key 的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.DebugSegFaultAsync">
            <summary>
            让 Redis 服务崩溃
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.FlushAllAsync">
            <summary>
            删除所有数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.FlushDbAsync">
            <summary>
            删除当前数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.InfoAsync(System.Nullable{CSRedis.InfoSection})">
            <summary>
            获取 Redis 服务器的各种信息和统计数值
            </summary>
            <param name="section">部分(all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.LastSaveAsync">
            <summary>
            返回最近一次 Redis 成功将数据保存到磁盘上的时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.RoleAsync">
            <summary>
            返回主从实例所属的角色
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SaveAsync">
            <summary>
            同步保存数据到硬盘
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.ShutdownAsync(System.Boolean)">
            <summary>
            异步保存数据到硬盘，并关闭服务器
            </summary>
            <param name="isSave">是否保存</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlaveOfAsync(System.String,System.Int32)">
            <summary>
            将服务器转变为指定服务器的从属服务器(slave server)，如果当前服务器已经是某个主服务器(master server)的从属服务器，那么执行 SLAVEOF host port 将使当前服务器停止对旧主服务器的同步，丢弃旧数据集，转而开始对新主服务器进行同步。
            </summary>
            <param name="host">主机</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlaveOfNoOneAsync">
            <summary>
            从属服务器执行命令 SLAVEOF NO ONE 将使得这个从属服务器关闭复制功能，并从从属服务器转变回主服务器，原来同步所得的数据集不会被丢弃。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlowLogGetAsync(System.Nullable{System.Int64})">
            <summary>
            管理 redis 的慢日志，按数量获取
            </summary>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlowLogLenAsync">
            <summary>
            管理 redis 的慢日志，总数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SlowLogResetAsync">
            <summary>
            管理 redis 的慢日志，清空
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodesServerManagerProvider.SyncAsync">
            <summary>
            用于复制功能(replication)的内部命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManager(System.String)">
            <summary>
            在指定分区节点上，执行服务器命令
            </summary>
            <param name="node">节点</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.BgRewriteAof">
            <summary>
            异步执行一个 AOF（AppendOnly File） 文件重写操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.BgSave">
            <summary>
            在后台异步保存当前数据库的数据到磁盘
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientKill(System.String,System.Int32)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="ip">ip</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientKill(System.String,System.String,System.Nullable{CSRedis.CSRedisClient.NodeServerManagerProvider.ClientKillType},System.Nullable{System.Boolean})">
            <summary>
            关闭客户端连接
            </summary>
            <param name="addr">ip:port</param>
            <param name="id">客户唯一标识</param>
            <param name="type">类型：normal | slave | pubsub</param>
            <param name="skipMe">跳过自己</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientList">
            <summary>
            获取连接到服务器的客户端连接列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientGetName">
            <summary>
            获取连接的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientPause(System.TimeSpan)">
            <summary>
            在指定时间内终止运行来自客户端的命令
            </summary>
            <param name="timeout">阻塞时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientSetName(System.String)">
            <summary>
            设置当前连接的名称
            </summary>
            <param name="connectionName">连接名称</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.Time">
            <summary>
            返回当前服务器时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ConfigGet(System.String)">
            <summary>
            获取指定配置参数的值
            </summary>
            <param name="parameter">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ConfigRewrite">
            <summary>
            对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ConfigSet(System.String,System.String)">
            <summary>
            修改 redis 配置参数，无需重启
            </summary>
            <param name="parameter">参数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ConfigResetStat">
            <summary>
            重置 INFO 命令中的某些统计数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.DbSize">
            <summary>
            返回当前数据库的 key 的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.DebugSegFault">
            <summary>
            让 Redis 服务崩溃
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.FlushAll">
            <summary>
            删除所有数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.FlushDb">
            <summary>
            删除当前数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.Info(System.Nullable{CSRedis.InfoSection})">
            <summary>
            获取 Redis 服务器的各种信息和统计数值
            </summary>
            <param name="section">部分(Server | Clients | Memory | Persistence | Stats | Replication | CPU | Keyspace)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.LastSave">
            <summary>
            返回最近一次 Redis 成功将数据保存到磁盘上的时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.Role">
            <summary>
            返回主从实例所属的角色
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.Save">
            <summary>
            同步保存数据到硬盘
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.Shutdown(System.Boolean)">
            <summary>
            异步保存数据到硬盘，并关闭服务器
            </summary>
            <param name="isSave">是否保存</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlaveOf(System.String,System.Int32)">
            <summary>
            将服务器转变为指定服务器的从属服务器(slave server)，如果当前服务器已经是某个主服务器(master server)的从属服务器，那么执行 SLAVEOF host port 将使当前服务器停止对旧主服务器的同步，丢弃旧数据集，转而开始对新主服务器进行同步。
            </summary>
            <param name="host">主机</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlaveOfNoOne">
            <summary>
            从属服务器执行命令 SLAVEOF NO ONE 将使得这个从属服务器关闭复制功能，并从从属服务器转变回主服务器，原来同步所得的数据集不会被丢弃。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlowLogGet(System.Nullable{System.Int64})">
            <summary>
            管理 redis 的慢日志，按数量获取
            </summary>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlowLogLen">
            <summary>
            管理 redis 的慢日志，总数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlowLogReset">
            <summary>
            管理 redis 的慢日志，清空
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.Sync">
            <summary>
            用于复制功能(replication)的内部命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.BgRewriteAofAsync">
            <summary>
            异步执行一个 AOF（AppendOnly File） 文件重写操作
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.BgSaveAsync">
            <summary>
            在后台异步保存当前数据库的数据到磁盘
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientKillAsync(System.String,System.Int32)">
            <summary>
            关闭客户端连接
            </summary>
            <param name="ip">ip</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientKillAsync(System.String,System.String,System.Nullable{CSRedis.CSRedisClient.NodeServerManagerProvider.ClientKillType},System.Nullable{System.Boolean})">
            <summary>
            关闭客户端连接
            </summary>
            <param name="addr">ip:port</param>
            <param name="id">客户唯一标识</param>
            <param name="type">类型：normal | slave | pubsub</param>
            <param name="skipMe">跳过自己</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientListAsync">
            <summary>
            获取连接到服务器的客户端连接列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientGetNameAsync">
            <summary>
            获取连接的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientPauseAsync(System.TimeSpan)">
            <summary>
            在指定时间内终止运行来自客户端的命令
            </summary>
            <param name="timeout">阻塞时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ClientSetNameAsync(System.String)">
            <summary>
            设置当前连接的名称
            </summary>
            <param name="connectionName">连接名称</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.TimeAsync">
            <summary>
            返回当前服务器时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ConfigGetAsync(System.String)">
            <summary>
            获取指定配置参数的值
            </summary>
            <param name="parameter">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ConfigRewriteAsync">
            <summary>
            对启动 Redis 服务器时所指定的 redis.conf 配置文件进行改写
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ConfigSetAsync(System.String,System.String)">
            <summary>
            修改 redis 配置参数，无需重启
            </summary>
            <param name="parameter">参数</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ConfigResetStatAsync">
            <summary>
            重置 INFO 命令中的某些统计数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.DbSizeAsync">
            <summary>
            返回当前数据库的 key 的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.DebugSegFaultAsync">
            <summary>
            让 Redis 服务崩溃
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.FlushAllAsync">
            <summary>
            删除所有数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.FlushDbAsync">
            <summary>
            删除当前数据库的所有key
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.InfoAsync(System.Nullable{CSRedis.InfoSection})">
            <summary>
            获取 Redis 服务器的各种信息和统计数值
            </summary>
            <param name="section">部分(Server | Clients | Memory | Persistence | Stats | Replication | CPU | Keyspace)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.LastSaveAsync">
            <summary>
            返回最近一次 Redis 成功将数据保存到磁盘上的时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.RoleAsync">
            <summary>
            返回主从实例所属的角色
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SaveAsync">
            <summary>
            同步保存数据到硬盘
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.ShutdownAsync(System.Boolean)">
            <summary>
            异步保存数据到硬盘，并关闭服务器
            </summary>
            <param name="isSave">是否保存</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlaveOfAsync(System.String,System.Int32)">
            <summary>
            将服务器转变为指定服务器的从属服务器(slave server)，如果当前服务器已经是某个主服务器(master server)的从属服务器，那么执行 SLAVEOF host port 将使当前服务器停止对旧主服务器的同步，丢弃旧数据集，转而开始对新主服务器进行同步。
            </summary>
            <param name="host">主机</param>
            <param name="port">端口</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlaveOfNoOneAsync">
            <summary>
            从属服务器执行命令 SLAVEOF NO ONE 将使得这个从属服务器关闭复制功能，并从从属服务器转变回主服务器，原来同步所得的数据集不会被丢弃。
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlowLogGetAsync(System.Nullable{System.Int64})">
            <summary>
            管理 redis 的慢日志，按数量获取
            </summary>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlowLogLenAsync">
            <summary>
            管理 redis 的慢日志，总数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SlowLogResetAsync">
            <summary>
            管理 redis 的慢日志，清空
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.NodeServerManagerProvider.SyncAsync">
            <summary>
            用于复制功能(replication)的内部命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Auth(System.String,System.String)">
            <summary>
            验证密码是否正确
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Echo(System.String,System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Echo(System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Ping(System.String)">
            <summary>
            查看服务是否运行
            </summary>
            <param name="nodeKey">分区key</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Ping">
            <summary>
            查看服务是否运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Quit(System.String)">
            <summary>
            关闭当前连接
            </summary>
            <param name="nodeKey">分区key</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Select(System.String,System.Int32)">
            <summary>
            切换到指定的数据库
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="index">数据库</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Eval(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="script">Lua 脚本</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.EvalSHA(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScriptExists(System.String[])">
            <summary>
            校验所有分区节点中，脚本是否已经缓存。任何分区节点未缓存sha1，都返回false。
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScriptFlush">
            <summary>
            清除所有分区节点中，所有 Lua 脚本缓存
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScriptKill">
            <summary>
            杀死所有分区节点中，当前正在运行的 Lua 脚本
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScriptLoad(System.String)">
            <summary>
            在所有分区节点中，缓存脚本后返回 sha1（同样的脚本在任何服务器，缓存后的 sha1 都是相同的）
            </summary>
            <param name="script">Lua 脚本</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Publish(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，最终消息发布格式：1|message
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PublishNoneMessageId(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，与 Publish 方法不同，不返回消息id头，即 1|
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PubSubChannels(System.String)">
            <summary>
            查看所有订阅频道
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PubSubNumPat">
            <summary>
            查看所有模糊订阅端的数量<para></para>
            注意：分区模式下，其他客户端的订阅可能不会返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PubSubNumSub(System.String[])">
            <summary>
            查看所有订阅端的数量<para></para>
            注意：分区模式下，其他客户端的订阅可能不会返回
            </summary>
            <param name="channels">频道</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Subscribe(System.ValueTuple{System.String,System.Action{CSRedis.CSRedisClient.SubscribeMessageEventArgs}}[])">
            <summary>
            订阅，根据分区规则返回SubscribeObject，Subscribe(("chan1", msg => Console.WriteLine(msg.Body)), ("chan2", msg => Console.WriteLine(msg.Body)))
            </summary>
            <param name="channels">频道和接收器</param>
            <returns>返回可停止订阅的对象</returns>
        </member>
        <member name="P:CSRedis.CSRedisClient.SubscribeMessageEventArgs.MessageId">
            <summary>
            频道的消息id
            </summary>
        </member>
        <member name="P:CSRedis.CSRedisClient.SubscribeMessageEventArgs.Channel">
            <summary>
            频道
            </summary>
        </member>
        <member name="P:CSRedis.CSRedisClient.SubscribeMessageEventArgs.Body">
            <summary>
            接收到的内容
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClient.PSubscribe(System.String[],System.Action{CSRedis.CSRedisClient.PSubscribePMessageEventArgs})">
            <summary>
            模糊订阅，订阅所有分区节点(同条消息只处理一次），返回SubscribeObject，PSubscribe(new [] { "chan1*", "chan2*" }, msg => Console.WriteLine(msg.Body))
            </summary>
            <param name="channelPatterns">模糊频道</param>
            <param name="pmessage">接收器</param>
            <returns>返回可停止模糊订阅的对象</returns>
        </member>
        <member name="P:CSRedis.CSRedisClient.PSubscribePMessageEventArgs.Pattern">
            <summary>
            匹配模式
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClient.SubscribeListBroadcast(System.String,System.String,System.Action{System.String})">
            <summary>
            使用lpush + blpop订阅端（多端非争抢模式），都可以收到消息
            </summary>
            <param name="listKey">list key（不含prefix前辍）</param>
            <param name="clientId">订阅端标识，若重复则争抢，若唯一必然收到消息</param>
            <param name="onMessage">接收消息委托</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SubscribeList(System.String,System.Action{System.String})">
            <summary>
            使用lpush + blpop订阅端（多端争抢模式），只有一端收到消息
            </summary>
            <param name="listKey">list key（不含prefix前辍）</param>
            <param name="onMessage">接收消息委托</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SubscribeList(System.String[],System.Action{System.String,System.String})">
            <summary>
            使用lpush + blpop订阅端（多端争抢模式），只有一端收到消息
            </summary>
            <param name="listKeys">支持多个 key（不含prefix前辍）</param>
            <param name="onMessage">接收消息委托，参数1：key；参数2：消息体</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PfAdd``1(System.String,``0[])">
            <summary>
            添加指定元素到 HyperLogLog
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PfCount(System.String[])">
            <summary>
            返回给定 HyperLogLog 的基数估算值<para></para>
            注意：分区模式下，若keys分散在多个分区节点时，将报错
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PfMerge(System.String,System.String[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog<para></para>
            注意：分区模式下，若keys分散在多个分区节点时，将报错
            </summary>
            <param name="destKey">新的 HyperLogLog，不含prefix前辍</param>
            <param name="sourceKeys">源 HyperLogLog，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZPopMax(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZPopMax``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZPopMin(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZPopMin``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZAdd(System.String,System.ValueTuple{System.Decimal,System.Object}[])">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="scoreMembers">一个或多个成员分数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZCard(System.String)">
            <summary>
            获取有序集合的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZCount(System.String,System.Decimal,System.Decimal)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZCount(System.String,System.String,System.String)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZIncrBy(System.String,System.Object,System.Decimal)">
            <summary>
            有序集合中对指定成员的分数加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="increment">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZInterStore(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的交集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRange(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScore(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScore``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreWithScores(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreWithScores``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRank(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的索引
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRem``1(System.String,``0[])">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            移除有序集合中给定的排名区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemRangeByScore(System.String,System.Decimal,System.Decimal)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemRangeByScore(System.String,System.String,System.String)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScore(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScore``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreWithScores(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreWithScores``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRank(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZScore(System.String,System.Object)">
            <summary>
            返回有序集中，成员的分数值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZUnionStore(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的并集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByLex(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByLex``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemRangeByLex(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZLexCount(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SAdd``1(System.String,``0[])">
            <summary>
            向集合添加一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SCard(System.String)">
            <summary>
            获取集合的成员数
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SDiff(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SDiff``1(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SDiffStore(System.String,System.String[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SInter(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SInter``1(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SInterStore(System.String,System.String[])">
            <summary>
            返回给定所有集合的交集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SIsMember(System.String,System.Object)">
            <summary>
            判断 member 元素是否是集合 key 的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SMembers(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SMembers``1(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SMove(System.String,System.String,System.Object)">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合
            </summary>
            <param name="source">无序集合key，不含prefix前辍</param>
            <param name="destination">目标无序集合key，不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SPop(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SPop``1(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SPop(System.String,System.Int64)">
            <summary>
            [redis-server 3.2] 移除并返回集合中的一个或多个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除并返回的个数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SPop``1(System.String,System.Int64)">
            <summary>
            [redis-server 3.2] 移除并返回集合中的一个或多个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除并返回的个数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRandMember(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRandMember``1(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRandMembers(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRandMembers``1(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRem``1(System.String,``0[])">
            <summary>
            移除集合中一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SUnion(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SUnion``1(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SUnionStore(System.String,System.String[])">
            <summary>
            所有给定集合的并集存储在 destination 集合中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BLPopWithKey(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BLPopWithKey``1(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BLPop(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BLPop``1(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BRPopWithKey(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BRPopWithKey``1(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BRPop(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BRPop``1(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BRPopLPush(System.String,System.String,System.Int32)">
            <summary>
            BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本，当给定列表 source 不为空时， BRPOPLPUSH 的表现和 RPOPLPUSH 一样。
            当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH 或 RPUSH 命令为止。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="timeout">超时(秒)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BRPopLPush``1(System.String,System.String,System.Int32)">
            <summary>
            BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本，当给定列表 source 不为空时， BRPOPLPUSH 的表现和 RPOPLPUSH 一样。
            当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH 或 RPUSH 命令为止。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="timeout">超时(秒)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LIndex(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LIndex``1(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LInsertBefore(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素前面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LInsertAfter(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素后面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LLen(System.String)">
            <summary>
            获取列表长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LPop(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LPop``1(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LPush``1(System.String,``0[])">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 LPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LPushX(System.String,System.Object)">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns>执行 LPUSHX 命令后，列表的长度。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LRem(System.String,System.Int64,System.Object)">
            <summary>
            根据参数 count 的值，移除列表中与参数 value 相等的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除的数量，大于0时从表头删除数量count，小于0时从表尾删除数量-count，等于0移除所有</param>
            <param name="value">元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LSet(System.String,System.Int64,System.Object)">
            <summary>
            通过索引设置列表元素的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPop(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPop``1(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPopLPush(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPopLPush``1(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPush``1(System.String,``0[])">
            <summary>
            在列表中添加一个或多个值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPushX(System.String,System.Object)">
            <summary>
            为已存在的列表添加值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSHX 命令后，列表的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HStrLen(System.String,System.String)">
            <summary>
            [redis-server 3.2.0] 返回hash指定field的value的字符串长度，如果hash或者field不存在，返回0.
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HDel(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HExists(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HGet(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HGet``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HGetAll(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HGetAll``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HIncrByFloat(System.String,System.String,System.Decimal)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HKeys(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HLen(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HMGet(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HMGet``1(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">一个或多个字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HMSet(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HSet(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值</param>
            <returns>如果字段是哈希表中的一个新建字段，并且值设置成功，返回true。如果哈希表中域字段已经存在且旧值已被新值覆盖，返回false。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HSetNx(System.String,System.String,System.Object)">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值(string 或 byte[])</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HVals(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HVals``1(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Append(System.String,System.Object)">
            <summary>
            如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">字符串</param>
            <returns>追加指定值之后， key 中字符串的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BitCount(System.String,System.Int64,System.Int64)">
            <summary>
            计算给定位置被设置为 1 的比特位的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置</param>
            <param name="end">结束位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BitOp(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上
            </summary>
            <param name="op">And | Or | XOr | Not</param>
            <param name="destKey">不含prefix前辍</param>
            <param name="keys">不含prefix前辍</param>
            <returns>保存到 destkey 的长度，和输入 key 中最长的长度相等</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BitPos(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            对 key 所储存的值，查找范围内第一个被设置为1或者0的bit位
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="bit">查找值</param>
            <param name="start">开始位置，-1是最后一个，-2是倒数第二个</param>
            <param name="end">结果位置，-1是最后一个，-2是倒数第二个</param>
            <returns>返回范围内第一个被设置为1或者0的bit位</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Get(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Get``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Get(System.String,System.IO.Stream,System.Int32)">
            <summary>
            获取指定 key 的值（适用大对象返回）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="destination">读取后写入目标流中</param>
            <param name="bufferSize">读取缓冲区</param>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetBit(System.String,System.UInt32)">
            <summary>
            对 key 所储存的值，获取指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetSet(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetSet``1(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.IncrBy(System.String,System.Int64)">
            <summary>
            将 key 所储存的值加上给定的增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.IncrByFloat(System.String,System.Decimal)">
            <summary>
            将 key 所储存的值加上给定的浮点增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MGet(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MGet``1(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MSet(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MSetNx(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Set(System.String,System.Object,System.Int32,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <param name="expireSeconds">过期(秒单位)</param>
            <param name="exists">Nx, Xx</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SetNx(System.String,System.Object)">
            <summary>
            只有在 key 不存在时设置 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SetRange(System.String,System.UInt32,System.Object)">
            <summary>
            用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns>被修改后的字符串长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.StrLen(System.String)">
            <summary>
            返回 key 所储存的字符串值的长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Touch(System.String[])">
            <summary>
            [redis-server 3.2.1] 修改指定key(s) 最后访问时间 若key不存在，不做操作
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.UnLink(System.String[])">
            <summary>
            [redis-server 4.0.0] Delete a key, 该命令和DEL十分相似：删除指定的key(s),若key不存在则该key被跳过。但是，相比DEL会产生阻塞，该命令会在另一个线程中回收内存，因此它是非阻塞的。 这也是该命令名字的由来：仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Del(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Dump(System.String)">
            <summary>
            序列化给定 key ，并返回被序列化的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Exists(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Exists(System.String[])">
            <summary>
            [redis-server 3.0] 检查给定多个 key 是否存在
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Expire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="seconds">过期秒数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Expire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Keys(System.String)">
            <summary>
            查找所有分区节点中符合给定模式(pattern)的 key
            </summary>
            <param name="pattern">如：runoob*</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Move(System.String,System.Int32)">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="database">数据库</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ObjectEncoding(System.String)">
            <summary>
            该返回给定 key 锁储存的值所使用的内部表示(representation)
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ObjectRefCount(System.String)">
            <summary>
            该返回给定 key 引用所储存的值的次数。此命令主要用于除错
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ObjectIdleTime(System.String)">
            <summary>
            返回给定 key 自储存以来的空转时间(idle， 没有被读取也没有被写入)，以秒为单位
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Persist(System.String)">
            <summary>
            移除 key 的过期时间，key 将持久保持
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PExpire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="milliseconds">过期毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PExpire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PTtl(System.String)">
            <summary>
            以毫秒为单位返回 key 的剩余的过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RandomKey">
            <summary>
            从所有节点中随机返回一个 key
            </summary>
            <returns>返回的 key 如果包含 prefix前辍，则会去除后返回</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Rename(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RenameNx(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Restore(System.String,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Restore(System.String,System.Int64,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="ttlMilliseconds">毫秒为单位为 key 设置生存时间</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Sort(System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            返回给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SortAndStore(System.String,System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            保存给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Ttl(System.String)">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Type(System.String)">
            <summary>
            返回 key 所储存的值的类型
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Scan(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Scan``1(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoAdd(System.String,System.Decimal,System.Decimal,System.Object)">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="member">成员</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoAdd(System.String,System.ValueTuple{System.Decimal,System.Decimal,System.Object}[])">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="values">批量添加的值</param>
            <returns>添加到sorted set元素的数目，但不包括已更新score的元素。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoDist(System.String,System.Object,System.Object,CSRedis.GeoUnit)">
            <summary>
            返回两个给定位置之间的距离。如果两个位置之间的其中一个不存在， 那么命令返回空值。GEODIST 命令在计算距离时会假设地球为完美的球形， 在极限情况下， 这一假设最大会造成 0.5% 的误差。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member1">成员1</param>
            <param name="member2">成员2</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <returns>计算出的距离会以双精度浮点数的形式被返回。 如果给定的位置元素不存在， 那么命令返回空值。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoHash(System.String,System.Object[])">
            <summary>
            返回一个或多个位置元素的 Geohash 表示。通常使用表示位置的元素使用不同的技术，使用Geohash位置52点整数编码。由于编码和解码过程中所使用的初始最小和最大坐标不同，编码的编码也不同于标准。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>一个数组， 数组的每个项都是一个 geohash 。 命令返回的 geohash 的位置与用户给定的位置元素的位置一一对应。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoPos(System.String,System.Object[])">
            <summary>
            从key里返回所有给定位置元素的位置（经度和纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>GEOPOS 命令返回一个数组， 数组中的每个项都由两个元素组成： 第一个元素为给定位置元素的经度， 而第二个元素则为给定位置元素的纬度。当给定的位置元素不存在时， 对应的数组项为空值。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadius(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadius``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithDist(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithDist``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithCoord(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithCoord``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithDistAndCoord(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithDistAndCoord``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMember(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMember``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithDist(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithDist``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithCoord(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithCoord``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithDistAndCoord(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithDistAndCoord``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XAck(System.String,System.String,System.String)">
            <summary>
            XACK命令用于从流的消费者组的待处理条目列表（简称PEL）中删除一条或多条消息。 当一条消息交付到某个消费者时，它将被存储在PEL中等待处理， 这通常出现在作为调用XREADGROUP命令的副作用，或者一个消费者通过调用XCLAIM命令接管消息的时候。 待处理消息被交付到某些消费者，但是服务器尚不确定它是否至少被处理了一次。 因此对新调用XREADGROUP来获取消费者的消息历史记录（比如用0作为ID）将返回此类消息。 类似地，待处理的消息将由检查PEL的XPENDING命令列出。
            <para></para>
            一旦消费者成功地处理完一条消息，它应该调用XACK，这样这个消息就不会被再次处理， 且作为一个副作用，关于此消息的PEL条目也会被清除，从Redis服务器释放内存。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="group">组</param>
            <param name="id">消息id</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XAdd(System.String,System.ValueTuple{System.String,System.String}[])">
            <summary>
            将指定的流条目追加到指定key的流中。 如果key不存在，作为运行这个命令的副作用，将使用流的条目自动创建key。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fieldValues">键值对数组</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XAdd(System.String,System.String,System.ValueTuple{System.String,System.String}[])">
            <summary>
            将指定的流条目追加到指定key的流中。 如果key不存在，作为运行这个命令的副作用，将使用流的条目自动创建key。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="id">消息id，如果指定的id参数是字符*（星号ASCII字符），XADD命令会自动为您生成一个唯一的ID。 但是，也可以指定一个良好格式的ID，以便新的条目以指定的ID准确存储</param>
            <param name="fieldValues">键值对数组</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XAdd(System.String,System.Int64,System.String,System.ValueTuple{System.String,System.String}[])">
            <summary>
            将指定的流条目追加到指定key的流中。 如果key不存在，作为运行这个命令的副作用，将使用流的条目自动创建key。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="maxLen">上限流，当小于0时~</param>
            <param name="id">消息id，如果指定的id参数是字符*（星号ASCII字符），XADD命令会自动为您生成一个唯一的ID。 但是，也可以指定一个良好格式的ID，以便新的条目以指定的ID准确存储</param>
            <param name="fieldValues">键值对数组</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XClaim(System.String,System.String,System.String,System.Int64,System.String[])">
            <summary>
            在流的消费者组上下文中，此命令改变待处理消息的所有权
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="group">组</param>
            <param name="consumer">消费者</param>
            <param name="minIdleTime">耗秒</param>
            <param name="id">消息id</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XClaim(System.String,System.String,System.String,System.Int64,System.String[],System.Int64,System.Int64,System.Boolean)">
            <summary>
            在流的消费者组上下文中，此命令改变待处理消息的所有权
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="group">组</param>
            <param name="consumer">消费者</param>
            <param name="minIdleTime">耗秒</param>
            <param name="id">消息id</param>
            <param name="idle">耗秒, 设置消息的空闲时间（自最后一次交付到目前的时间）。如果没有指定IDLE，则假设IDLE值为0，即时间计数被重置，因为消息现在有新的所有者来尝试处理它。</param>
            <param name="retryCount">将重试计数器设置为指定的值。这个计数器在每一次消息被交付的时候递增。</param>
            <param name="force">在待处理条目列表（PEL）中创建待处理消息条目，即使某些指定的ID尚未在分配给不同客户端的待处理条目列表（PEL）中。但是消息必须存在于流中，否则不存在的消息ID将会被忽略。</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XClaimJustId(System.String,System.String,System.String,System.Int64,System.String[])">
            <summary>
            在流的消费者组上下文中，此命令改变待处理消息的所有权
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="group">组</param>
            <param name="consumer">消费者</param>
            <param name="minIdleTime">耗秒</param>
            <param name="id">消息id</param>
            <returns>只返回消息id</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XClaimJustId(System.String,System.String,System.String,System.Int64,System.String[],System.Int64,System.Int64,System.Boolean)">
            <summary>
            在流的消费者组上下文中，此命令改变待处理消息的所有权
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="group">组</param>
            <param name="consumer">消费者</param>
            <param name="minIdleTime">耗秒</param>
            <param name="id">消息id</param>
            <param name="idle">耗秒, 设置消息的空闲时间（自最后一次交付到目前的时间）。如果没有指定IDLE，则假设IDLE值为0，即时间计数被重置，因为消息现在有新的所有者来尝试处理它。</param>
            <param name="retryCount">将重试计数器设置为指定的值。这个计数器在每一次消息被交付的时候递增。</param>
            <param name="force">在待处理条目列表（PEL）中创建待处理消息条目，即使某些指定的ID尚未在分配给不同客户端的待处理条目列表（PEL）中。但是消息必须存在于流中，否则不存在的消息ID将会被忽略。</param>
            <returns>只返回消息id</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XDel(System.String,System.String[])">
            <summary>
            从指定流中移除指定的条目，并返回成功删除的条目的数量，在传递的ID不存在的情况下， 返回的数量可能与传递的ID数量不同。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="id">消息id</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XGroupCreate(System.String,System.String,System.String,System.Boolean)">
            <summary>
            创建一个新的消费者组
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="group">组名</param>
            <param name="id">特殊的ID ‘$’（这表示：流中最后一项的ID）。在这种情况下，从该消费者组获取数据的消费者只能看到到达流的新元素。但如果你希望消费者组获取整个流的历史记录，使用0作为消费者组的开始ID。</param>
            <param name="MkStream">create the empty stream if it does not exist.</param>
            <returns>如果指定的消费者组已经存在，则该命令将返回-BUSYGROUP错误。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XGroupSetId(System.String,System.String,System.String)">
            <summary>
            设置要传递的下一条消息。 通常情况下，在消费者创建时设置下一个ID，作为XGROUP CREATE的最后一个参数。 但是使用这种形式，可以在以后修改下一个ID，而无需再次删除和创建使用者组。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="group">组名</param>
            <param name="id">特殊的ID ‘$’（这表示：流中最后一项的ID）。在这种情况下，从该消费者组获取数据的消费者只能看到到达流的新元素。但如果你希望消费者组获取整个流的历史记录，使用0作为消费者组的开始ID。</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XGroupDestroy(System.String,System.String)">
            <summary>
            销毁消费者组，即使存在活动的消费者和待处理消息，消费者组也将被销毁，因此请确保仅在真正需要时才调用此命令。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="group">组名</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XGroupDelConsumer(System.String,System.String,System.String)">
            <summary>
            仅从消费者组中移除给定的消费者
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="group">组名</param>
            <param name="consumer">消费者</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XInfoStream(System.String)">
            <summary>
            返回有关存储在特定键的流的一般信息
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XInfoGroups(System.String)">
            <summary>
            获得与流关联的所有消费者组数据，该命令显示该组中已知的消费者数量，以及该组中的待处理消息（已传递但尚未确认）数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XInfoConsumers(System.String,System.String)">
            <summary>
            取得指定消费者组中的消费者列表，返回每个消息者的空闲毫秒时间（最后一个字段）以及消费者名称和待处理消息数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XLen(System.String)">
            <summary>
            返回流中的条目数。如果指定的key不存在，则此命令返回0，就好像该流为空。 但是请注意，与其他的Redis类型不同，零长度流是可能的，所以你应该调用TYPE 或者 EXISTS 来检查一个key是否存在。
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XPending(System.String,System.String)">
            <summary>
            XPENDING命令是检查待处理消息列表的接口，因此它是一个非常重要的命令，用于观察和了解消费者组正在发生的事情：哪些客户端是活跃的，哪些消息在等待消费，或者查看是否有空闲的消息。此外，该命令与XCLAIM一起使用，用于实现长时间故障的消费者的恢复，因此不处理某些消息：不同的消费者可以认领该消息并继续处理。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="group"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XPending(System.String,System.String,System.String,System.String,System.Int64,System.String)">
            <summary>
            XPENDING命令是检查待处理消息列表的接口，因此它是一个非常重要的命令，用于观察和了解消费者组正在发生的事情：哪些客户端是活跃的，哪些消息在等待消费，或者查看是否有空闲的消息。此外，该命令与XCLAIM一起使用，用于实现长时间故障的消费者的恢复，因此不处理某些消息：不同的消费者可以认领该消息并继续处理。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="group"></param>
            <param name="start"></param>
            <param name="end"></param>
            <param name="count"></param>
            <param name="consumer"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XRange(System.String,System.String,System.String,System.Int64)">
            <summary>
            返回流中满足给定ID范围的条目。范围由最小和最大ID指定。所有ID在指定的两个ID之间或与其中一个ID相等（闭合区间）的条目将会被返回。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始id，特殊：- 和 +</param>
            <param name="end">结束id，特殊：- 和 +</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XRevRange(System.String,System.String,System.String,System.Int64)">
            <summary>
            与XRANGE完全相同，但显著的区别是以相反的顺序返回条目，并以相反的顺序获取开始-结束参数：在XREVRANGE中，你需要先指定结束ID，再指定开始ID，该命令就会从结束ID侧开始生成两个ID之间（或完全相同）的所有元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="end">结束id，特殊：- 和 +</param>
            <param name="start">开始id，特殊：- 和 +</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XRead(System.Int64,System.Int64,System.ValueTuple{System.String,System.String}[])">
            <summary>
            从一个或者多个流中读取数据，仅返回ID大于调用者报告的最后接收ID的条目。此命令有一个阻塞选项，用于等待可用的项目，类似于BRPOP或者BZPOPMIN等等。
            </summary>
            <param name="count">数量</param>
            <param name="block">阻塞选项，毫秒</param>
            <param name="streams">(key,id) 数组</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XReadGroup(System.String,System.String,System.Int64,System.Int64,System.ValueTuple{System.String,System.String}[])">
            <summary>
            XREADGROUP命令是XREAD命令的特殊版本，支持消费者组。
            </summary>
            <param name="group">组</param>
            <param name="consumer">消费者</param>
            <param name="count">数量</param>
            <param name="block">阻塞选项，毫秒</param>
            <param name="streams">(key,id) 数组</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.XTrim(System.String,System.Int64)">
            <summary>
            XTRIM将流裁剪为指定数量的项目，如有需要，将驱逐旧的项目（ID较小的项目）。此命令被设想为接受多种修整策略，但目前只实现了一种，即MAXLEN，并且与XADD中的MAXLEN选项完全相同。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="maxLen">上限流，当小于0时~</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.Lock(System.String,System.Int32,System.Boolean)">
            <summary>
            开启分布式锁，若超时返回null
            </summary>
            <param name="name">锁名称</param>
            <param name="timeoutSeconds">超时（秒）</param>
            <param name="autoDelay">自动延长锁超时时间，看门狗线程的超时时间为timeoutSeconds/2 ， 在看门狗线程超时时间时自动延长锁的时间为timeoutSeconds。除非程序意外退出，否则永不超时。</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.CacheShellAsync``1(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            缓存壳
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.CacheShellAsync``1(System.String,System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            缓存壳(哈希表)
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.CacheShellAsync``1(System.String,System.String[],System.Int32,System.Func{System.String[],System.Threading.Tasks.Task{System.ValueTuple{System.String,``0}[]}})">
            <summary>
            缓存壳(哈希表)，将 fields 每个元素存储到单独的缓存片，实现最大化复用
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数，输入参数是没有缓存的 fields，返回值应该是 (field, value)[]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.AuthAsync(System.String,System.String)">
            <summary>
            验证密码是否正确
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="password">密码</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.EchoAsync(System.String,System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.EchoAsync(System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PingAsync(System.String)">
            <summary>
            查看服务是否运行
            </summary>
            <param name="nodeKey">分区key</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PingAsync">
            <summary>
            查看服务是否运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.QuitAsync(System.String)">
            <summary>
            关闭当前连接
            </summary>
            <param name="nodeKey">分区key</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SelectAsync(System.String,System.Int32)">
            <summary>
            切换到指定的数据库
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="index">数据库</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.EvalAsync(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="script">Lua 脚本</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.EvalSHAAsync(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScriptExistsAsync(System.String[])">
            <summary>
            校验所有分区节点中，脚本是否已经缓存。任何分区节点未缓存sha1，都返回false。
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScriptFlushAsync">
            <summary>
            清除所有分区节点中，所有 Lua 脚本缓存
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScriptKillAsync">
            <summary>
            杀死所有分区节点中，当前正在运行的 Lua 脚本
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScriptLoadAsync(System.String)">
            <summary>
            在所有分区节点中，缓存脚本后返回 sha1（同样的脚本在任何服务器，缓存后的 sha1 都是相同的）
            </summary>
            <param name="script">Lua 脚本</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PublishAsync(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，最终消息发布格式：1|message
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PublishNoneMessageIdAsync(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，与 Publish 方法不同，不返回消息id头，即 1|
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PubSubChannelsAsync(System.String)">
            <summary>
            查看所有订阅频道
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PubSubNumPatAsync">
            <summary>
            查看所有模糊订阅端的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PubSubNumSubAsync(System.String[])">
            <summary>
            查看所有订阅端的数量
            </summary>
            <param name="channels">频道</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PfAddAsync``1(System.String,``0[])">
            <summary>
            添加指定元素到 HyperLogLog
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PfCountAsync(System.String[])">
            <summary>
            返回给定 HyperLogLog 的基数估算值
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PfMergeAsync(System.String,System.String[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog
            </summary>
            <param name="destKey">新的 HyperLogLog，不含prefix前辍</param>
            <param name="sourceKeys">源 HyperLogLog，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZPopMaxAsync(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZPopMaxAsync``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZPopMinAsync(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZPopMinAsync``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZAddAsync(System.String,System.ValueTuple{System.Decimal,System.Object}[])">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="scoreMembers">一个或多个成员分数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZCardAsync(System.String)">
            <summary>
            获取有序集合的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZCountAsync(System.String,System.Decimal,System.Decimal)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZCountAsync(System.String,System.String,System.String)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZIncrByAsync(System.String,System.String,System.Decimal)">
            <summary>
            有序集合中对指定成员的分数加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="increment">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZInterStoreAsync(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的交集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeWithScoresAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreAsync``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreWithScoresAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreWithScoresAsync``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByScoreWithScoresAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRankAsync(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的索引
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemAsync``1(System.String,``0[])">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemRangeByRankAsync(System.String,System.Int64,System.Int64)">
            <summary>
            移除有序集合中给定的排名区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemRangeByScoreAsync(System.String,System.Decimal,System.Decimal)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemRangeByScoreAsync(System.String,System.String,System.String)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeWithScoresAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreAsync``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreWithScoresAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreWithScoresAsync``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRangeByScoreWithScoresAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRevRankAsync(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZScoreAsync(System.String,System.Object)">
            <summary>
            返回有序集中，成员的分数值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZUnionStoreAsync(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的并集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByLexAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRangeByLexAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZRemRangeByLexAsync(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ZLexCountAsync(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SAddAsync``1(System.String,``0[])">
            <summary>
            向集合添加一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SCardAsync(System.String)">
            <summary>
            获取集合的成员数
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SDiffAsync(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SDiffAsync``1(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SDiffStoreAsync(System.String,System.String[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SInterAsync(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SInterAsync``1(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SInterStoreAsync(System.String,System.String[])">
            <summary>
            返回给定所有集合的交集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SIsMemberAsync(System.String,System.Object)">
            <summary>
            判断 member 元素是否是集合 key 的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SMembersAsync(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SMembersAsync``1(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SMoveAsync(System.String,System.String,System.Object)">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合
            </summary>
            <param name="source">无序集合key，不含prefix前辍</param>
            <param name="destination">目标无序集合key，不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SPopAsync(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SPopAsync``1(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SPopAsync(System.String,System.Int64)">
            <summary>
            [redis-server 3.2] 移除并返回集合中的一个或多个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除并返回的个数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SPopAsync``1(System.String,System.Int64)">
            <summary>
            [redis-server 3.2] 移除并返回集合中的一个或多个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除并返回的个数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRandMemberAsync(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRandMemberAsync``1(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRandMembersAsync(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRandMembersAsync``1(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SRemAsync``1(System.String,``0[])">
            <summary>
            移除集合中一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SUnionAsync(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SUnionAsync``1(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SUnionStoreAsync(System.String,System.String[])">
            <summary>
            所有给定集合的并集存储在 destination 集合中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LIndexAsync(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LIndexAsync``1(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LInsertBeforeAsync(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素前面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LInsertAfterAsync(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素后面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LLenAsync(System.String)">
            <summary>
            获取列表长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LPopAsync(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LPopAsync``1(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LPushAsync``1(System.String,``0[])">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 LPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LPushXAsync(System.String,System.Object)">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns>执行 LPUSHX 命令后，列表的长度。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LRemAsync(System.String,System.Int64,System.Object)">
            <summary>
            根据参数 count 的值，移除列表中与参数 value 相等的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除的数量，大于0时从表头删除数量count，小于0时从表尾删除数量-count，等于0移除所有</param>
            <param name="value">元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LSetAsync(System.String,System.Int64,System.Object)">
            <summary>
            通过索引设置列表元素的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.LTrimAsync(System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPopAsync(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPopAsync``1(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPopLPushAsync(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPopLPushAsync``1(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPushAsync``1(System.String,``0[])">
            <summary>
            在列表中添加一个或多个值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RPushXAsync(System.String,System.Object)">
            <summary>
            为已存在的列表添加值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSHX 命令后，列表的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HStrLenAsync(System.String,System.String)">
            <summary>
            [redis-server 3.2.0] 返回hash指定field的value的字符串长度，如果hash或者field不存在，返回0.
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HDelAsync(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HExistsAsync(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HGetAsync(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HGetAsync``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HGetAllAsync(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HGetAllAsync``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HIncrByAsync(System.String,System.String,System.Int64)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HIncrByFloatAsync(System.String,System.String,System.Decimal)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HKeysAsync(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HLenAsync(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HMGetAsync(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HMGetAsync``1(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">一个或多个字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HMSetAsync(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HSetAsync(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值</param>
            <returns>如果字段是哈希表中的一个新建字段，并且值设置成功，返回true。如果哈希表中域字段已经存在且旧值已被新值覆盖，返回false。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HSetNxAsync(System.String,System.String,System.Object)">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值(string 或 byte[])</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HValsAsync(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HValsAsync``1(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.HScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.AppendAsync(System.String,System.Object)">
            <summary>
            如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">字符串</param>
            <returns>追加指定值之后， key 中字符串的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BitCountAsync(System.String,System.Int64,System.Int64)">
            <summary>
            计算给定位置被设置为 1 的比特位的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置</param>
            <param name="end">结束位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BitOpAsync(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上
            </summary>
            <param name="op">And | Or | XOr | Not</param>
            <param name="destKey">不含prefix前辍</param>
            <param name="keys">不含prefix前辍</param>
            <returns>保存到 destkey 的长度，和输入 key 中最长的长度相等</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.BitPosAsync(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            对 key 所储存的值，查找范围内第一个被设置为1或者0的bit位
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="bit">查找值</param>
            <param name="start">开始位置，-1是最后一个，-2是倒数第二个</param>
            <param name="end">结果位置，-1是最后一个，-2是倒数第二个</param>
            <returns>返回范围内第一个被设置为1或者0的bit位</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetAsync(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetAsync``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetBitAsync(System.String,System.UInt32)">
            <summary>
            对 key 所储存的值，获取指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetSetAsync(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GetSetAsync``1(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.IncrByAsync(System.String,System.Int64)">
            <summary>
            将 key 所储存的值加上给定的增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.IncrByFloatAsync(System.String,System.Decimal)">
            <summary>
            将 key 所储存的值加上给定的浮点增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MGetAsync(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MGetAsync``1(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MSetAsync(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MSetNxAsync(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SetAsync(System.String,System.Object,System.Int32,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <param name="expireSeconds">过期(秒单位)</param>
            <param name="exists">Nx, Xx</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SetBitAsync(System.String,System.UInt32,System.Boolean)">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SetNxAsync(System.String,System.Object)">
            <summary>
            只有在 key 不存在时设置 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SetRangeAsync(System.String,System.UInt32,System.Object)">
            <summary>
            用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns>被修改后的字符串长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.StrLenAsync(System.String)">
            <summary>
            返回 key 所储存的字符串值的长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.TouchAsync(System.String[])">
            <summary>
            [redis-server 3.2.1] 修改指定key(s) 最后访问时间 若key不存在，不做操作
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.UnLinkAsync(System.String[])">
            <summary>
            [redis-server 4.0.0] Delete a key, 该命令和DEL十分相似：删除指定的key(s),若key不存在则该key被跳过。但是，相比DEL会产生阻塞，该命令会在另一个线程中回收内存，因此它是非阻塞的。 这也是该命令名字的由来：仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.DelAsync(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.DumpAsync(System.String)">
            <summary>
            序列化给定 key ，并返回被序列化的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ExistsAsync(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ExistsAsync(System.String[])">
            <summary>
            [redis-server 3.0] 检查给定多个 key 是否存在
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ExpireAsync(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="seconds">过期秒数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ExpireAsync(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ExpireAtAsync(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.KeysAsync(System.String)">
            <summary>
            查找所有分区节点中符合给定模式(pattern)的 key
            </summary>
            <param name="pattern">如：runoob*</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.MoveAsync(System.String,System.Int32)">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="database">数据库</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ObjectEncodingAsync(System.String)">
            <summary>
            该返回给定 key 锁储存的值所使用的内部表示(representation)
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ObjectRefCountAsync(System.String)">
            <summary>
            该返回给定 key 引用所储存的值的次数。此命令主要用于除错
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ObjectIdleTimeAsync(System.String)">
            <summary>
            返回给定 key 自储存以来的空转时间(idle， 没有被读取也没有被写入)，以秒为单位
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PersistAsync(System.String)">
            <summary>
            移除 key 的过期时间，key 将持久保持
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PExpireAsync(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="milliseconds">过期毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PExpireAsync(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PExpireAtAsync(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.PTtlAsync(System.String)">
            <summary>
            以毫秒为单位返回 key 的剩余的过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RandomKeyAsync">
            <summary>
            从所有节点中随机返回一个 key
            </summary>
            <returns>返回的 key 如果包含 prefix前辍，则会去除后返回</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RenameAsync(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RenameNxAsync(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RestoreAsync(System.String,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.RestoreAsync(System.String,System.Int64,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="ttlMilliseconds">毫秒为单位为 key 设置生存时间</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SortAsync(System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            返回给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="count">数量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.SortAndStoreAsync(System.String,System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            保存给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="count">数量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.TtlAsync(System.String)">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.TypeAsync(System.String)">
            <summary>
            返回 key 所储存的值的类型
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScanAsync(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.ScanAsync``1(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoAddAsync(System.String,System.Decimal,System.Decimal,System.Object)">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="member">成员</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoAddAsync(System.String,System.ValueTuple{System.Decimal,System.Decimal,System.Object}[])">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="values">批量添加的值</param>
            <returns>添加到sorted set元素的数目，但不包括已更新score的元素。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoDistAsync(System.String,System.Object,System.Object,CSRedis.GeoUnit)">
            <summary>
            返回两个给定位置之间的距离。如果两个位置之间的其中一个不存在， 那么命令返回空值。GEODIST 命令在计算距离时会假设地球为完美的球形， 在极限情况下， 这一假设最大会造成 0.5% 的误差。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member1">成员1</param>
            <param name="member2">成员2</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <returns>计算出的距离会以双精度浮点数的形式被返回。 如果给定的位置元素不存在， 那么命令返回空值。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoHashAsync(System.String,System.Object[])">
            <summary>
            返回一个或多个位置元素的 Geohash 表示。通常使用表示位置的元素使用不同的技术，使用Geohash位置52点整数编码。由于编码和解码过程中所使用的初始最小和最大坐标不同，编码的编码也不同于标准。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>一个数组， 数组的每个项都是一个 geohash 。 命令返回的 geohash 的位置与用户给定的位置元素的位置一一对应。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoPosAsync(System.String,System.Object[])">
            <summary>
            从key里返回所有给定位置元素的位置（经度和纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>GEOPOS 命令返回一个数组， 数组中的每个项都由两个元素组成： 第一个元素为给定位置元素的经度， 而第二个元素则为给定位置元素的纬度。当给定的位置元素不存在时， 对应的数组项为空值。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusAsync(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusAsync``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithDistAsync(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithDistAsync``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithCoordAsync(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithCoordAsync``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithDistAndCoordAsync(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusWithDistAndCoordAsync``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberAsync(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberAsync``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithDistAsync(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithDistAsync``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithCoordAsync(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithCoordAsync``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithDistAndCoordAsync(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClient.GeoRadiusByMemberWithDistAndCoordAsync``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientLock.Delay(System.Int32)">
            <summary>
            延长锁时间，锁在占用期内操作时返回true，若因锁超时被其他使用者占用则返回false
            </summary>
            <param name="milliseconds">延长的毫秒数</param>
            <returns>成功/失败</returns>
        </member>
        <member name="M:CSRedis.CSRedisClientLock.Refresh(System.Int32)">
            <summary>
            刷新锁时间，把key的ttl重新设置为milliseconds，锁在占用期内操作时返回true，若因锁超时被其他使用者占用则返回false
            </summary>
            <param name="milliseconds">刷新的毫秒数</param>
            <returns>成功/失败</returns>
        </member>
        <member name="M:CSRedis.CSRedisClientLock.Unlock">
            <summary>
            释放分布式锁
            </summary>
            <returns>成功/失败</returns>
        </member>
        <member name="P:CSRedis.CSRedisClientPipe`1.Counter">
            <summary>
            执行命令数量
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.EndPipe">
            <summary>
            提交批命令
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Dispose">
            <summary>
            提交批命令
            </summary>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Eval(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="script">Lua 脚本</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.EvalSHA(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Publish(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，最终消息发布格式：1|message
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.PublishNoneMessageId(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，与 Publish 方法不同，不返回消息id头，即 1|
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.PfAdd``1(System.String,``0[])">
            <summary>
            添加指定元素到 HyperLogLog
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.PfCount(System.String)">
            <summary>
            返回给定 HyperLogLog 的基数估算值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZPopMax(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZPopMax``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZPopMin(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZPopMin``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZAdd(System.String,System.ValueTuple{System.Decimal,System.Object}[])">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="scoreMembers">一个或多个成员分数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZCard(System.String)">
            <summary>
            获取有序集合的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZCount(System.String,System.Decimal,System.Decimal)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZCount(System.String,System.String,System.String)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZIncrBy(System.String,System.String,System.Decimal)">
            <summary>
            有序集合中对指定成员的分数加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="increment">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZInterStore(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的交集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRange(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRangeByScore(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRangeByScore``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRangeByScoreWithScores(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRangeByScoreWithScores``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRank(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的索引
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRem``1(System.String,``0[])">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            移除有序集合中给定的排名区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRemRangeByScore(System.String,System.Decimal,System.Decimal)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRemRangeByScore(System.String,System.String,System.String)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRevRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRevRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRevRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRevRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRevRangeByScore(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRevRangeByScore``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRevRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRevRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRevRangeByScoreWithScores(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRevRangeByScoreWithScores``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRevRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRevRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRevRank(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZScore(System.String,System.Object)">
            <summary>
            返回有序集中，成员的分数值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZUnionStore(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的并集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRangeByLex(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRangeByLex``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="count">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZRemRangeByLex(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ZLexCount(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SAdd``1(System.String,``0[])">
            <summary>
            向集合添加一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SCard(System.String)">
            <summary>
            获取集合的成员数
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SDiff(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SDiff``1(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SDiffStore(System.String,System.String[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SInter(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SInter``1(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SInterStore(System.String,System.String[])">
            <summary>
            返回给定所有集合的交集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SIsMember(System.String,System.Object)">
            <summary>
            判断 member 元素是否是集合 key 的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SMembers(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SMembers``1(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SMove(System.String,System.String,System.Object)">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合
            </summary>
            <param name="source">无序集合key，不含prefix前辍</param>
            <param name="destination">目标无序集合key，不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SPop(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SPop``1(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SRandMember(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SRandMember``1(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SRandMembers(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SRandMembers``1(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SRem``1(System.String,``0[])">
            <summary>
            移除集合中一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SUnion(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SUnion``1(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SUnionStore(System.String,System.String[])">
            <summary>
            所有给定集合的并集存储在 destination 集合中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.LIndex(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.LIndex``1(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.LInsertBefore(System.String,System.String,System.Object)">
            <summary>
            在列表中的元素前面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.LInsertAfter(System.String,System.String,System.Object)">
            <summary>
            在列表中的元素后面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.LLen(System.String)">
            <summary>
            获取列表长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.LPop(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.LPop``1(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.LPush``1(System.String,``0[])">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 LPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.LPushX(System.String,System.Object)">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns>执行 LPUSHX 命令后，列表的长度。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.LRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.LRem(System.String,System.Int64,System.Object)">
            <summary>
            根据参数 count 的值，移除列表中与参数 value 相等的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除的数量，大于0时从表头删除数量count，小于0时从表尾删除数量-count，等于0移除所有</param>
            <param name="value">元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.LSet(System.String,System.Int64,System.Object)">
            <summary>
            通过索引设置列表元素的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.RPop(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.RPop``1(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.RPopLPush(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.RPopLPush``1(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.RPush``1(System.String,``0[])">
            <summary>
            在列表中添加一个或多个值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.RPushX(System.String,System.Object)">
            <summary>
            为已存在的列表添加值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSHX 命令后，列表的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HStrLen(System.String,System.String)">
            <summary>
            [redis-server 3.2.0] 返回hash指定field的value的字符串长度，如果hash或者field不存在，返回0.
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HDel(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HExists(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HGet(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HGet``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HGetAll(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HGetAll``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HIncrByFloat(System.String,System.String,System.Decimal)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HKeys(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HLen(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HMGet(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HMGet``1(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">一个或多个字段</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HMSet(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HSet(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值</param>
            <returns>如果字段是哈希表中的一个新建字段，并且值设置成功，返回true。如果哈希表中域字段已经存在且旧值已被新值覆盖，返回false。</returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HSetNx(System.String,System.String,System.Object)">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值(string 或 byte[])</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HVals(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HVals``1(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.HScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Append(System.String,System.Object)">
            <summary>
            如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">字符串</param>
            <returns>追加指定值之后， key 中字符串的长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.BitCount(System.String,System.Int64,System.Int64)">
            <summary>
            计算给定位置被设置为 1 的比特位的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置</param>
            <param name="end">结束位置</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.BitOp(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上
            </summary>
            <param name="op">And | Or | XOr | Not</param>
            <param name="destKey">不含prefix前辍</param>
            <param name="keys">不含prefix前辍</param>
            <returns>保存到 destkey 的长度，和输入 key 中最长的长度相等</returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.BitPos(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            对 key 所储存的值，查找范围内第一个被设置为1或者0的bit位
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="bit">查找值</param>
            <param name="start">开始位置，-1是最后一个，-2是倒数第二个</param>
            <param name="end">结果位置，-1是最后一个，-2是倒数第二个</param>
            <returns>返回范围内第一个被设置为1或者0的bit位</returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Get(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Get``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.GetBit(System.String,System.UInt32)">
            <summary>
            对 key 所储存的值，获取指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.GetRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.GetSet(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.GetSet``1(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.IncrBy(System.String,System.Int64)">
            <summary>
            将 key 所储存的值加上给定的增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.IncrBy(System.String,System.Decimal)">
            <summary>
            将 key 所储存的值加上给定的浮点增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.MGet(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Set(System.String,System.Object,System.Int32,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <param name="expireSeconds">过期(秒单位)</param>
            <param name="exists">Nx, Xx</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SetNx(System.String,System.Object)">
            <summary>
            只有在 key 不存在时设置 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SetRange(System.String,System.UInt32,System.Object)">
            <summary>
            用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns>被修改后的字符串长度</returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.StrLen(System.String)">
            <summary>
            返回 key 所储存的字符串值的长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Touch(System.String)">
            <summary>
            [redis-server 3.2.1] 修改指定key(s) 最后访问时间 若key不存在，不做操作
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.UnLink(System.String)">
            <summary>
            [redis-server 4.0.0] Delete a key, 该命令和DEL十分相似：删除指定的key(s),若key不存在则该key被跳过。但是，相比DEL会产生阻塞，该命令会在另一个线程中回收内存，因此它是非阻塞的。 这也是该命令名字的由来：仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Del(System.String)">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Dump(System.String)">
            <summary>
            序列化给定 key ，并返回被序列化的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Exists(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Expire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="seconds">过期秒数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Expire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Keys(System.String)">
            <summary>
            查找所有分区节点中符合给定模式(pattern)的 key
            </summary>
            <param name="pattern">如：runoob*</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Move(System.String,System.Int32)">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="database">数据库</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ObjectEncoding(System.String)">
            <summary>
            该返回给定 key 锁储存的值所使用的内部表示(representation)
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ObjectRefCount(System.String)">
            <summary>
            该返回给定 key 引用所储存的值的次数。此命令主要用于除错
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.ObjectIdleTime(System.String)">
            <summary>
            返回给定 key 自储存以来的空转时间(idle， 没有被读取也没有被写入)，以秒为单位
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Persist(System.String)">
            <summary>
            移除 key 的过期时间，key 将持久保持
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.PExpire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="milliseconds">过期毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.PExpire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.PExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.PTtl(System.String)">
            <summary>
            以毫秒为单位返回 key 的剩余的过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.RandomKey">
            <summary>
            从所有节点中随机返回一个 key
            </summary>
            <returns>返回的 key 如果包含 prefix前辍，则会去除后返回</returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Rename(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.RenameNx(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Restore(System.String,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Restore(System.String,System.Int64,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="ttlMilliseconds">毫秒为单位为 key 设置生存时间</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Sort(System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            返回给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="count">数量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.SortAndStore(System.String,System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            保存给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="count">数量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Ttl(System.String)">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Type(System.String)">
            <summary>
            返回 key 所储存的值的类型
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Scan(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.CSRedisClientPipe`1.Scan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="T:CSRedis.RedisSubscriptionReceivedEventArgs">
            <summary>
            Provides data for the event that is raised when a subscription message is received
            </summary>
        </member>
        <member name="P:CSRedis.RedisSubscriptionReceivedEventArgs.Message">
            <summary>
            The subscription message
            </summary>
        </member>
        <member name="T:CSRedis.RedisSubscriptionChangedEventArgs">
            <summary>
            Provides data for the event that is raised when a subscription channel is opened or closed
            </summary>
        </member>
        <member name="P:CSRedis.RedisSubscriptionChangedEventArgs.Response">
            <summary>
            The subscription response
            </summary>
        </member>
        <member name="T:CSRedis.RedisTransactionQueuedEventArgs">
            <summary>
            Provides data for the event that is raised when a transaction command has been processed by the server
            </summary>
        </member>
        <member name="P:CSRedis.RedisTransactionQueuedEventArgs.Status">
            <summary>
            The status code of the transaction command
            </summary>
        </member>
        <member name="P:CSRedis.RedisTransactionQueuedEventArgs.Command">
            <summary>
            The command that was queued
            </summary>
        </member>
        <member name="P:CSRedis.RedisTransactionQueuedEventArgs.Arguments">
            <summary>
            The arguments of the queued command
            </summary>
        </member>
        <member name="T:CSRedis.RedisMonitorEventArgs">
            <summary>
            Provides data for the event that is raised when a Redis MONITOR message is received
            </summary>
        </member>
        <member name="P:CSRedis.RedisMonitorEventArgs.Message">
            <summary>
            Monitor output
            </summary>
        </member>
        <member name="T:CSRedis.RedisException">
            <summary>
            Represents a Redis server error reply
            </summary>
        </member>
        <member name="M:CSRedis.RedisException.#ctor(System.String)">
            <summary>
            Instantiate a new instance of the RedisException class
            </summary>
            <param name="message">Server response</param>
        </member>
        <member name="T:CSRedis.RedisProtocolException">
            <summary>
            The exception that is thrown when an unexpected value is found in a Redis request or response 
            </summary>
        </member>
        <member name="M:CSRedis.RedisProtocolException.#ctor(System.String)">
            <summary>
            Instantiate a new instance of the RedisProtocolException class
            </summary>
            <param name="message">Protocol violoation message</param>
        </member>
        <member name="T:CSRedis.RedisClientException">
            <summary>
            Exception thrown by RedisClient
            </summary>
        </member>
        <member name="M:CSRedis.RedisClientException.#ctor(System.String)">
            <summary>
            Instantiate a new instance of the RedisClientException class
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="M:CSRedis.RedisClientException.#ctor(System.String,System.Exception)">
            <summary>
            Instantiate a new instance of the RedisClientException class
            </summary>
            <param name="message">Exception message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.IObjectPool`1.IsAvailable">
            <summary>
            是否可用
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.IObjectPool`1.UnavailableException">
            <summary>
            不可用错误
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.IObjectPool`1.UnavailableTime">
            <summary>
            不可用时间
            </summary>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.IObjectPool`1.SetUnavailable(System.Exception)">
            <summary>
            将对象池设置为不可用，后续 Get/GetAsync 均会报错，同时启动后台定时检查服务恢复可用
            </summary>
            <param name="exception"></param>
            <returns>由【可用】变成【不可用】时返回true，否则返回false</returns>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.IObjectPool`1.Statistics">
            <summary>
            统计对象池中的对象
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.IObjectPool`1.StatisticsFullily">
            <summary>
            统计对象池中的对象（完整)
            </summary>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.IObjectPool`1.Get(System.Nullable{System.TimeSpan})">
            <summary>
            获取资源
            </summary>
            <param name="timeout">超时</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.IObjectPool`1.GetAsync">
            <summary>
            获取资源
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.IObjectPool`1.Return(CSRedis.Internal.ObjectPool.Object{`0},System.Boolean)">
            <summary>
            使用完毕后，归还资源
            </summary>
            <param name="obj">对象</param>
            <param name="isReset">是否重新创建</param>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.IPolicy`1.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.IPolicy`1.PoolSize">
            <summary>
            池容量
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.IPolicy`1.SyncGetTimeout">
            <summary>
            默认获取超时设置
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.IPolicy`1.IdleTimeout">
            <summary>
            空闲时间，获取时若超出，则重新创建
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.IPolicy`1.AsyncGetCapacity">
            <summary>
            异步获取排队队列大小，小于等于0不生效
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.IPolicy`1.IsThrowGetTimeoutException">
            <summary>
            获取超时后，是否抛出异常
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.IPolicy`1.IsAutoDisposeWithSystem">
            <summary>
            监听 AppDomain.CurrentDomain.ProcessExit/Console.CancelKeyPress 事件自动释放
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.IPolicy`1.CheckAvailableInterval">
            <summary>
            后台定时检查可用性间隔秒数
            </summary>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.IPolicy`1.OnCreate">
            <summary>
            对象池的对象被创建时
            </summary>
            <returns>返回被创建的对象</returns>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.IPolicy`1.OnDestroy(`0)">
            <summary>
            销毁对象
            </summary>
            <param name="obj">资源对象</param>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.IPolicy`1.OnGetTimeout">
            <summary>
            从对象池获取对象超时的时候触发，通过该方法统计
            </summary>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.IPolicy`1.OnGet(CSRedis.Internal.ObjectPool.Object{`0})">
            <summary>
            从对象池获取对象成功的时候触发，通过该方法统计或初始化对象
            </summary>
            <param name="obj">资源对象</param>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.IPolicy`1.OnGetAsync(CSRedis.Internal.ObjectPool.Object{`0})">
            <summary>
            从对象池获取对象成功的时候触发，通过该方法统计或初始化对象
            </summary>
            <param name="obj">资源对象</param>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.IPolicy`1.OnReturn(CSRedis.Internal.ObjectPool.Object{`0})">
            <summary>
            归还对象给对象池的时候触发
            </summary>
            <param name="obj">资源对象</param>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.IPolicy`1.OnCheckAvailable(CSRedis.Internal.ObjectPool.Object{`0})">
            <summary>
            检查可用性
            </summary>
            <param name="obj">资源对象</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.IPolicy`1.OnAvailable">
            <summary>
            事件：可用时触发
            </summary>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.IPolicy`1.OnUnavailable">
            <summary>
            事件：不可用时触发
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.Object`1.Pool">
            <summary>
            所属对象池
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.Object`1.Id">
            <summary>
            在对象池中的唯一标识
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.Object`1.Value">
            <summary>
            资源对象
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.Object`1.GetTimes">
            <summary>
            被获取的总次数
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.Object`1.LastGetTime">
            最后获取时的时间
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.Object`1.LastReturnTime">
            <summary>
            最后归还时的时间
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.Object`1.CreateTime">
            <summary>
            创建时间
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.Object`1.LastGetThreadId">
            <summary>
            最后获取时的线程id
            </summary>
        </member>
        <member name="P:CSRedis.Internal.ObjectPool.Object`1.LastReturnThreadId">
            <summary>
            最后归还时的线程id
            </summary>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.Object`1.ResetValue">
            <summary>
            重置 Value 值
            </summary>
        </member>
        <member name="T:CSRedis.Internal.ObjectPool.ObjectPool`1">
            <summary>
            对象池管理类
            </summary>
            <typeparam name="T">对象类型</typeparam>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.ObjectPool`1.CheckAvailable(System.Int32)">
            <summary>
            后台定时检查可用性
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.ObjectPool`1.#ctor(System.Int32,System.Func{`0},System.Action{CSRedis.Internal.ObjectPool.Object{`0}})">
            <summary>
            创建对象池
            </summary>
            <param name="poolsize">池大小</param>
            <param name="createObject">池内对象的创建委托</param>
            <param name="onGetObject">获取池内对象成功后，进行使用前操作</param>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.ObjectPool`1.#ctor(CSRedis.Internal.ObjectPool.IPolicy{`0})">
            <summary>
            创建对象池
            </summary>
            <param name="policy">策略</param>
        </member>
        <member name="M:CSRedis.Internal.ObjectPool.ObjectPool`1.getFree(System.Boolean)">
            <summary>
            获取可用资源，或创建资源
            </summary>
            <returns></returns>
        </member>
        <member name="F:CSRedis.Internal.Resp3Helper.MessageType.BlobString">
            <summary>
            $11\r\nhelloworld\r\n
            </summary>
        </member>
        <member name="F:CSRedis.Internal.Resp3Helper.MessageType.SimpleString">
            <summary>
            +hello world\r\n
            </summary>
        </member>
        <member name="F:CSRedis.Internal.Resp3Helper.MessageType.VerbatimString">
            <summary>
            =15\r\ntxt:Some string\r\n
            </summary>
        </member>
        <member name="F:CSRedis.Internal.Resp3Helper.MessageType.SimpleError">
            <summary>
            -ERR this is the error description\r\n<para></para>
            The first word in the error is in upper case and describes the error code.
            </summary>
        </member>
        <member name="F:CSRedis.Internal.Resp3Helper.MessageType.BlobError">
            <summary>
            !21\r\nSYNTAX invalid syntax\r\n<para></para>
            The first word in the error is in upper case and describes the error code.
            </summary>
        </member>
        <member name="F:CSRedis.Internal.Resp3Helper.MessageType.Number">
            <summary>
            :1234\r\n
            </summary>
        </member>
        <member name="F:CSRedis.Internal.Resp3Helper.MessageType.BigNumber">
            <summary>
            (3492890328409238509324850943850943825024385\r\n
            </summary>
        </member>
        <member name="F:CSRedis.Internal.Resp3Helper.MessageType.Null">
            <summary>
            _\r\n
            </summary>
        </member>
        <member name="F:CSRedis.Internal.Resp3Helper.MessageType.Double">
            <summary>
            ,1.23\r\n<para></para>
            ,inf\r\n<para></para>
            ,-inf\r\n
            </summary>
        </member>
        <member name="F:CSRedis.Internal.Resp3Helper.MessageType.Boolean">
            <summary>
            #t\r\n<para></para>
            #f\r\n
            </summary>
        </member>
        <member name="F:CSRedis.Internal.Resp3Helper.MessageType.Array">
            <summary>
            *3\r\n:1\r\n:2\r\n:3\r\n<para></para>
            [1, 2, 3]
            </summary>
        </member>
        <member name="F:CSRedis.Internal.Resp3Helper.MessageType.Set">
            <summary>
            ~5\r\n+orange\r\n+apple\r\n#t\r\n:100\r\n:999\r\n
            </summary>
        </member>
        <member name="F:CSRedis.Internal.Resp3Helper.MessageType.Push">
            <summary>
            >4\r\n+pubsub\r\n+message\r\n+somechannel\r\n+this is the message\r\n
            </summary>
        </member>
        <member name="F:CSRedis.Internal.Resp3Helper.MessageType.Map">
            <summary>
            %2\r\n+first\r\n:1\r\n+second\r\n:2\r\n<para></para>
            { "first": 1, "second": 2 }
            </summary>
        </member>
        <member name="F:CSRedis.Internal.Resp3Helper.MessageType.Attribute">
            <summary>
            |2\r\n+first\r\n:1\r\n+second\r\n:2\r\n<para></para>
            { "first": 1, "second": 2 }
            </summary>
        </member>
        <member name="M:CSRedis.Internal.Resp3Helper.DisplayCsharp(System.Type,System.Boolean)">
            <summary>
            获取 Type 的原始 c# 文本表示
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.Internal.Utilities.RedisArgs.Concat(System.Object[][])">
            <summary>
            Join arrays
            </summary>
            <param name="arrays">Arrays to join</param>
            <returns>Array of ToString() elements in each array</returns>
        </member>
        <member name="M:CSRedis.Internal.Utilities.RedisArgs.Concat(System.String,System.Object[])">
            <summary>
            Joine string with arrays
            </summary>
            <param name="str">Leading string element</param>
            <param name="arrays">Array to join</param>
            <returns>Array of str and ToString() elements of arrays</returns>
        </member>
        <member name="M:CSRedis.Internal.Utilities.RedisArgs.GetTupleArgs``2(System.Tuple{``0,``1}[])">
            <summary>
            Convert array of two-element tuple into flat array arguments
            </summary>
            <typeparam name="TItem1">Type of first item</typeparam>
            <typeparam name="TItem2">Type of second item</typeparam>
            <param name="tuples">Array of tuple arguments</param>
            <returns>Flattened array of arguments</returns>
        </member>
        <member name="M:CSRedis.Internal.Utilities.RedisArgs.GetScore(System.Decimal,System.Boolean)">
            <summary>
            Parse score for +/- infinity and inclusive/exclusive
            </summary>
            <param name="score">Numeric base score</param>
            <param name="isExclusive">Score is exclusive, rather than inclusive</param>
            <returns>String representing Redis score/range notation</returns>
        </member>
        <member name="T:CSRedis.IRedisClient">
            <summary>
            Common properties of the RedisClient
            </summary>
        </member>
        <member name="E:CSRedis.IRedisClient.SubscriptionReceived">
            <summary>
            Occurs when a subscription message is received
            </summary>
        </member>
        <member name="E:CSRedis.IRedisClient.SubscriptionChanged">
            <summary>
            Occurs when a subscription channel is added or removed
            </summary>
        </member>
        <member name="E:CSRedis.IRedisClient.TransactionQueued">
            <summary>
            Occurs when a transaction command is acknowledged by the server
            </summary>
        </member>
        <member name="E:CSRedis.IRedisClient.MonitorReceived">
            <summary>
            Occurs when a monitor message is received
            </summary>
        </member>
        <member name="E:CSRedis.IRedisClient.Connected">
            <summary>
            Occurs when the connection has sucessfully reconnected
            </summary>
        </member>
        <member name="P:CSRedis.IRedisClient.Host">
            <summary>
            Get the Redis server hostname
            </summary>
        </member>
        <member name="P:CSRedis.IRedisClient.Port">
            <summary>
            Get the Redis server port
            </summary>
        </member>
        <member name="P:CSRedis.IRedisClient.IsConnected">
            <summary>
            Get a value indicating whether the Redis client is connected to the server
            </summary>
        </member>
        <member name="P:CSRedis.IRedisClient.Encoding">
            <summary>
            Get or set the string encoding used to communicate with the server
            </summary>
        </member>
        <member name="P:CSRedis.IRedisClient.ReceiveTimeout">
            <summary>
            Get or set the connection read timeout (milliseconds)
            </summary>
        </member>
        <member name="P:CSRedis.IRedisClient.SendTimeout">
            <summary>
            Get or set the connection send timeout (milliseconds)
            </summary>
        </member>
        <member name="P:CSRedis.IRedisClient.ReconnectAttempts">
            <summary>
            Get or set the number of times to attempt a reconnect after a connection fails
            </summary>
        </member>
        <member name="P:CSRedis.IRedisClient.ReconnectWait">
            <summary>
            Get or set the amount of time (milliseconds) to wait between reconnect attempts
            </summary>
        </member>
        <member name="T:CSRedis.IRedisClientAsync">
            <summary>
            Interface for asyncronous RedisClient methods
            </summary>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ConnectAsync">
            <summary>
            Open connection to redis server
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.CallAsync(System.String,System.String[])">
            <summary>
            Call arbitrary redis command
            </summary>
            <param name="command"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.AuthAsync(System.String)">
            <summary>
            Authenticate to the server
            </summary>
            <param name="password">Server password</param>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.EchoAsync(System.String)">
            <summary>
            Echo the given string
            </summary>
            <param name="message">Message to echo</param>
            <returns>Task associated with echo response</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PingAsync">
            <summary>
            Ping the server
            </summary>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.QuitAsync">
            <summary>
            Close the connection
            </summary>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SelectAsync(System.Int32)">
            <summary>
            Change the selected database for the current connection
            </summary>
            <param name="index">Zero-based database index</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.DelAsync(System.String[])">
            <summary>
            Delete a key
            </summary>
            <param name="keys">Keys to delete</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.DumpAsync(System.String)">
            <summary>
            Return a serialized version of the value stored at the specified key
            </summary>
            <param name="key">Key to dump</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ExistsAsync(System.String)">
            <summary>
            Determine if a key exists
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ExpireAsync(System.String,System.Int32)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest second)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ExpireAsync(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration in seconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ExpireAtAsync(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest second);
            </summary>
            <param name="key">Key to modify</param>
            <param name="expirationDate">Date of expiration, to nearest second</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ExpireAtAsync(System.String,System.Int32)">
            <summary>
            Set the expiration for a key as a UNIX timestamp
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.KeysAsync(System.String)">
            <summary>
            Find all keys matching the given pattern
            </summary>
            <param name="pattern">Pattern to match</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MigrateAsync(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MigrateAsync(System.String,System.Int32,System.String,System.Int32,System.TimeSpan)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MoveAsync(System.String,System.Int32)">
            <summary>
            Move a key to another database
            </summary>
            <param name="key">Key to move</param>
            <param name="database">Database destination ID</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ObjectEncodingAsync(System.String[])">
            <summary>
            Get the number of references of the value associated with the specified key
            </summary>
            <param name="arguments">Subcommand arguments</param>
            <returns>The type of internal representation used to store the value at the specified key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ObjectAsync(CSRedis.RedisObjectSubCommand,System.String[])">
            <summary>
            Inspect the internals of Redis objects
            </summary>
            <param name="subCommand">Type of Object command to send</param>
            <param name="arguments">Subcommand arguments</param>
            <returns>Varies depending on subCommand</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PersistAsync(System.String)">
            <summary>
            Remove the expiration from a key
            </summary>
            <param name="key">Key to modify</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PExpireAsync(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest millisecond)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PExpireAsync(System.String,System.Int64)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PExpireAtAsync(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest millisecond);
            </summary>
            <param name="key">Key to modify</param>
            <param name="date">Expiration date</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PExpireAtAsync(System.String,System.Int64)">
            <summary>
            Set the expiration for a key as a UNIX timestamp specified in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">Expiration timestamp (milliseconds)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PTtlAsync(System.String)">
            <summary>
            Get the time to live for a key in milliseconds
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RandomKeyAsync">
            <summary>
            Return a random key from the keyspace
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RenameAsync(System.String,System.String)">
            <summary>
            Rename a key
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RenameNxAsync(System.String,System.String)">
            <summary>
            Rename a key, only if the new key does not exist
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RestoreAsync(System.String,System.Int64,System.Byte[])">
            <summary>
            Create a key using the provided serialized value, previously obtained using dump
            </summary>
            <param name="key">Key to restore</param>
            <param name="ttlMilliseconds">Time-to-live in milliseconds</param>
            <param name="serializedValue">Serialized value from DUMP</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SortAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set
            </summary>
            <param name="key">Key to sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SortAndStoreAsync(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set, then store the result in a new list
            </summary>
            <param name="key">Key to sort</param>
            <param name="destination">Destination key name of stored sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.TtlAsync(System.String)">
            <summary>
            Get the time to live for a key
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.TypeAsync(System.String)">
            <summary>
            Determine the type stored at key
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ScanAsync(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the set of keys in the currently selected Redis database
            </summary>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Set the maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HDelAsync(System.String,System.String[])">
            <summary>
            Delete one or more hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to delete</param>
            <returns>Number of fields removed from hash</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HExistsAsync(System.String,System.String)">
            <summary>
            Determine if a hash field exists
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to check</param>
            <returns>True if hash field exists</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HGetAsync(System.String,System.String)">
            <summary>
            Get the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to get</param>
            <returns>Value of hash field</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HGetAllAsync``1(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <typeparam name="T">Object to map hash</typeparam>
            <param name="key">Hash key</param>
            <returns>Strongly typed object mapped from hash</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HGetAllAsync(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Dictionary mapped from string</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HIncrByAsync(System.String,System.String,System.Int64)">
            <summary>
            Increment the integer value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HIncrByFloatAsync(System.String,System.String,System.Decimal)">
            <summary>
            Increment the float value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HKeysAsync(System.String)">
            <summary>
            Get all the fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>All hash field names</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HLenAsync(System.String)">
            <summary>
            Get the number of fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Number of fields in hash</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HMGetAsync(System.String,System.String[])">
            <summary>
            Get the values of all the given hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to return</param>
            <returns>Values of given fields</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HMSetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="dict">Dictionary mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HMSetAsync``1(System.String,``0)">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <typeparam name="T">Type of object to map hash</typeparam>
            <param name="key">Hash key</param>
            <param name="obj">Object mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HMSetAsync(System.String,System.Object[])">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="keyValues">Array of [key,value,key,value,..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HSetAsync(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field is new</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HSetNxAsync(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field, only if the field does not exist
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field was set to value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HValsAsync(System.String)">
            <summary>
            Get all the values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Array of all values in hash</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.HScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the keys and values of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LIndexAsync(System.String,System.Int64)">
            <summary>
            Get an element from a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">Zero-based index of item to return</param>
            <returns>Element at index</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LInsertAsync(System.String,CSRedis.RedisInsert,System.Object,System.Object)">
            <summary>
            Insert an element before or after another element in a list
            </summary>
            <param name="key">List key</param>
            <param name="insertType">Relative position</param>
            <param name="pivot">Relative element</param>
            <param name="value">Element to insert</param>
            <returns>Length of list after insert or -1 if pivot not found</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LLenAsync(System.String)">
            <summary>
            Get the length of a list
            </summary>
            <param name="key">List key</param>
            <returns>Length of list at key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LPopAsync(System.String)">
            <summary>
            Remove and get the first element in a list
            </summary>
            <param name="key">List key</param>
            <returns>First element in list</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LPushAsync(System.String,System.Object[])">
            <summary>
            Prepend one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LPushXAsync(System.String,System.Object)">
            <summary>
            Prepend a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Get a range of elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LRemAsync(System.String,System.Int64,System.Object)">
            <summary>
            Remove elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="count">&gt;0: remove N elements from head to tail; &lt;0: remove N elements from tail to head; =0: remove all elements</param>
            <param name="value">Remove elements equal to value</param>
            <returns>Number of removed elements</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LSetAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value of an element in a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">List index to modify</param>
            <param name="value">New element value</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LTrimAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Trim a list to the specified range
            </summary>
            <param name="key">List key</param>
            <param name="start">Zero-based start index</param>
            <param name="stop">Zero-based stop index</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RPopAsync(System.String)">
            <summary>
            Remove and get the last elment in a list
            </summary>
            <param name="key">List key</param>
            <returns>Value of last list element</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RPopLPushAsync(System.String,System.String)">
            <summary>
            Remove the last elment in a list, append it to another list and return it
            </summary>
            <param name="source">List source key</param>
            <param name="destination">Destination key</param>
            <returns>Element being popped and pushed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RPushAsync(System.String,System.Object[])">
            <summary>
            Append one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RPushXAsync(System.String,System.Object)">
            <summary>
            Append a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SAddAsync(System.String,System.Object[])">
            <summary>
            Add one or more members to a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Members to add to set</param>
            <returns>Number of elements added to set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SCardAsync(System.String)">
            <summary>
            Get the number of members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>Number of elements in set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SDiffAsync(System.String[])">
            <summary>
            Subtract multiple sets
            </summary>
            <param name="keys">Set keys to subtract</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SDiffStoreAsync(System.String,System.String[])">
            <summary>
            Subtract multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to subtract</param>
            <returns>Number of elements in the resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SInterAsync(System.String[])">
            <summary>
            Intersect multiple sets
            </summary>
            <param name="keys">Set keys to intersect</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SInterStoreAsync(System.String,System.String[])">
            <summary>
            Intersect multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to intersect</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SIsMemberAsync(System.String,System.Object)">
            <summary>
            Determine if a given value is a member of a set
            </summary>
            <param name="key">Set key</param>
            <param name="member">Member to lookup</param>
            <returns>True if member exists in set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SMembersAsync(System.String)">
            <summary>
            Get all the members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>All elements in the set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SMoveAsync(System.String,System.String,System.Object)">
            <summary>
            Move a member from one set to another
            </summary>
            <param name="source">Source key</param>
            <param name="destination">Destination key</param>
            <param name="member">Member to move</param>
            <returns>True if element was moved</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SPopAsync(System.String)">
            <summary>
            Remove and return a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>The removed element</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SPopAsync(System.String,System.Int64)">
            <summary>
            Remove and return one or more random members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to remove and return</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SRandMemberAsync(System.String)">
            <summary>
            Get a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>One random element from set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SRandMembersAsync(System.String,System.Int64)">
            <summary>
            Get one or more random members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to return</param>
            <returns>One or more random elements from set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SRemAsync(System.String,System.Object[])">
            <summary>
            Remove one or more members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Set members to remove</param>
            <returns>Number of elements removed from set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SUnionAsync(System.String[])">
            <summary>
            Add multiple sets
            </summary>
            <param name="keys">Set keys to union</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SUnionStoreAsync(System.String,System.String[])">
            <summary>
            Add multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to union</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the elements of a set field
            </summary>
            <param name="key">Set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZAddAsync``2(System.String,System.Tuple{``0,``1}[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="scoreMembers">Array of member scores to add to sorted set</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZAddAsync(System.String,System.Object[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="scoreMembers">Array of member scores [s1, m1, s2, m2, ..]</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZCardAsync(System.String)">
            <summary>
            Get the number of members in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <returns>Number of elements in the sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZCountAsync(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZCountAsync(System.String,System.String,System.String)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZIncrByAsync(System.String,System.Decimal,System.Object)">
            <summary>
            Increment the score of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="increment">Increment by value</param>
            <param name="member">Sorted set member to increment</param>
            <returns>New score of member</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZInterStoreAsync(System.String,System.Decimal[],System.Nullable{CSRedis.RedisAggregate},System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZInterStoreAsync(System.String,System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRangeAsync(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>Array of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Array of elements in the specified range with scores</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRangeByScoreAsync(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRangeByScoreAsync(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRangeByScoreWithScoresAsync(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRankAsync(System.String,System.Object)">
            <summary>
            Determine the index of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member or null if key does not exist</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRemAsync(System.String,System.Object[])">
            <summary>
            Remove one or more members from a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="members">Members to remove</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRemRangeByRankAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Remove all members in a sorted set within the given indexes
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRemRangeByScoreAsync(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean)">
            <summary>
            Remove all members in a sorted set within the given scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRevRangeAsync(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRevRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRevRangeByScoreAsync(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRevRangeByScoreAsync(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRevRangeByScoreWithScoresAsync(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRevRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRevRankAsync(System.String,System.Object)">
            <summary>
            Determine the index of a member in a sorted set, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZScoreAsync(System.String,System.Object)">
            <summary>
            Get the score associated with the given member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Score of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZUnionStoreAsync(System.String,System.Decimal[],System.Nullable{CSRedis.RedisAggregate},System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the scores and elements of a sorted set field
            </summary>
            <param name="key">Sorted set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRangeByLexAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Retrieve all the elements in a sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="offset">Limit result set by offset</param>
            <param name="count">Limimt result set by size</param>
            <returns>List of elements in the specified range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZRemRangeByLexAsync(System.String,System.String,System.String)">
            <summary>
            Remove all elements in the sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ZLexCountAsync(System.String,System.String,System.String)">
            <summary>
            Returns the number of elements in the sorted set with a value between min and max.
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PublishAsync(System.String,System.String)">
            <summary>
            Post a message to a channel
            </summary>
            <param name="channel">Channel to post message</param>
            <param name="message">Message to send</param>
            <returns>Number of clients that received the message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PubSubChannelsAsync(System.String)">
            <summary>
            List the currently active channels
            </summary>
            <param name="pattern">Glob-style channel pattern</param>
            <returns>Active channel names</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PubSubNumSubAsync(System.String[])">
            <summary>
            Return the number of subscribers (not counting clients subscribed to patterns) for the specified channels
            </summary>
            <param name="channels">Channels to query</param>
            <returns>Channel names and counts</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PubSubNumPatAsync">
            <summary>
            Return the number of subscriptions to patterns
            </summary>
            <returns>The number of patterns all the clients are subscribed to</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.EvalAsync(System.String,System.String[],System.Object[])">
            <summary>
            Execute a Lua script server side
            </summary>
            <param name="script">Script to run on server</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.EvalSHAAsync(System.String,System.String[],System.Object[])">
            <summary>
            Execute a Lua script server side, sending only the script's cached SHA hash
            </summary>
            <param name="sha1">SHA1 hash of script</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ScriptExistsAsync(System.String[])">
            <summary>
            Check existence of script SHA hashes in the script cache
            </summary>
            <param name="sha1s">SHA1 script hashes</param>
            <returns>Array of boolean values indicating script existence on server</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ScriptFlushAsync">
            <summary>
            Remove all scripts from the script cache
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ScriptKillAsync">
            <summary>
            Kill the script currently in execution
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ScriptLoadAsync(System.String)">
            <summary>
            Load the specified Lua script into the script cache
            </summary>
            <param name="script">Lua script to load</param>
            <returns>SHA1 hash of script</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.AppendAsync(System.String,System.Object)">
            <summary>
            Append a value to a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to append to key</param>
            <returns>Length of string after append</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.BitCountAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Count set bits in a string
            </summary>
            <param name="key">Key to check</param>
            <param name="start">Start offset</param>
            <param name="end">Stop offset</param>
            <returns>Number of bits set to 1</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.BitOpAsync(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            Perform bitwise operations between strings
            </summary>
            <param name="operation">Bit command to execute</param>
            <param name="destKey">Store result in destination key</param>
            <param name="keys">Keys to operate</param>
            <returns>Size of string stored in the destination key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.BitPosAsync(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Find first bit set or clear in a string
            </summary>
            <param name="key">Key to examine</param>
            <param name="bit">Bit value (1 or 0)</param>
            <param name="start">Examine string at specified byte offset</param>
            <param name="end">Examine string to specified byte offset</param>
            <returns>Position of the first bit set to the specified value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.DecrAsync(System.String)">
            <summary>
            Decrement the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.DecrByAsync(System.String,System.Int64)">
            <summary>
            Decrement the integer value of a key by the given number
            </summary>
            <param name="key">Key to modify</param>
            <param name="decrement">Decrement value</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.GetAsync(System.String)">
            <summary>
            Get the value of a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Value of key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.GetBitAsync(System.String,System.UInt32)">
            <summary>
            Returns the bit value at offset in the string value stored at key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="offset">Offset of key to check</param>
            <returns>Bit value stored at offset</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.GetRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Get a substring of the string stored at a key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="start">Start offset</param>
            <param name="end">End offset</param>
            <returns>Substring in the specified range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.GetSetAsync(System.String,System.Object)">
            <summary>
            Set the string value of a key and return its old value
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Old value stored at key, or null if key did not exist</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.IncrAsync(System.String)">
            <summary>
            Increment the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.IncrByAsync(System.String,System.Int64)">
            <summary>
            Increment the integer value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.IncrByFloatAsync(System.String,System.Decimal)">
            <summary>
            Increment the float value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MGetAsync(System.String[])">
            <summary>
            Get the values of all the given keys
            </summary>
            <param name="keys">Keys to lookup</param>
            <returns>Array of values at the specified keys</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MSetAsync(System.Tuple{System.String,System.Object}[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MSetAsync(System.Object[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MSetNxAsync(System.Tuple{System.String,System.Object}[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MSetNxAsync(System.Object[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PSetExAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration in milliseconds of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SetAsync(System.String,System.Object)">
            <summary>
            Set the string value of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SetAsync(System.String,System.Object,System.TimeSpan,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expiration">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SetAsync(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationSeconds">Set expiration to nearest second</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SetAsync(System.String,System.Object,System.Nullable{System.Int64},System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationMilliseconds">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SetBitAsync(System.String,System.UInt32,System.Boolean)">
            <summary>
            Sets or clears the bit at offset in the string value stored at key
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Modify key at offset</param>
            <param name="value">Value to set (on or off)</param>
            <returns>Original bit stored at offset</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SetExAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SetNxAsync(System.String,System.Object)">
            <summary>
            Set the value of a key, only if the key does not exist
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>True if key was set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SetRangeAsync(System.String,System.UInt32,System.Object)">
            <summary>
            Overwrite part of a string at key starting at the specified offset
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Start offset</param>
            <param name="value">Value to write at offset</param>
            <returns>Length of string after operation</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.StrLenAsync(System.String)">
            <summary>
            Get the length of the value stored in a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Length of string at key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.BgRewriteAofAsync">
            <summary>
            Asyncronously rewrite the append-only file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.BgSaveAsync">
            <summary>
            Asynchronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ClientGetNameAsync">
            <summary>
            Get the current connection name
            </summary>
            <returns>Connection name</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ClientKillAsync(System.String,System.Int32)">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="ip">Client IP returned from CLIENT LIST</param>
            <param name="port">Client port returned from CLIENT LIST</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ClientKillAsync(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="addr">Client address</param>
            <param name="id">Client ID</param>
            <param name="type">Client type</param>
            <param name="skipMe">Set to true to skip calling client</param>
            <returns>The number of clients killed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ClientListAsync">
            <summary>
            Get the list of client connections
            </summary>
            <returns>Formatted string of clients</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ClientPauseAsync(System.Int32)">
            <summary>
            Suspend all the Redis clients for the specified amount of time 
            </summary>
            <param name="milliseconds">Time in milliseconds to suspend</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ClientPauseAsync(System.TimeSpan)">
            <summary>
            Suspend all the Redis clients for the specified amount of time 
            </summary>
            <param name="timeout">Time to suspend</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ClientSetNameAsync(System.String)">
            <summary>
            Set the current connection name
            </summary>
            <param name="connectionName">Name of connection (no spaces)</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ConfigGetAsync(System.String)">
            <summary>
            Get the value of a configuration paramter
            </summary>
            <param name="parameter">Configuration parameter to lookup</param>
            <returns>Configuration value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ConfigResetStatAsync">
            <summary>
            Reset the stats returned by INFO
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ConfigRewriteAsync">
            <summary>
            Rewrites the redis.conf file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ConfigSetAsync(System.String,System.String)">
            <summary>
            Set a configuration parameter to the given value
            </summary>
            <param name="parameter">Parameter to set</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.DbSizeAsync">
            <summary>
            Return the number of keys in the selected database
            </summary>
            <returns>Number of keys</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.DebugSegFaultAsync">
            <summary>
            Make the server crash :(
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.FlushAllAsync">
            <summary>
            Remove all keys from all databases
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.FlushDbAsync">
            <summary>
            Remove all keys from the current database
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.InfoAsync(System.String)">
            <summary>
            Get information and statistics about the server
            </summary>
            <param name="section">all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.LastSaveAsync">
            <summary>
            Get the timestamp of the last successful save to disk
            </summary>
            <returns>Date of last save</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.RoleAsync">
            <summary>
            Provide information on the role of a Redis instance in the context of replication
            </summary>
            <returns>Role information</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SaveAsync">
            <summary>
            Syncronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ShutdownAsync(System.Nullable{System.Boolean})">
            <summary>
            Syncronously save the dataset to disk an then shut down the server
            </summary>
            <param name="save">Force a DB saving operation even if no save points are configured</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SlaveOfAsync(System.String,System.Int32)">
            <summary>
            Make the server a slave of another instance or promote it as master
            </summary>
            <param name="host">Master host</param>
            <param name="port">master port</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SlaveOfNoOneAsync">
            <summary>
            Turn off replication, turning the Redis server into a master
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SlowLogGetAsync(System.Nullable{System.Int64})">
            <summary>
            Get latest entries from the slow log
            </summary>
            <param name="count">Limit entries returned</param>
            <returns>Slow log entries</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SlowLogLenAsync">
            <summary>
            Get the length of the slow log
            </summary>
            <returns>Slow log length</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SlowLogResetAsync">
            <summary>
            Reset the slow log
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.SyncAsync">
            <summary>
            Internal command used for replication
            </summary>
            <returns>Byte array of Redis sync data</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.TimeAsync">
            <summary>
            Return the current server time
            </summary>
            <returns>Server time</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.MultiAsync">
            <summary>
            Mark the start of a transaction block
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.DiscardAsync">
            <summary>
            Discard all commands issued after MULTI
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.ExecAsync">
            <summary>
            Execute all commands issued after MULTI
            </summary>
            <returns>Array of output from all transaction commands</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.UnwatchAsync">
            <summary>
            Forget about all watched keys
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.WatchAsync(System.String[])">
            <summary>
            Watch the given keys to determine execution of the MULTI/EXEC block
            </summary>
            <param name="keys">Keys to watch</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PfAddAsync(System.String,System.Object[])">
            <summary>
            Adds the specified elements to the specified HyperLogLog.
            </summary>
            <param name="key">Key to update</param>
            <param name="elements">Elements to add</param>
            <returns>1 if at least 1 HyperLogLog internal register was altered. 0 otherwise.</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PfCountAsync(System.String[])">
            <summary>
            Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s);
            </summary>
            <param name="keys">One or more HyperLogLog keys to examine</param>
            <returns>Approximated number of unique elements observed via PFADD</returns>
        </member>
        <member name="M:CSRedis.IRedisClientAsync.PfMergeAsync(System.String,System.String[])">
            <summary>
            Merge N different HyperLogLogs into a single key.
            </summary>
            <param name="destKey">Where to store the merged HyperLogLogs</param>
            <param name="sourceKeys">The HyperLogLogs keys that will be combined</param>
            <returns>Status code</returns>
        </member>
        <member name="T:CSRedis.IRedisClientSync">
            <summary>
            Interface for syncronous RedisClient methods
            </summary>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Connect(System.Int32)">
            <summary>
            Connect to the remote host
            </summary>
            <param name="timeout">Connection timeout in milliseconds</param>
            <returns>True if connected</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Call(System.String,System.String[])">
            <summary>
            Call arbitrary Redis command
            </summary>
            <param name="command">Command name</param>
            <param name="args">Command arguments</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Auth(System.String)">
            <summary>
            Authenticate to the server
            </summary>
            <param name="password">Redis server password</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Echo(System.String)">
            <summary>
            Echo the given string
            </summary>
            <param name="message">Message to echo</param>
            <returns>Message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Ping">
            <summary>
            Ping the server
            </summary>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Quit">
            <summary>
            Close the connection
            </summary>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Select(System.Int32)">
            <summary>
            Change the selected database for the current connection
            </summary>
            <param name="index">Zero-based database index</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Del(System.String[])">
            <summary>
            Delete a key
            </summary>
            <param name="keys">Keys to delete</param>
            <returns>Number of keys removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Dump(System.String)">
            <summary>
            Return a serialized version of the value stored at the specified key
            </summary>
            <param name="key">Key to dump</param>
            <returns>Serialized value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Exists(System.String)">
            <summary>
            Determine if a key exists
            </summary>
            <param name="key">Key to check</param>
            <returns>True if key exists</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Expire(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest second);</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Expire(System.String,System.Int32)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ExpireAt(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest second);
            </summary>
            <param name="key">Key to modify</param>
            <param name="expirationDate">Date of expiration, to nearest second</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ExpireAt(System.String,System.Int32)">
            <summary>
            Set the expiration for a key as a UNIX timestamp
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">UNIX timestamp</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Keys(System.String)">
            <summary>
            Find all keys matching the given pattern
            </summary>
            <param name="pattern">Pattern to match</param>
            <returns>Array of keys matching pattern</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Migrate(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeoutMilliseconds">Timeout in milliseconds</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Migrate(System.String,System.Int32,System.String,System.Int32,System.TimeSpan)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Move(System.String,System.Int32)">
            <summary>
            Move a key to another database
            </summary>
            <param name="key">Key to move</param>
            <param name="database">Database destination ID</param>
            <returns>True if key was moved</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ObjectEncoding(System.String[])">
            <summary>
            Get the number of references of the value associated with the specified key
            </summary>
            <param name="arguments">Subcommand arguments</param>
            <returns>The type of internal representation used to store the value at the specified key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Object(CSRedis.RedisObjectSubCommand,System.String[])">
            <summary>
            Inspect the internals of Redis objects
            </summary>
            <param name="subCommand">Type of Object command to send</param>
            <param name="arguments">Subcommand arguments</param>
            <returns>Varies depending on subCommand</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Persist(System.String)">
            <summary>
            Remove the expiration from a key
            </summary>
            <param name="key">Key to modify</param>
            <returns>True if timeout was removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.PExpire(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest millisecond);</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.PExpire(System.String,System.Int64)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.PExpireAt(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest millisecond);
            </summary>
            <param name="key">Key to modify</param>
            <param name="date">Expiration date</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.PExpireAt(System.String,System.Int64)">
            <summary>
            Set the expiration for a key as a UNIX timestamp specified in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">Expiration timestamp (milliseconds);</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.PTtl(System.String)">
            <summary>
            Get the time to live for a key in milliseconds
            </summary>
            <param name="key">Key to check</param>
            <returns>Time-to-live in milliseconds</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.RandomKey">
            <summary>
            Return a random key from the keyspace
            </summary>
            <returns>A random key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Rename(System.String,System.String)">
            <summary>
            Rename a key
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.RenameNx(System.String,System.String)">
            <summary>
            Rename a key, only if the new key does not exist
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns>True if key was renamed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Restore(System.String,System.Int64,System.Byte[])">
            <summary>
            Create a key using the provided serialized value, previously obtained using dump
            </summary>
            <param name="key">Key to restore</param>
            <param name="ttlMilliseconds">Time-to-live in milliseconds</param>
            <param name="serializedValue">Serialized value from DUMP</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Sort(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set
            </summary>
            <param name="key">Key to sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns>The sorted list</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SortAndStore(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set, then store the result in a new list
            </summary>
            <param name="key">Key to sort</param>
            <param name="destination">Destination key name of stored sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns>Number of elements stored</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Ttl(System.String)">
            <summary>
            Get the time to live for a key
            </summary>
            <param name="key">Key to check</param>
            <returns>Time-to-live in seconds</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Type(System.String)">
            <summary>
            Determine the type stored at key
            </summary>
            <param name="key">Key to check</param>
            <returns>Type of key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Scan(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the set of keys in the currently selected Redis database
            </summary>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Set the maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HDel(System.String,System.String[])">
            <summary>
            Delete one or more hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to delete</param>
            <returns>Number of fields removed from hash</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HExists(System.String,System.String)">
            <summary>
            Determine if a hash field exists
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to check</param>
            <returns>True if hash field exists</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HGet(System.String,System.String)">
            <summary>
            Get the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to get</param>
            <returns>Value of hash field</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HGetAll``1(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <typeparam name="T">Object to map hash</typeparam>
            <param name="key">Hash key</param>
            <returns>Strongly typed object mapped from hash</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HGetAll(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Dictionary mapped from string</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            Increment the integer value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HIncrByFloat(System.String,System.String,System.Decimal)">
            <summary>
            Increment the float value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HKeys(System.String)">
            <summary>
            Get all the fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>All hash field names</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HLen(System.String)">
            <summary>
            Get the number of fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Number of fields in hash</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HMGet(System.String,System.String[])">
            <summary>
            Get the values of all the given hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to return</param>
            <returns>Values of given fields</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HMSet(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="dict">Dictionary mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HMSet``1(System.String,``0)">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <typeparam name="T">Type of object to map hash</typeparam>
            <param name="key">Hash key</param>
            <param name="obj">Object mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HMSet(System.String,System.Object[])">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="keyValues">Array of [key,value,key,value,..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HSet(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field is new</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HSetNx(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field, only if the field does not exist
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field was set to value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HVals(System.String)">
            <summary>
            Get all the values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Array of all values in hash</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.HScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the keys and values of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.BLPopWithKey(System.Int32,System.String[])">
            <summary>
            Remove and get the first element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.BLPopWithKey(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the first element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.BLPop(System.Int32,System.String[])">
            <summary>
            Remove and get the first element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.BLPop(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the first element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.BRPopWithKey(System.Int32,System.String[])">
            <summary>
            Remove and get the last element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.BRPopWithKey(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the last element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.BRPop(System.Int32,System.String[])">
            <summary>
            Remove and get the last element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List value</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.BRPop(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the last element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.BRPopLPush(System.String,System.String,System.Int32)">
            <summary>
            Pop a value from a list, push it to another list and return it; or block until one is available
            </summary>
            <param name="source">Source list key</param>
            <param name="destination">Destination key</param>
            <param name="timeout">Timeout in seconds</param>
            <returns>Element popped</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.BRPopLPush(System.String,System.String,System.TimeSpan)">
            <summary>
            Pop a value from a list, push it to another list and return it; or block until one is available
            </summary>
            <param name="source">Source list key</param>
            <param name="destination">Destination key</param>
            <param name="timeout">Timeout in seconds</param>
            <returns>Element popped</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.LIndex(System.String,System.Int64)">
            <summary>
            Get an element from a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">Zero-based index of item to return</param>
            <returns>Element at index</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.LInsert(System.String,CSRedis.RedisInsert,System.Object,System.Object)">
            <summary>
            Insert an element before or after another element in a list
            </summary>
            <param name="key">List key</param>
            <param name="insertType">Relative position</param>
            <param name="pivot">Relative element</param>
            <param name="value">Element to insert</param>
            <returns>Length of list after insert or -1 if pivot not found</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.LLen(System.String)">
            <summary>
            Get the length of a list
            </summary>
            <param name="key">List key</param>
            <returns>Length of list at key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.LPop(System.String)">
            <summary>
            Remove and get the first element in a list
            </summary>
            <param name="key">List key</param>
            <returns>First element in list</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.LPush(System.String,System.Object[])">
            <summary>
            Prepend one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.LPushX(System.String,System.Object)">
            <summary>
            Prepend a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            Get a range of elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.LRem(System.String,System.Int64,System.Object)">
            <summary>
            Remove elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="count">&gt;0: remove N elements from head to tail; &lt;0: remove N elements from tail to head; =0: remove all elements</param>
            <param name="value">Remove elements equal to value</param>
            <returns>Number of removed elements</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.LSet(System.String,System.Int64,System.Object)">
            <summary>
            Set the value of an element in a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">List index to modify</param>
            <param name="value">New element value</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            Trim a list to the specified range
            </summary>
            <param name="key">List key</param>
            <param name="start">Zero-based start index</param>
            <param name="stop">Zero-based stop index</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.RPop(System.String)">
            <summary>
            Remove and get the last elment in a list
            </summary>
            <param name="key">List key</param>
            <returns>Value of last list element</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.RPopLPush(System.String,System.String)">
            <summary>
            Remove the last elment in a list, append it to another list and return it
            </summary>
            <param name="source">List source key</param>
            <param name="destination">Destination key</param>
            <returns>Element being popped and pushed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.RPush(System.String,System.Object[])">
            <summary>
            Append one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.RPushX(System.String,System.Object)">
            <summary>
            Append a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SAdd(System.String,System.Object[])">
            <summary>
            Add one or more members to a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Members to add to set</param>
            <returns>Number of elements added to set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SCard(System.String)">
            <summary>
            Get the number of members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>Number of elements in set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SDiff(System.String[])">
            <summary>
            Subtract multiple sets
            </summary>
            <param name="keys">Set keys to subtract</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SDiffStore(System.String,System.String[])">
            <summary>
            Subtract multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to subtract</param>
            <returns>Number of elements in the resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SInter(System.String[])">
            <summary>
            Intersect multiple sets
            </summary>
            <param name="keys">Set keys to intersect</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SInterStore(System.String,System.String[])">
            <summary>
            Intersect multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to intersect</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SIsMember(System.String,System.Object)">
            <summary>
            Determine if a given value is a member of a set
            </summary>
            <param name="key">Set key</param>
            <param name="member">Member to lookup</param>
            <returns>True if member exists in set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SMembers(System.String)">
            <summary>
            Get all the members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>All elements in the set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SMove(System.String,System.String,System.Object)">
            <summary>
            Move a member from one set to another
            </summary>
            <param name="source">Source key</param>
            <param name="destination">Destination key</param>
            <param name="member">Member to move</param>
            <returns>True if element was moved</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SPop(System.String)">
            <summary>
            Remove and
            </summary>
            <param name="key">Set key</param>
            <returns>The removed element</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SPop(System.String,System.Int64)">
            <summary>
            Remove and return one or more random member from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to remove and return</param>
            <returns>The removed elements</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SRandMember(System.String)">
            <summary>
            Get a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>One random element from set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SRandMembers(System.String,System.Int64)">
            <summary>
            Get one or more random members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to return</param>
            <returns>One or more random elements from set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SRem(System.String,System.Object[])">
            <summary>
            Remove one or more members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Set members to remove</param>
            <returns>Number of elements removed from set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SUnion(System.String[])">
            <summary>
            Add multiple sets
            </summary>
            <param name="keys">Set keys to union</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SUnionStore(System.String,System.String[])">
            <summary>
            Add multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to union</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the elements of a set field
            </summary>
            <param name="key">Set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZAdd``2(System.String,System.Tuple{``0,``1}[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="scoreMembers">Array of member scores to add to sorted set</param>
            <returns>Number of elements added to the sorted set (not including member updates);</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZAdd(System.String,System.Object[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="scoreMembers">Array of member scores [s1, m1, s2, m2, ..]</param>
            <returns>Number of elements added to the sorted set (not including member updates);</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZCard(System.String)">
            <summary>
            Get the number of members in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <returns>Number of elements in the sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZCount(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZCount(System.String,System.String,System.String)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZIncrBy(System.String,System.Decimal,System.Object)">
            <summary>
            Increment the score of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="increment">Increment by value</param>
            <param name="member">Sorted set member to increment</param>
            <returns>New score of member</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZInterStore(System.String,System.Decimal[],System.Nullable{CSRedis.RedisAggregate},System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZInterStore(System.String,System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRange(System.String,System.Int64,System.Int64,System.Boolean)">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="start">Start offset</param>
             <param name="stop">Stop offset</param>
             <param name="withScores">Include scores in result</param>
             <returns>Array of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRangeWithScores(System.String,System.Int64,System.Int64)">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="start">Start offset</param>
             <param name="stop">Stop offset</param>
             <returns>Array of elements in the specified range with scores</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRangeByScore(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="min">Minimum score</param>
             <param name="max">Maximum score</param>
             <param name="withScores">Include scores in result</param>
             <param name="exclusiveMin">Minimum score is exclusive</param>
             <param name="exclusiveMax">Maximum score is exclusive</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRangeByScore(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="min">Minimum score</param>
             <param name="max">Maximum score</param>
             <param name="withScores">Include scores in result</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRangeByScoreWithScores(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="min">Minimum score</param>
             <param name="max">Maximum score</param>
             <param name="exclusiveMin">Minimum score is exclusive</param>
             <param name="exclusiveMax">Maximum score is exclusive</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="min">Minimum score</param>
             <param name="max">Maximum score</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRank(System.String,System.Object)">
            <summary>
            Determine the index of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member or null if key does not exist</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRem(System.String,System.Object[])">
            <summary>
            Remove one or more members from a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="members">Members to remove</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            Remove all members in a sorted set within the given indexes
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRemRangeByScore(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean)">
            <summary>
            Remove all members in a sorted set within the given scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRevRange(System.String,System.Int64,System.Int64,System.Boolean)">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="start">Start offset</param>
             <param name="stop">Stop offset</param>
             <param name="withScores">Include scores in result</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRevRangeWithScores(System.String,System.Int64,System.Int64)">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="start">Start offset</param>
             <param name="stop">Stop offset</param>
             <returns>List of elements in the specified range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRevRangeByScore(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="max">Maximum score</param>
             <param name="min">Minimum score</param>
             <param name="withScores">Include scores in result</param>
             <param name="exclusiveMax">Maximum score is exclusive</param>
             <param name="exclusiveMin">Minimum score is exclusive</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified score range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRevRangeByScore(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="max">Maximum score</param>
             <param name="min">Minimum score</param>
             <param name="withScores">Include scores in result</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified score range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRevRangeByScoreWithScores(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="max">Maximum score</param>
             <param name="min">Minimum score</param>
             <param name="exclusiveMax">Maximum score is exclusive</param>
             <param name="exclusiveMin">Minimum score is exclusive</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified score range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRevRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
             <summary>
            
             </summary>
             <param name="key">Sorted set key</param>
             <param name="max">Maximum score</param>
             <param name="min">Minimum score</param>
             <param name="offset">Start offset</param>
             <param name="count">Number of elements to return</param>
             <returns>List of elements in the specified score range (with optional scores);</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRevRank(System.String,System.Object)">
            <summary>
            Determine the index of a member in a sorted set, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZScore(System.String,System.Object)">
            <summary>
            Get the score associated with the given member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Score of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZUnionStore(System.String,System.Decimal[],System.Nullable{CSRedis.RedisAggregate},System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZUnionStore(System.String,System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the scores and elements of a sorted set field
            </summary>
            <param name="key">Sorted set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRangeByLex(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Retrieve all the elements in a sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="offset">Limit result set by offset</param>
            <param name="count">Limimt result set by size</param>
            <returns>List of elements in the specified range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZRemRangeByLex(System.String,System.String,System.String)">
            <summary>
            Remove all elements in the sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ZLexCount(System.String,System.String,System.String)">
            <summary>
            Returns the number of elements in the sorted set with a value between min and max.
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.PSubscribe(System.String[])">
            <summary>
            Listen for messages published to channels matching the given patterns
            </summary>
            <param name="channelPatterns">Patterns to subscribe</param>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Publish(System.String,System.String)">
            <summary>
            Post a message to a channel
            </summary>
            <param name="channel">Channel to post message</param>
            <param name="message">Message to send</param>
            <returns>Number of clients that received the message</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.PubSubChannels(System.String)">
            <summary>
            List the currently active channels
            </summary>
            <param name="pattern">Return only channels matching this pattern</param>
            <returns>Array of channel names</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.PubSubNumSub(System.String[])">
             <summary>
            
             </summary>
             <param name="channels">Channel names</param>
             <returns>Array of channel/count tuples</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.PubSubNumPat">
             <summary>
            
             </summary>
             <returns>Number of patterns all clients are subscribed to</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.PUnsubscribe(System.String[])">
            <summary>
            Stop listening for messages posted to channels matching the given patterns
            </summary>
            <param name="channelPatterns">Patterns to unsubscribe</param>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Subscribe(System.String[])">
            <summary>
            Listen for messages published to the given channels
            </summary>
            <param name="channels">Channels to subscribe</param>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Unsubscribe(System.String[])">
            <summary>
            Stop listening for messages posted to the given channels
            </summary>
            <param name="channels">Channels to unsubscribe</param>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Eval(System.String,System.String[],System.Object[])">
            <summary>
            Execute a Lua script server side
            </summary>
            <param name="script">Script to run on server</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.EvalSHA(System.String,System.String[],System.Object[])">
            <summary>
            Execute a Lua script server side, sending only the script's cached SHA hash
            </summary>
            <param name="sha1">SHA1 hash of script</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ScriptExists(System.String[])">
            <summary>
            Check existence of script SHA hashes in the script cache
            </summary>
            <param name="sha1s">SHA1 script hashes</param>
            <returns>Array of boolean values indicating script existence on server</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ScriptFlush">
            <summary>
            Remove all scripts from the script cache
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ScriptKill">
            <summary>
            Kill the script currently in execution
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ScriptLoad(System.String)">
            <summary>
            Load the specified Lua script into the script cache
            </summary>
            <param name="script">Lua script to load</param>
            <returns>SHA1 hash of script</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Append(System.String,System.Object)">
            <summary>
            Append a value to a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to append to key</param>
            <returns>Length of string after append</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.BitCount(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Count set bits in a string
            </summary>
            <param name="key">Key to check</param>
            <param name="start">Start offset</param>
            <param name="end">Stop offset</param>
            <returns>Number of bits set to 1</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.BitOp(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            Perform bitwise operations between strings
            </summary>
            <param name="operation">Bit command to execute</param>
            <param name="destKey">Store result in destination key</param>
            <param name="keys">Keys to operate</param>
            <returns>Size of string stored in the destination key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.BitPos(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Find first bit set or clear in a string
            </summary>
            <param name="key">Key to examine</param>
            <param name="bit">Bit value (1 or 0);</param>
            <param name="start">Examine string at specified byte offset</param>
            <param name="end">Examine string to specified byte offset</param>
            <returns>Position of the first bit set to the specified value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Decr(System.String)">
            <summary>
            Decrement the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.DecrBy(System.String,System.Int64)">
            <summary>
            Decrement the integer value of a key by the given number
            </summary>
            <param name="key">Key to modify</param>
            <param name="decrement">Decrement value</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Get(System.String)">
            <summary>
            Get the value of a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Value of key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.GetBit(System.String,System.UInt32)">
            <summary>
            Returns the bit value at offset in the string value stored at key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="offset">Offset of key to check</param>
            <returns>Bit value stored at offset</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            Get a substring of the string stored at a key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="start">Start offset</param>
            <param name="end">End offset</param>
            <returns>Substring in the specified range</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.GetSet(System.String,System.Object)">
            <summary>
            Set the string value of a key and
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Old value stored at key, or null if key did not exist</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Incr(System.String)">
            <summary>
            Increment the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.IncrBy(System.String,System.Int64)">
            <summary>
            Increment the integer value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.IncrByFloat(System.String,System.Decimal)">
            <summary>
            Increment the float value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.MGet(System.String[])">
            <summary>
            Get the values of all the given keys
            </summary>
            <param name="keys">Keys to lookup</param>
            <returns>Array of values at the specified keys</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.MSet(System.Tuple{System.String,System.Object}[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.MSet(System.Object[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.MSetNx(System.Tuple{System.String,System.Object}[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.MSetNx(System.Object[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.PSetEx(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration in milliseconds of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Set(System.String,System.Object)">
            <summary>
            Set the string value of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Set(System.String,System.Object,System.TimeSpan,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expiration">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Set(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationSeconds">Set expiration to nearest second</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Set(System.String,System.Object,System.Nullable{System.Int64},System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationMilliseconds">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            Sets or clears the bit at offset in the string value stored at key
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Modify key at offset</param>
            <param name="value">Value to set (on or off);</param>
            <returns>Original bit stored at offset</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SetEx(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SetNx(System.String,System.Object)">
            <summary>
            Set the value of a key, only if the key does not exist
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>True if key was set</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SetRange(System.String,System.UInt32,System.Object)">
            <summary>
            Overwrite part of a string at key starting at the specified offset
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Start offset</param>
            <param name="value">Value to write at offset</param>
            <returns>Length of string after operation</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.StrLen(System.String)">
            <summary>
            Get the length of the value stored in a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Length of string at key</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.BgRewriteAof">
            <summary>
            Asyncronously rewrite the append-only file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.BgSave">
            <summary>
            Asynchronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ClientKill(System.String,System.Int32)">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="ip">Client IP returned from CLIENT LIST</param>
            <param name="port">Client port returned from CLIENT LIST</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ClientKill(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="addr">client's ip:port</param>
            <param name="id">client's unique ID</param>
            <param name="type">client type (normal|slave|pubsub);</param>
            <param name="skipMe">do not kill the calling client</param>
            <returns>Nummber of clients killed</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ClientList">
            <summary>
            Get the list of client connections
            </summary>
            <returns>Formatted string of clients</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ClientPause(System.Int32)">
            <summary>
            Suspend all Redis clients for the specified amount of time
            </summary>
            <param name="milliseconds">Time to pause in milliseconds</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ClientPause(System.TimeSpan)">
            <summary>
            Suspend all Redis clients for the specified amount of time
            </summary>
            <param name="timeout">Time to pause</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ClientGetName">
            <summary>
            Get the current connection name
            </summary>
            <returns>Connection name</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ClientSetName(System.String)">
            <summary>
            Set the current connection name
            </summary>
            <param name="connectionName">Name of connection (no spaces);</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ConfigGet(System.String)">
            <summary>
            Get the value of a configuration paramter
            </summary>
            <param name="parameter">Configuration parameter to lookup</param>
            <returns>Configuration value</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ConfigResetStat">
            <summary>
            Reset the stats returned by INFO
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ConfigRewrite">
            <summary>
            Rewrite the redis.conf file the server was started with, applying the minimal changes needed to make it reflect current configuration
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.ConfigSet(System.String,System.String)">
            <summary>
            Set a configuration parameter to the given value
            </summary>
            <param name="parameter">Parameter to set</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.DbSize">
             <summary>
            
             </summary>
             <returns>Number of keys</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.DebugSegFault">
            <summary>
            Make the server crash :(
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.FlushAll">
            <summary>
            Remove all keys from all databases
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.FlushDb">
            <summary>
            Remove all keys from the current database
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Info(System.String)">
            <summary>
            Get information and statistics about the server
            </summary>
            <param name="section">all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.LastSave">
            <summary>
            Get the timestamp of the last successful save to disk
            </summary>
            <returns>Date of last save</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Monitor">
            <summary>
            Listen for all requests received by the server in real time
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Role">
            <summary>
            Get role information for the current Redis instance
            </summary>
            <returns>RedisMasterRole|RedisSlaveRole|RedisSentinelRole</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Save">
            <summary>
            Syncronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Shutdown(System.Nullable{System.Boolean})">
            <summary>
            Syncronously save the dataset to disk an then shut down the server
            </summary>
            <param name="save">Force a DB saving operation even if no save points are configured</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SlaveOf(System.String,System.Int32)">
            <summary>
            Make the server a slave of another instance or promote it as master
            </summary>
            <param name="host">Master host</param>
            <param name="port">master port</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SlaveOfNoOne">
            <summary>
            Turn off replication, turning the Redis server into a master
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SlowLogGet(System.Nullable{System.Int64})">
            <summary>
            Get latest entries from the slow log
            </summary>
            <param name="count">Limit entries returned</param>
            <returns>Slow log entries</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SlowLogLen">
            <summary>
            Get the length of the slow log
            </summary>
            <returns>Slow log length</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.SlowLogReset">
            <summary>
            Reset the slow log
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Sync">
            <summary>
            Internal command used for replication
            </summary>
            <returns>Byte array of Redis sync data</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Time">
             <summary>
            
             </summary>
             <returns>Server time</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Discard">
            <summary>
            Discard all commands issued after MULTI
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Exec">
            <summary>
            Execute all commands issued after MULTI
            </summary>
            <returns>Array of output from all transaction commands</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Multi">
            <summary>
            Mark the start of a transaction block
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Unwatch">
            <summary>
            Forget about all watched keys
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.Watch(System.String[])">
            <summary>
            Watch the given keys to determine execution of the MULTI/EXEC block
            </summary>
            <param name="keys">Keys to watch</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.PfAdd(System.String,System.Object[])">
            <summary>
            Adds the specified elements to the specified HyperLogLog.
            </summary>
            <param name="key">Key to update</param>
            <param name="elements">Elements to add</param>
            <returns>1 if at least 1 HyperLogLog internal register was altered. 0 otherwise.</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.PfCount(System.String[])">
             <summary>
            
             </summary>
             <param name="keys">One or more HyperLogLog keys to examine</param>
             <returns>Approximated number of unique elements observed via PFADD</returns>
        </member>
        <member name="M:CSRedis.IRedisClientSync.PfMerge(System.String,System.String[])">
            <summary>
            Merge N different HyperLogLogs into a single key.
            </summary>
            <param name="destKey">Where to store the merged HyperLogLogs</param>
            <param name="sourceKeys">The HyperLogLogs keys that will be combined</param>
            <returns>Status code</returns>
        </member>
        <member name="T:CSRedis.RedisClient">
            <summary>
            Represents a client connection to a Redis server instance
            </summary>
        </member>
        <member name="M:CSRedis.RedisClient.ConnectAsync">
            <summary>
            Open connection to redis server
            </summary>
            <returns>True on success</returns>
        </member>
        <member name="M:CSRedis.RedisClient.CallAsync(System.String,System.String[])">
            <summary>
            Call arbitrary redis command
            </summary>
            <param name="command"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.AuthAsync(System.String)">
            <summary>
            Authenticate to the server
            </summary>
            <param name="password">Server password</param>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.EchoAsync(System.String)">
            <summary>
            Echo the given string
            </summary>
            <param name="message">Message to echo</param>
            <returns>Task associated with echo response</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PingAsync">
            <summary>
            Ping the server
            </summary>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.QuitAsync">
            <summary>
            Close the connection
            </summary>
            <returns>Task associated with status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SelectAsync(System.Int32)">
            <summary>
            Change the selected database for the current connection
            </summary>
            <param name="index">Zero-based database index</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.TouchAsync(System.String[])">
            <summary>
            [redis-server 3.2.1] 修改指定key(s) 最后访问时间 若key不存在，不做操作
            </summary>
            <param name="keys">Keys</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.UnLinkAsync(System.String[])">
            <summary>
            [redis-server 4.0.0] Delete a key, 该命令和DEL十分相似：删除指定的key(s),若key不存在则该key被跳过。但是，相比DEL会产生阻塞，该命令会在另一个线程中回收内存，因此它是非阻塞的。 这也是该命令名字的由来：仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。
            </summary>
            <param name="keys">Keys to delete</param>
            <returns>Number of keys removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DelAsync(System.String[])">
            <summary>
            Delete a key
            </summary>
            <param name="keys">Keys to delete</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.DumpAsync(System.String)">
            <summary>
            Return a serialized version of the value stored at the specified key
            </summary>
            <param name="key">Key to dump</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExistsAsync(System.String)">
            <summary>
            Determine if a key exists
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAsync(System.String,System.Int32)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest second)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAsync(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration in seconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAtAsync(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest second)
            </summary>
            <param name="key">Key to modify</param>
            <param name="expirationDate">Date of expiration, to nearest second</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAtAsync(System.String,System.Int32)">
            <summary>
            Set the expiration for a key as a UNIX timestamp
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp"></param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.KeysAsync(System.String)">
            <summary>
            Find all keys matching the given pattern
            </summary>
            <param name="pattern">Pattern to match</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.MigrateAsync(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.MigrateAsync(System.String,System.Int32,System.String,System.Int32,System.TimeSpan)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.MoveAsync(System.String,System.Int32)">
            <summary>
            Move a key to another database
            </summary>
            <param name="key">Key to move</param>
            <param name="database">Database destination ID</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ObjectEncodingAsync(System.String[])">
            <summary>
            Get the number of references of the value associated with the specified key
            </summary>
            <param name="arguments">Subcommand arguments</param>
            <returns>The type of internal representation used to store the value at the specified key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ObjectAsync(CSRedis.RedisObjectSubCommand,System.String[])">
            <summary>
            Inspect the internals of Redis objects
            </summary>
            <param name="subCommand">Type of Object command to send</param>
            <param name="arguments">Subcommand arguments</param>
            <returns>Varies depending on subCommand</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PersistAsync(System.String)">
            <summary>
            Remove the expiration from a key
            </summary>
            <param name="key">Key to modify</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAsync(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest millisecond)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAsync(System.String,System.Int64)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAtAsync(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest millisecond)
            </summary>
            <param name="key">Key to modify</param>
            <param name="date">Expiration date</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAtAsync(System.String,System.Int64)">
            <summary>
            Set the expiration for a key as a UNIX timestamp specified in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">Expiration timestamp (milliseconds)</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.PTtlAsync(System.String)">
            <summary>
            Get the time to live for a key in milliseconds
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.RandomKeyAsync">
            <summary>
            Return a random key from the keyspace
            </summary>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.RenameAsync(System.String,System.String)">
            <summary>
            Rename a key
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.RenameNxAsync(System.String,System.String)">
            <summary>
            Rename a key, only if the new key does not exist
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.RestoreAsync(System.String,System.Int64,System.Byte[])">
            <summary>
            Create a key using the provided serialized value, previously obtained using dump
            </summary>
            <param name="key">Key to restore</param>
            <param name="ttlMilliseconds">Time-to-live in milliseconds</param>
            <param name="serializedValue">Serialized value from DUMP</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.SortAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set
            </summary>
            <param name="key">Key to sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.SortAndStoreAsync(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set, then store the result in a new list
            </summary>
            <param name="key">Key to sort</param>
            <param name="destination">Destination key name of stored sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.TtlAsync(System.String)">
            <summary>
            Get the time to live for a key
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.TypeAsync(System.String)">
            <summary>
            Determine the type stored at key
            </summary>
            <param name="key">Key to check</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScanAsync(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the set of keys in the currently selected Redis database
            </summary>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Set the maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HStrLenAsync(System.String,System.String)">
            <summary>
            [redis-server 3.2.0] 返回hash指定field的value的字符串长度，如果hash或者field不存在，返回0.
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.HDelAsync(System.String,System.String[])">
            <summary>
            Delete one or more hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to delete</param>
            <returns>Number of fields removed from hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HExistsAsync(System.String,System.String)">
            <summary>
            Determine if a hash field exists
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to check</param>
            <returns>True if hash field exists</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGetAsync(System.String,System.String)">
            <summary>
            Get the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to get</param>
            <returns>Value of hash field</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGetAllAsync``1(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <typeparam name="T">Object to map hash</typeparam>
            <param name="key">Hash key</param>
            <returns>Strongly typed object mapped from hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGetAllAsync(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Dictionary mapped from string</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HIncrByAsync(System.String,System.String,System.Int64)">
            <summary>
            Increment the integer value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HIncrByFloatAsync(System.String,System.String,System.Decimal)">
            <summary>
            Increment the float value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HKeysAsync(System.String)">
            <summary>
            Get all the fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>All hash field names</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HLenAsync(System.String)">
            <summary>
            Get the number of fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Number of fields in hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMGetAsync(System.String,System.String[])">
            <summary>
            Get the values of all the given hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to return</param>
            <returns>Values of given fields</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSetAsync(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="dict">Dictionary mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSetAsync``1(System.String,``0)">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <typeparam name="T">Type of object to map hash</typeparam>
            <param name="key">Hash key</param>
            <param name="obj">Object mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSetAsync(System.String,System.Object[])">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="keyValues">Array of [key,value,key,value,..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HSetAsync(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field is new</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HSetNxAsync(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field, only if the field does not exist
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field was set to value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HValsAsync(System.String)">
            <summary>
            Get all the values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Array of all values in hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the keys and values of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LIndexAsync(System.String,System.Int64)">
            <summary>
            Get an element from a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">Zero-based index of item to return</param>
            <returns>Element at index</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LInsertAsync(System.String,CSRedis.RedisInsert,System.Object,System.Object)">
            <summary>
            Insert an element before or after another element in a list
            </summary>
            <param name="key">List key</param>
            <param name="insertType">Relative position</param>
            <param name="pivot">Relative element</param>
            <param name="value">Element to insert</param>
            <returns>Length of list after insert or -1 if pivot not found</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LLenAsync(System.String)">
            <summary>
            Get the length of a list
            </summary>
            <param name="key">List key</param>
            <returns>Length of list at key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPopAsync(System.String)">
            <summary>
            Remove and get the first element in a list
            </summary>
            <param name="key">List key</param>
            <returns>First element in list</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPushAsync(System.String,System.Object[])">
            <summary>
            Prepend one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPushXAsync(System.String,System.Object)">
            <summary>
            Prepend a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Get a range of elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LRemAsync(System.String,System.Int64,System.Object)">
            <summary>
            Remove elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="count">&gt;0: remove N elements from head to tail; &lt;0: remove N elements from tail to head; =0: remove all elements</param>
            <param name="value">Remove elements equal to value</param>
            <returns>Number of removed elements</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LSetAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value of an element in a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">List index to modify</param>
            <param name="value">New element value</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LTrimAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Trim a list to the specified range
            </summary>
            <param name="key">List key</param>
            <param name="start">Zero-based start index</param>
            <param name="stop">Zero-based stop index</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPopAsync(System.String)">
            <summary>
            Remove and get the last elment in a list
            </summary>
            <param name="key">List key</param>
            <returns>Value of last list element</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPopLPushAsync(System.String,System.String)">
            <summary>
            Remove the last elment in a list, append it to another list and return it
            </summary>
            <param name="source">List source key</param>
            <param name="destination">Destination key</param>
            <returns>Element being popped and pushed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPushAsync(System.String,System.Object[])">
            <summary>
            Append one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPushXAsync(System.String,System.Object)">
            <summary>
            Append a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SAddAsync(System.String,System.Object[])">
            <summary>
            Add one or more members to a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Members to add to set</param>
            <returns>Number of elements added to set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SCardAsync(System.String)">
            <summary>
            Get the number of members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>Number of elements in set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SDiffAsync(System.String[])">
            <summary>
            Subtract multiple sets
            </summary>
            <param name="keys">Set keys to subtract</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SDiffStoreAsync(System.String,System.String[])">
            <summary>
            Subtract multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to subtract</param>
            <returns>Number of elements in the resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SInterAsync(System.String[])">
            <summary>
            Intersect multiple sets
            </summary>
            <param name="keys">Set keys to intersect</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SInterStoreAsync(System.String,System.String[])">
            <summary>
            Intersect multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to intersect</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SIsMemberAsync(System.String,System.Object)">
            <summary>
            Determine if a given value is a member of a set
            </summary>
            <param name="key">Set key</param>
            <param name="member">Member to lookup</param>
            <returns>True if member exists in set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SMembersAsync(System.String)">
            <summary>
            Get all the members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>All elements in the set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SMoveAsync(System.String,System.String,System.Object)">
            <summary>
            Move a member from one set to another
            </summary>
            <param name="source">Source key</param>
            <param name="destination">Destination key</param>
            <param name="member">Member to move</param>
            <returns>True if element was moved</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SPopAsync(System.String)">
            <summary>
            Remove and return a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>The removed element</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SPopAsync(System.String,System.Int64)">
            <summary>
            Remove and return one or more random members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to remove and return</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRandMemberAsync(System.String)">
            <summary>
            Get a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>One random element from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRandMembersAsync(System.String,System.Int64)">
            <summary>
            Get one or more random members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to return</param>
            <returns>One or more random elements from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRemAsync(System.String,System.Object[])">
            <summary>
            Remove one or more members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Set members to remove</param>
            <returns>Number of elements removed from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SUnionAsync(System.String[])">
            <summary>
            Add multiple sets
            </summary>
            <param name="keys">Set keys to union</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SUnionStoreAsync(System.String,System.String[])">
            <summary>
            Add multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to union</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the elements of a set field
            </summary>
            <param name="key">Set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZAddAsync``2(System.String,System.Tuple{``0,``1}[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="scoreMembers">Array of member scores to add to sorted set</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZAddAsync(System.String,System.Object[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="scoreMembers">Array of member scores [s1, m1, s2, m2, ..]</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCardAsync(System.String)">
            <summary>
            Get the number of members in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <returns>Number of elements in the sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCountAsync(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCountAsync(System.String,System.String,System.String)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZIncrByAsync(System.String,System.Decimal,System.Object)">
            <summary>
            Increment the score of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="increment">Increment by value</param>
            <param name="member">Sorted set member to increment</param>
            <returns>New score of member</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZInterStoreAsync(System.String,System.Decimal[],System.Nullable{CSRedis.RedisAggregate},System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZInterStoreAsync(System.String,System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeAsync(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>Array of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Array of elements in the specified range with scores</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreAsync(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreAsync(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreWithScoresAsync(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRankAsync(System.String,System.Object)">
            <summary>
            Determine the index of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member or null if key does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemAsync(System.String,System.Object[])">
            <summary>
            Remove one or more members from a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="members">Members to remove</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByRankAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Remove all members in a sorted set within the given indexes
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByScoreAsync(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean)">
            <summary>
            Remove all members in a sorted set within the given scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeAsync(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreAsync(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreAsync(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreWithScoresAsync(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRankAsync(System.String,System.Object)">
            <summary>
            Determine the index of a member in a sorted set, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZScoreAsync(System.String,System.Object)">
            <summary>
            Get the score associated with the given member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Score of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZUnionStoreAsync(System.String,System.Decimal[],System.Nullable{CSRedis.RedisAggregate},System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the scores and elements of a sorted set field
            </summary>
            <param name="key">Sorted set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByLexAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Retrieve all the elements in a sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="offset">Limit result set by offset</param>
            <param name="count">Limimt result set by size</param>
            <returns>List of elements in the specified range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByLexAsync(System.String,System.String,System.String)">
            <summary>
            Remove all elements in the sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZLexCountAsync(System.String,System.String,System.String)">
            <summary>
            Returns the number of elements in the sorted set with a value between min and max.
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PublishAsync(System.String,System.String)">
            <summary>
            Post a message to a channel
            </summary>
            <param name="channel">Channel to post message</param>
            <param name="message">Message to send</param>
            <returns>Number of clients that received the message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubChannelsAsync(System.String)">
            <summary>
            List the currently active channels
            </summary>
            <param name="pattern">Glob-style channel pattern</param>
            <returns>Active channel names</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubNumSubAsync(System.String[])">
            <summary>
            Return the number of subscribers (not counting clients subscribed to patterns) for the specified channels
            </summary>
            <param name="channels">Channels to query</param>
            <returns>Channel names and counts</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubNumPatAsync">
            <summary>
            Return the number of subscriptions to patterns
            </summary>
            <returns>The number of patterns all the clients are subscribed to</returns>
        </member>
        <member name="M:CSRedis.RedisClient.EvalAsync(System.String,System.String[],System.Object[])">
            <summary>
            Execute a Lua script server side
            </summary>
            <param name="script">Script to run on server</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.RedisClient.EvalSHAAsync(System.String,System.String[],System.Object[])">
            <summary>
            Execute a Lua script server side, sending only the script's cached SHA hash
            </summary>
            <param name="sha1">SHA1 hash of script</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptExistsAsync(System.String[])">
            <summary>
            Check existence of script SHA hashes in the script cache
            </summary>
            <param name="sha1s">SHA1 script hashes</param>
            <returns>Array of boolean values indicating script existence on server</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptFlushAsync">
            <summary>
            Remove all scripts from the script cache
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptKillAsync">
            <summary>
            Kill the script currently in execution
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptLoadAsync(System.String)">
            <summary>
            Load the specified Lua script into the script cache
            </summary>
            <param name="script">Lua script to load</param>
            <returns>SHA1 hash of script</returns>
        </member>
        <member name="M:CSRedis.RedisClient.AppendAsync(System.String,System.Object)">
            <summary>
            Append a value to a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to append to key</param>
            <returns>Length of string after append</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitCountAsync(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Count set bits in a string
            </summary>
            <param name="key">Key to check</param>
            <param name="start">Start offset</param>
            <param name="end">Stop offset</param>
            <returns>Number of bits set to 1</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitOpAsync(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            Perform bitwise operations between strings
            </summary>
            <param name="operation">Bit command to execute</param>
            <param name="destKey">Store result in destination key</param>
            <param name="keys">Keys to operate</param>
            <returns>Size of string stored in the destination key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitPosAsync(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Find first bit set or clear in a string
            </summary>
            <param name="key">Key to examine</param>
            <param name="bit">Bit value (1 or 0)</param>
            <param name="start">Examine string at specified byte offset</param>
            <param name="end">Examine string to specified byte offset</param>
            <returns>Position of the first bit set to the specified value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DecrAsync(System.String)">
            <summary>
            Decrement the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DecrByAsync(System.String,System.Int64)">
            <summary>
            Decrement the integer value of a key by the given number
            </summary>
            <param name="key">Key to modify</param>
            <param name="decrement">Decrement value</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetAsync(System.String)">
            <summary>
            Get the value of a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Value of key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetBitAsync(System.String,System.UInt32)">
            <summary>
            Returns the bit value at offset in the string value stored at key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="offset">Offset of key to check</param>
            <returns>Bit value stored at offset</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            Get a substring of the string stored at a key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="start">Start offset</param>
            <param name="end">End offset</param>
            <returns>Substring in the specified range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetSetAsync(System.String,System.Object)">
            <summary>
            Set the string value of a key and return its old value
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Old value stored at key, or null if key did not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.IncrAsync(System.String)">
            <summary>
            Increment the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.IncrByAsync(System.String,System.Int64)">
            <summary>
            Increment the integer value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.IncrByFloatAsync(System.String,System.Decimal)">
            <summary>
            Increment the float value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MGetAsync(System.String[])">
            <summary>
            Get the values of all the given keys
            </summary>
            <param name="keys">Keys to lookup</param>
            <returns>Array of values at the specified keys</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetAsync(System.Tuple{System.String,System.Object}[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetAsync(System.Object[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetNxAsync(System.Tuple{System.String,System.Object}[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetNxAsync(System.Object[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PSetExAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration in milliseconds of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetAsync(System.String,System.Object)">
            <summary>
            Set the string value of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetAsync(System.String,System.Object,System.TimeSpan,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expiration">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetAsync(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationSeconds">Set expiration to nearest second</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetAsync(System.String,System.Object,System.Nullable{System.Int64},System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationMilliseconds">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetBitAsync(System.String,System.UInt32,System.Boolean)">
            <summary>
            Sets or clears the bit at offset in the string value stored at key
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Modify key at offset</param>
            <param name="value">Value to set (on or off)</param>
            <returns>Original bit stored at offset</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetExAsync(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetNxAsync(System.String,System.Object)">
            <summary>
            Set the value of a key, only if the key does not exist
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>True if key was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetRangeAsync(System.String,System.UInt32,System.Object)">
            <summary>
            Overwrite part of a string at key starting at the specified offset
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Start offset</param>
            <param name="value">Value to write at offset</param>
            <returns>Length of string after operation</returns>
        </member>
        <member name="M:CSRedis.RedisClient.StrLenAsync(System.String)">
            <summary>
            Get the length of the value stored in a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Length of string at key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BgRewriteAofAsync">
            <summary>
            Asyncronously rewrite the append-only file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BgSaveAsync">
            <summary>
            Asynchronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientGetNameAsync">
            <summary>
            Get the current connection name
            </summary>
            <returns>Connection name</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientKillAsync(System.String,System.Int32)">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="ip">Client IP returned from CLIENT LIST</param>
            <param name="port">Client port returned from CLIENT LIST</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientKillAsync(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="addr">Client address</param>
            <param name="id">Client ID</param>
            <param name="type">Client type</param>
            <param name="skipMe">Set to true to skip calling client</param>
            <returns>The number of clients killed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientListAsync">
            <summary>
            Get the list of client connections
            </summary>
            <returns>Formatted string of clients</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientPauseAsync(System.Int32)">
            <summary>
            Suspend all the Redis clients for the specified amount of time 
            </summary>
            <param name="milliseconds">Time in milliseconds to suspend</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientPauseAsync(System.TimeSpan)">
            <summary>
            Suspend all the Redis clients for the specified amount of time 
            </summary>
            <param name="timeout">Time to suspend</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientSetNameAsync(System.String)">
            <summary>
            Set the current connection name
            </summary>
            <param name="connectionName">Name of connection (no spaces)</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigGetAsync(System.String)">
            <summary>
            Get the value of a configuration paramter
            </summary>
            <param name="parameter">Configuration parameter to lookup</param>
            <returns>Configuration value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigResetStatAsync">
            <summary>
            Reset the stats returned by INFO
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigRewriteAsync">
            <summary>
            Rewrites the redis.conf file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigSetAsync(System.String,System.String)">
            <summary>
            Set a configuration parameter to the given value
            </summary>
            <param name="parameter">Parameter to set</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DbSizeAsync">
            <summary>
            Return the number of keys in the selected database
            </summary>
            <returns>Number of keys</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DebugSegFaultAsync">
            <summary>
            Make the server crash :(
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.FlushAllAsync">
            <summary>
            Remove all keys from all databases
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.FlushDbAsync">
            <summary>
            Remove all keys from the current database
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.InfoAsync(System.String)">
            <summary>
            Get information and statistics about the server
            </summary>
            <param name="section">all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LastSaveAsync">
            <summary>
            Get the timestamp of the last successful save to disk
            </summary>
            <returns>Date of last save</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RoleAsync">
            <summary>
            Provide information on the role of a Redis instance in the context of replication
            </summary>
            <returns>Role information</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SaveAsync">
            <summary>
            Syncronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ShutdownAsync(System.Nullable{System.Boolean})">
            <summary>
            Syncronously save the dataset to disk an then shut down the server
            </summary>
            <param name="save">Force a DB saving operation even if no save points are configured</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlaveOfAsync(System.String,System.Int32)">
            <summary>
            Make the server a slave of another instance or promote it as master
            </summary>
            <param name="host">Master host</param>
            <param name="port">master port</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlaveOfNoOneAsync">
            <summary>
            Turn off replication, turning the Redis server into a master
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogGetAsync(System.Nullable{System.Int64})">
            <summary>
            Get latest entries from the slow log
            </summary>
            <param name="count">Limit entries returned</param>
            <returns>Slow log entries</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogLenAsync">
            <summary>
            Get the length of the slow log
            </summary>
            <returns>Slow log length</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogResetAsync">
            <summary>
            Reset the slow log
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SyncAsync">
            <summary>
            Internal command used for replication
            </summary>
            <returns>Byte array of Redis sync data</returns>
        </member>
        <member name="M:CSRedis.RedisClient.TimeAsync">
            <summary>
            Return the current server time
            </summary>
            <returns>Server time</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MultiAsync">
            <summary>
            Mark the start of a transaction block
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DiscardAsync">
            <summary>
            Discard all commands issued after MULTI
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExecAsync">
            <summary>
            Execute all commands issued after MULTI
            </summary>
            <returns>Array of output from all transaction commands</returns>
        </member>
        <member name="M:CSRedis.RedisClient.UnwatchAsync">
            <summary>
            Forget about all watched keys
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.WatchAsync(System.String[])">
            <summary>
            Watch the given keys to determine execution of the MULTI/EXEC block
            </summary>
            <param name="keys">Keys to watch</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfAddAsync(System.String,System.Object[])">
            <summary>
            Adds the specified elements to the specified HyperLogLog.
            </summary>
            <param name="key">Key to update</param>
            <param name="elements">Elements to add</param>
            <returns>1 if at least 1 HyperLogLog internal register was altered. 0 otherwise.</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfCountAsync(System.String[])">
            <summary>
            Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s)
            </summary>
            <param name="keys">One or more HyperLogLog keys to examine</param>
            <returns>Approximated number of unique elements observed via PFADD</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfMergeAsync(System.String,System.String[])">
            <summary>
            Merge N different HyperLogLogs into a single key.
            </summary>
            <param name="destKey">Where to store the merged HyperLogLogs</param>
            <param name="sourceKeys">The HyperLogLogs keys that will be combined</param>
            <returns>Status code</returns>
        </member>
        <member name="E:CSRedis.RedisClient.SubscriptionReceived">
            <summary>
            Occurs when a subscription message is received
            </summary>
        </member>
        <member name="E:CSRedis.RedisClient.SubscriptionChanged">
            <summary>
            Occurs when a subscription channel is added or removed
            </summary>
        </member>
        <member name="E:CSRedis.RedisClient.TransactionQueued">
            <summary>
            Occurs when a transaction command is acknowledged by the server
            </summary>
        </member>
        <member name="E:CSRedis.RedisClient.MonitorReceived">
            <summary>
            Occurs when a monitor message is received
            </summary>
        </member>
        <member name="E:CSRedis.RedisClient.Connected">
            <summary>
            Occurs when the connection has sucessfully reconnected
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.Host">
            <summary>
            Get the Redis server hostname
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.Port">
            <summary>
            Get the Redis server port
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.IsConnected">
            <summary>
            Get a value indicating whether the Redis client is connected to the server
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.Encoding">
            <summary>
            Get or set the string encoding used to communicate with the server
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.ReceiveTimeout">
            <summary>
            Get or set the connection read timeout (milliseconds)
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.SendTimeout">
            <summary>
            Get or set the connection send timeout (milliseconds)
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.ReconnectAttempts">
            <summary>
            Get or set the number of times to attempt a reconnect after a connection fails
            </summary>
        </member>
        <member name="P:CSRedis.RedisClient.ReconnectWait">
            <summary>
            Get or set the amount of time (milliseconds) to wait between reconnect attempts
            </summary>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.String)">
            <summary>
            Create a new RedisClient using default port and encoding
            </summary>
            <param name="host">Redis server hostname</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.String,System.Int32)">
            <summary>
            Create a new RedisClient
            </summary>
            <param name="host">Redis server hostname</param>
            <param name="port">Redis server port</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Create a new RedisClient
            </summary>
            <param name="host">Redis server hostname</param>
            <param name="port">Redis server port</param>
            <param name="ssl">Set to true if remote Redis server expects SSL</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.Net.EndPoint)">
            <summary>
            Create a new RedisClient
            </summary>
            <param name="endpoint">Redis server</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.Net.EndPoint,System.Boolean)">
            <summary>
            Create a new RedisClient
            </summary>
            <param name="endpoint">Redis server</param>
            <param name="ssl">Set to true if remote Redis server expects SSL</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new RedisClient with specific async concurrency settings
            </summary>
            <param name="host">Redis server hostname</param>
            <param name="port">Redis server port</param>
            <param name="asyncConcurrency">Max concurrent threads (default 1000)</param>
            <param name="asyncBufferSize">Async thread buffer size (default 10240 bytes)</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.String,System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Create a new RedisClient with specific async concurrency settings
            </summary>
            <param name="host">Redis server hostname</param>
            <param name="port">Redis server port</param>
            <param name="ssl">Set to true if remote Redis server expects SSL</param>
            <param name="asyncConcurrency">Max concurrent threads (default 1000)</param>
            <param name="asyncBufferSize">Async thread buffer size (default 10240 bytes)</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.Net.EndPoint,System.Int32,System.Int32)">
            <summary>
            Create a new RedisClient with specific async concurrency settings
            </summary>
            <param name="endpoint">Redis server</param>
            <param name="asyncConcurrency">Max concurrent threads (default 1000)</param>
            <param name="asyncBufferSize">Async thread buffer size (default 10240 bytes)</param>
        </member>
        <member name="M:CSRedis.RedisClient.#ctor(System.Net.EndPoint,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Create a new RedisClient with specific async concurrency settings
            </summary>
            <param name="endpoint">Redis server</param>
            <param name="ssl">Set to true if remote Redis server expects SSL</param>
            <param name="asyncConcurrency">Max concurrent threads (default 1000)</param>
            <param name="asyncBufferSize">Async thread buffer size (default 10240 bytes)</param>
        </member>
        <member name="M:CSRedis.RedisClient.StartPipe">
            <summary>
            Begin buffered pipeline mode (calls return immediately; use EndPipe() to execute batch)
            </summary>
        </member>
        <member name="M:CSRedis.RedisClient.StartPipeTransaction">
            <summary>
            Begin buffered pipeline mode within the context of a transaction (calls return immediately; use EndPipe() to excute batch)
            </summary>
        </member>
        <member name="M:CSRedis.RedisClient.EndPipe">
            <summary>
            Execute pipeline commands
            </summary>
            <returns>Array of batched command results</returns>
        </member>
        <member name="M:CSRedis.RedisClient.StreamTo``1(System.IO.Stream,System.Func{CSRedis.IRedisClientSync,``0})">
            <summary>
            Stream a BULK reply from the server using default buffer size
            </summary>
            <typeparam name="T">Response type</typeparam>
            <param name="destination">Destination stream</param>
            <param name="func">Client command to execute (BULK reply only)</param>
        </member>
        <member name="M:CSRedis.RedisClient.StreamTo``1(System.IO.Stream,System.Int32,System.Func{CSRedis.IRedisClientSync,``0})">
            <summary>
            Stream a BULK reply from the server
            </summary>
            <typeparam name="T">Response type</typeparam>
            <param name="destination">Destination stream</param>
            <param name="bufferSize">Size of buffer used to write server response</param>
            <param name="func">Client command to execute (BULK reply only)</param>
        </member>
        <member name="M:CSRedis.RedisClient.Dispose">
            <summary>
            Dispose all resources used by the current RedisClient
            </summary>
        </member>
        <member name="M:CSRedis.RedisClient.Connect(System.Int32)">
            <summary>
            Connect to the remote host
            </summary>
            <param name="timeout">Connection timeout in milliseconds</param>
            <returns>True if connected</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Call(System.String,System.String[])">
            <summary>
            Call arbitrary Redis command
            </summary>
            <param name="command">Command name</param>
            <param name="args">Command arguments</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Auth(System.String)">
            <summary>
            Authenticate to the server
            </summary>
            <param name="password">Redis server password</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Echo(System.String)">
            <summary>
            Echo the given string
            </summary>
            <param name="message">Message to echo</param>
            <returns>Message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Ping">
            <summary>
            Ping the server
            </summary>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Quit">
            <summary>
            Close the connection
            </summary>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Select(System.Int32)">
            <summary>
            Change the selected database for the current connection
            </summary>
            <param name="index">Zero-based database index</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Touch(System.String[])">
            <summary>
            [redis-server 3.2.1] 修改指定key(s) 最后访问时间 若key不存在，不做操作
            </summary>
            <param name="keys">Keys</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.UnLink(System.String[])">
            <summary>
            [redis-server 4.0.0] Delete a key, 该命令和DEL十分相似：删除指定的key(s),若key不存在则该key被跳过。但是，相比DEL会产生阻塞，该命令会在另一个线程中回收内存，因此它是非阻塞的。 这也是该命令名字的由来：仅将keys从keyspace元数据中删除，真正的删除会在后续异步操作。
            </summary>
            <param name="keys">Keys to delete</param>
            <returns>Number of keys removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Del(System.String[])">
            <summary>
            Delete a key
            </summary>
            <param name="keys">Keys to delete</param>
            <returns>Number of keys removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Dump(System.String)">
            <summary>
            Return a serialized version of the value stored at the specified key
            </summary>
            <param name="key">Key to dump</param>
            <returns>Serialized value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Exists(System.String)">
            <summary>
            Determine if a key exists
            </summary>
            <param name="key">Key to check</param>
            <returns>True if key exists</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Expire(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest second)</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Expire(System.String,System.Int32)">
            <summary>
            Set a key's time to live in seconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAt(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest second)
            </summary>
            <param name="key">Key to modify</param>
            <param name="expirationDate">Date of expiration, to nearest second</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ExpireAt(System.String,System.Int32)">
            <summary>
            Set the expiration for a key as a UNIX timestamp
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">UNIX timestamp</param>
            <returns>True if timeout was set; false if key does not exist or timeout could not be set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Keys(System.String)">
            <summary>
            Find all keys matching the given pattern
            </summary>
            <param name="pattern">Pattern to match</param>
            <returns>Array of keys matching pattern</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Migrate(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeoutMilliseconds">Timeout in milliseconds</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Migrate(System.String,System.Int32,System.String,System.Int32,System.TimeSpan)">
            <summary>
            Atomically transfer a key from a Redis instance to another one
            </summary>
            <param name="host">Remote Redis host</param>
            <param name="port">Remote Redis port</param>
            <param name="key">Key to migrate</param>
            <param name="destinationDb">Remote database ID</param>
            <param name="timeout">Timeout in milliseconds</param>
            <returns>Status message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Move(System.String,System.Int32)">
            <summary>
            Move a key to another database
            </summary>
            <param name="key">Key to move</param>
            <param name="database">Database destination ID</param>
            <returns>True if key was moved</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ObjectEncoding(System.String[])">
            <summary>
            Get the number of references of the value associated with the specified key
            </summary>
            <param name="arguments">Subcommand arguments</param>
            <returns>The type of internal representation used to store the value at the specified key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Object(CSRedis.RedisObjectSubCommand,System.String[])">
            <summary>
            Inspect the internals of Redis objects
            </summary>
            <param name="subCommand">Type of Object command to send</param>
            <param name="arguments">Subcommand arguments</param>
            <returns>Varies depending on subCommand</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Persist(System.String)">
            <summary>
            Remove the expiration from a key
            </summary>
            <param name="key">Key to modify</param>
            <returns>True if timeout was removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpire(System.String,System.TimeSpan)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="expiration">Expiration (nearest millisecond)</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpire(System.String,System.Int64)">
            <summary>
            Set a key's time to live in milliseconds
            </summary>
            <param name="key">Key</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAt(System.String,System.DateTime)">
            <summary>
            Set the expiration for a key (nearest millisecond)
            </summary>
            <param name="key">Key to modify</param>
            <param name="date">Expiration date</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PExpireAt(System.String,System.Int64)">
            <summary>
            Set the expiration for a key as a UNIX timestamp specified in milliseconds
            </summary>
            <param name="key">Key to modify</param>
            <param name="timestamp">Expiration timestamp (milliseconds)</param>
            <returns>True if timeout was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PTtl(System.String)">
            <summary>
            Get the time to live for a key in milliseconds
            </summary>
            <param name="key">Key to check</param>
            <returns>Time-to-live in milliseconds</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RandomKey">
            <summary>
            Return a random key from the keyspace
            </summary>
            <returns>A random key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Rename(System.String,System.String)">
            <summary>
            Rename a key
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RenameNx(System.String,System.String)">
            <summary>
            Rename a key, only if the new key does not exist
            </summary>
            <param name="key">Key to rename</param>
            <param name="newKey">New key name</param>
            <returns>True if key was renamed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Restore(System.String,System.Int64,System.Byte[])">
            <summary>
            Create a key using the provided serialized value, previously obtained using dump
            </summary>
            <param name="key">Key to restore</param>
            <param name="ttlMilliseconds">Time-to-live in milliseconds</param>
            <param name="serializedValue">Serialized value from DUMP</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Sort(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set
            </summary>
            <param name="key">Key to sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns>The sorted list</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SortAndStore(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            Sort the elements in a list, set or sorted set, then store the result in a new list
            </summary>
            <param name="key">Key to sort</param>
            <param name="destination">Destination key name of stored sort</param>
            <param name="offset">Number of elements to skip</param>
            <param name="count">Number of elements to return</param>
            <param name="by">Sort by external key</param>
            <param name="dir">Sort direction</param>
            <param name="isAlpha">Sort lexicographically</param>
            <param name="get">Retrieve external keys</param>
            <returns>Number of elements stored</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Ttl(System.String)">
            <summary>
            Get the time to live for a key
            </summary>
            <param name="key">Key to check</param>
            <returns>Time-to-live in seconds</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Type(System.String)">
            <summary>
            Determine the type stored at key
            </summary>
            <param name="key">Key to check</param>
            <returns>Type of key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Scan(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the set of keys in the currently selected Redis database
            </summary>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Set the maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HStrLen(System.String,System.String)">
            <summary>
            [redis-server 3.2.0] 返回hash指定field的value的字符串长度，如果hash或者field不存在，返回0.
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.HDel(System.String,System.String[])">
            <summary>
            Delete one or more hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to delete</param>
            <returns>Number of fields removed from hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HExists(System.String,System.String)">
            <summary>
            Determine if a hash field exists
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to check</param>
            <returns>True if hash field exists</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGet(System.String,System.String)">
            <summary>
            Get the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to get</param>
            <returns>Value of hash field</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGetAll``1(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <typeparam name="T">Object to map hash</typeparam>
            <param name="key">Hash key</param>
            <returns>Strongly typed object mapped from hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HGetAll(System.String)">
            <summary>
            Get all the fields and values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Dictionary mapped from string</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            Increment the integer value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HIncrByFloat(System.String,System.String,System.Decimal)">
            <summary>
            Increment the float value of a hash field by the given number
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Field to increment</param>
            <param name="increment">Increment value</param>
            <returns>Value of field after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HKeys(System.String)">
            <summary>
            Get all the fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>All hash field names</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HLen(System.String)">
            <summary>
            Get the number of fields in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Number of fields in hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMGet(System.String,System.String[])">
            <summary>
            Get the values of all the given hash fields
            </summary>
            <param name="key">Hash key</param>
            <param name="fields">Fields to return</param>
            <returns>Values of given fields</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSet(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="dict">Dictionary mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSet``1(System.String,``0)">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <typeparam name="T">Type of object to map hash</typeparam>
            <param name="key">Hash key</param>
            <param name="obj">Object mapping of hash</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HMSet(System.String,System.Object[])">
            <summary>
            Set multiple hash fields to multiple values
            </summary>
            <param name="key">Hash key</param>
            <param name="keyValues">Array of [key,value,key,value,..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HSet(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field is new</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HSetNx(System.String,System.String,System.Object)">
            <summary>
            Set the value of a hash field, only if the field does not exist
            </summary>
            <param name="key">Hash key</param>
            <param name="field">Hash field to set</param>
            <param name="value">Value to set</param>
            <returns>True if field was set to value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HVals(System.String)">
            <summary>
            Get all the values in a hash
            </summary>
            <param name="key">Hash key</param>
            <returns>Array of all values in hash</returns>
        </member>
        <member name="M:CSRedis.RedisClient.HScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the keys and values of a hash field
            </summary>
            <param name="key">Hash key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BLPopWithKey(System.Int32,System.String[])">
            <summary>
            Remove and get the first element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BLPopWithKey(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the first element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BLPop(System.Int32,System.String[])">
            <summary>
            Remove and get the first element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BLPop(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the first element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPopWithKey(System.Int32,System.String[])">
            <summary>
            Remove and get the last element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPopWithKey(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the last element and key in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List key and list value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPop(System.Int32,System.String[])">
            <summary>
            Remove and get the last element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List value</param>
            <returns></returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPop(System.TimeSpan,System.String[])">
            <summary>
            Remove and get the last element value in a list, or block until one is available
            </summary>
            <param name="timeout">Timeout in seconds</param>
            <param name="keys">List keys</param>
            <returns>List value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPopLPush(System.String,System.String,System.Int32)">
            <summary>
            Pop a value from a list, push it to another list and return it; or block until one is available
            </summary>
            <param name="source">Source list key</param>
            <param name="destination">Destination key</param>
            <param name="timeout">Timeout in seconds</param>
            <returns>Element popped</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BRPopLPush(System.String,System.String,System.TimeSpan)">
            <summary>
            Pop a value from a list, push it to another list and return it; or block until one is available
            </summary>
            <param name="source">Source list key</param>
            <param name="destination">Destination key</param>
            <param name="timeout">Timeout in seconds</param>
            <returns>Element popped</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LIndex(System.String,System.Int64)">
            <summary>
            Get an element from a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">Zero-based index of item to return</param>
            <returns>Element at index</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LInsert(System.String,CSRedis.RedisInsert,System.Object,System.Object)">
            <summary>
            Insert an element before or after another element in a list
            </summary>
            <param name="key">List key</param>
            <param name="insertType">Relative position</param>
            <param name="pivot">Relative element</param>
            <param name="value">Element to insert</param>
            <returns>Length of list after insert or -1 if pivot not found</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LLen(System.String)">
            <summary>
            Get the length of a list
            </summary>
            <param name="key">List key</param>
            <returns>Length of list at key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPop(System.String)">
            <summary>
            Remove and get the first element in a list
            </summary>
            <param name="key">List key</param>
            <returns>First element in list</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPush(System.String,System.Object[])">
            <summary>
            Prepend one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LPushX(System.String,System.Object)">
            <summary>
            Prepend a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            Get a range of elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LRem(System.String,System.Int64,System.Object)">
            <summary>
            Remove elements from a list
            </summary>
            <param name="key">List key</param>
            <param name="count">&gt;0: remove N elements from head to tail; &lt;0: remove N elements from tail to head; =0: remove all elements</param>
            <param name="value">Remove elements equal to value</param>
            <returns>Number of removed elements</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LSet(System.String,System.Int64,System.Object)">
            <summary>
            Set the value of an element in a list by its index
            </summary>
            <param name="key">List key</param>
            <param name="index">List index to modify</param>
            <param name="value">New element value</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            Trim a list to the specified range
            </summary>
            <param name="key">List key</param>
            <param name="start">Zero-based start index</param>
            <param name="stop">Zero-based stop index</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPop(System.String)">
            <summary>
            Remove and get the last elment in a list
            </summary>
            <param name="key">List key</param>
            <returns>Value of last list element</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPopLPush(System.String,System.String)">
            <summary>
            Remove the last elment in a list, append it to another list and return it
            </summary>
            <param name="source">List source key</param>
            <param name="destination">Destination key</param>
            <returns>Element being popped and pushed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPush(System.String,System.Object[])">
            <summary>
            Append one or multiple values to a list
            </summary>
            <param name="key">List key</param>
            <param name="values">Values to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.RPushX(System.String,System.Object)">
            <summary>
            Append a value to a list, only if the list exists
            </summary>
            <param name="key">List key</param>
            <param name="value">Value to push</param>
            <returns>Length of list after push</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SAdd(System.String,System.Object[])">
            <summary>
            Add one or more members to a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Members to add to set</param>
            <returns>Number of elements added to set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SCard(System.String)">
            <summary>
            Get the number of members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>Number of elements in set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SDiff(System.String[])">
            <summary>
            Subtract multiple sets
            </summary>
            <param name="keys">Set keys to subtract</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SDiffStore(System.String,System.String[])">
            <summary>
            Subtract multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to subtract</param>
            <returns>Number of elements in the resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SInter(System.String[])">
            <summary>
            Intersect multiple sets
            </summary>
            <param name="keys">Set keys to intersect</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SInterStore(System.String,System.String[])">
            <summary>
            Intersect multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to intersect</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SIsMember(System.String,System.Object)">
            <summary>
            Determine if a given value is a member of a set
            </summary>
            <param name="key">Set key</param>
            <param name="member">Member to lookup</param>
            <returns>True if member exists in set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SMembers(System.String)">
            <summary>
            Get all the members in a set
            </summary>
            <param name="key">Set key</param>
            <returns>All elements in the set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SMove(System.String,System.String,System.Object)">
            <summary>
            Move a member from one set to another
            </summary>
            <param name="source">Source key</param>
            <param name="destination">Destination key</param>
            <param name="member">Member to move</param>
            <returns>True if element was moved</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SPop(System.String)">
            <summary>
            Remove and return a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>The removed element</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SPop(System.String,System.Int64)">
            <summary>
            Remove and return one or more random member from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to remove and return</param>
            <returns>The removed elements</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRandMember(System.String)">
            <summary>
            Get a random member from a set
            </summary>
            <param name="key">Set key</param>
            <returns>One random element from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRandMembers(System.String,System.Int64)">
            <summary>
            Get one or more random members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="count">Number of elements to return</param>
            <returns>One or more random elements from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SRem(System.String,System.Object[])">
            <summary>
            Remove one or more members from a set
            </summary>
            <param name="key">Set key</param>
            <param name="members">Set members to remove</param>
            <returns>Number of elements removed from set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SUnion(System.String[])">
            <summary>
            Add multiple sets
            </summary>
            <param name="keys">Set keys to union</param>
            <returns>Array of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SUnionStore(System.String,System.String[])">
            <summary>
            Add multiple sets and store the resulting set in a key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Set keys to union</param>
            <returns>Number of elements in resulting set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the elements of a set field
            </summary>
            <param name="key">Set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZAdd``2(System.String,System.Tuple{``0,``1}[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="scoreMembers">Array of member scores to add to sorted set</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZAdd(System.String,System.Object[])">
            <summary>
            Add one or more members to a sorted set, or update its score if it already exists
            </summary>
            <param name="key">Sorted set key</param>
            <param name="scoreMembers">Array of member scores [s1, m1, s2, m2, ..]</param>
            <returns>Number of elements added to the sorted set (not including member updates)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCard(System.String)">
            <summary>
            Get the number of members in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <returns>Number of elements in the sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCount(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZCount(System.String,System.String,System.String)">
            <summary>
            Count the members in a sorted set with scores within the given values
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZIncrBy(System.String,System.Decimal,System.Object)">
            <summary>
            Increment the score of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="increment">Increment by value</param>
            <param name="member">Sorted set member to increment</param>
            <returns>New score of member</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZInterStore(System.String,System.Decimal[],System.Nullable{CSRedis.RedisAggregate},System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZInterStore(System.String,System.String[])">
            <summary>
            Intersect multiple sorted sets and store the resulting set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to intersect</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRange(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>Array of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Array of elements in the specified range with scores</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScore(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScore(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreWithScores(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRank(System.String,System.Object)">
            <summary>
            Determine the index of a member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member or null if key does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRem(System.String,System.Object[])">
            <summary>
            Remove one or more members from a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="members">Members to remove</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            Remove all members in a sorted set within the given indexes
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByScore(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean)">
            <summary>
            Remove all members in a sorted set within the given scores
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Minimum score</param>
            <param name="max">Maximum score</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRange(System.String,System.Int64,System.Int64,System.Boolean)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <param name="withScores">Include scores in result</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            Return a range of members in a sorted set, by index, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="start">Start offset</param>
            <param name="stop">Stop offset</param>
            <returns>List of elements in the specified range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScore(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScore(System.String,System.String,System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="withScores">Include scores in result</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreWithScores(System.String,System.Decimal,System.Decimal,System.Boolean,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="exclusiveMax">Maximum score is exclusive</param>
            <param name="exclusiveMin">Minimum score is exclusive</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Return a range of members in a sorted set, by score, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="max">Maximum score</param>
            <param name="min">Minimum score</param>
            <param name="offset">Start offset</param>
            <param name="count">Number of elements to return</param>
            <returns>List of elements in the specified score range (with optional scores)</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRevRank(System.String,System.Object)">
            <summary>
            Determine the index of a member in a sorted set, with scores ordered from high to low
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Rank of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZScore(System.String,System.Object)">
            <summary>
            Get the score associated with the given member in a sorted set
            </summary>
            <param name="key">Sorted set key</param>
            <param name="member">Member to lookup</param>
            <returns>Score of member, or null if member does not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZUnionStore(System.String,System.Decimal[],System.Nullable{CSRedis.RedisAggregate},System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="weights">Multiplication factor for each input set</param>
            <param name="aggregate">Aggregation function of resulting set</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZUnionStore(System.String,System.String[])">
            <summary>
            Add multiple sorted sets and store the resulting sorted set in a new key
            </summary>
            <param name="destination">Destination key</param>
            <param name="keys">Sorted set keys to union</param>
            <returns>Number of elements in the resulting sorted set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            Iterate the scores and elements of a sorted set field
            </summary>
            <param name="key">Sorted set key</param>
            <param name="cursor">The cursor returned by the server in the previous call, or 0 if this is the first call</param>
            <param name="pattern">Glob-style pattern to filter returned elements</param>
            <param name="count">Maximum number of elements to return</param>
            <returns>Updated cursor and result set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRangeByLex(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Retrieve all the elements in a sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="offset">Limit result set by offset</param>
            <param name="count">Limimt result set by size</param>
            <returns>List of elements in the specified range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZRemRangeByLex(System.String,System.String,System.String)">
            <summary>
            Remove all elements in the sorted set with a value between min and max
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements removed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ZLexCount(System.String,System.String,System.String)">
            <summary>
            Returns the number of elements in the sorted set with a value between min and max.
            </summary>
            <param name="key">Sorted set key</param>
            <param name="min">Lexagraphic start value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <param name="max">Lexagraphic stop value. Prefix value with '(' to indicate exclusive; '[' to indicate inclusive. Use '-' or '+' to specify infinity.</param>
            <returns>Number of elements in the specified score range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PSubscribe(System.String[])">
            <summary>
            Listen for messages published to channels matching the given patterns
            </summary>
            <param name="channelPatterns">Patterns to subscribe</param>
        </member>
        <member name="M:CSRedis.RedisClient.Publish(System.String,System.String)">
            <summary>
            Post a message to a channel
            </summary>
            <param name="channel">Channel to post message</param>
            <param name="message">Message to send</param>
            <returns>Number of clients that received the message</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubChannels(System.String)">
            <summary>
            List the currently active channels
            </summary>
            <param name="pattern">Return only channels matching this pattern</param>
            <returns>Array of channel names</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubNumSub(System.String[])">
            <summary>
            Return the number of subscribers for the specified channels
            </summary>
            <param name="channels">Channel names</param>
            <returns>Array of channel/count tuples</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PubSubNumPat">
            <summary>
            Return the number of subscriptions to patterns
            </summary>
            <returns>Number of patterns all clients are subscribed to</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PUnsubscribe(System.String[])">
            <summary>
            Stop listening for messages posted to channels matching the given patterns
            </summary>
            <param name="channelPatterns">Patterns to unsubscribe</param>
        </member>
        <member name="M:CSRedis.RedisClient.Subscribe(System.String[])">
            <summary>
            Listen for messages published to the given channels
            </summary>
            <param name="channels">Channels to subscribe</param>
        </member>
        <member name="M:CSRedis.RedisClient.Unsubscribe(System.String[])">
            <summary>
            Stop listening for messages posted to the given channels
            </summary>
            <param name="channels">Channels to unsubscribe</param>
        </member>
        <member name="M:CSRedis.RedisClient.Eval(System.String,System.String[],System.Object[])">
            <summary>
            Execute a Lua script server side
            </summary>
            <param name="script">Script to run on server</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.RedisClient.EvalSHA(System.String,System.String[],System.Object[])">
            <summary>
            Execute a Lua script server side, sending only the script's cached SHA hash
            </summary>
            <param name="sha1">SHA1 hash of script</param>
            <param name="keys">Keys used by script</param>
            <param name="arguments">Arguments to pass to script</param>
            <returns>Redis object</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptExists(System.String[])">
            <summary>
            Check existence of script SHA hashes in the script cache
            </summary>
            <param name="sha1s">SHA1 script hashes</param>
            <returns>Array of boolean values indicating script existence on server</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptFlush">
            <summary>
            Remove all scripts from the script cache
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptKill">
            <summary>
            Kill the script currently in execution
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ScriptLoad(System.String)">
            <summary>
            Load the specified Lua script into the script cache
            </summary>
            <param name="script">Lua script to load</param>
            <returns>SHA1 hash of script</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Append(System.String,System.Object)">
            <summary>
            Append a value to a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to append to key</param>
            <returns>Length of string after append</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitCount(System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Count set bits in a string
            </summary>
            <param name="key">Key to check</param>
            <param name="start">Start offset</param>
            <param name="end">Stop offset</param>
            <returns>Number of bits set to 1</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitOp(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            Perform bitwise operations between strings
            </summary>
            <param name="operation">Bit command to execute</param>
            <param name="destKey">Store result in destination key</param>
            <param name="keys">Keys to operate</param>
            <returns>Size of string stored in the destination key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BitPos(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            Find first bit set or clear in a string
            </summary>
            <param name="key">Key to examine</param>
            <param name="bit">Bit value (1 or 0)</param>
            <param name="start">Examine string at specified byte offset</param>
            <param name="end">Examine string to specified byte offset</param>
            <returns>Position of the first bit set to the specified value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Decr(System.String)">
            <summary>
            Decrement the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DecrBy(System.String,System.Int64)">
            <summary>
            Decrement the integer value of a key by the given number
            </summary>
            <param name="key">Key to modify</param>
            <param name="decrement">Decrement value</param>
            <returns>Value of key after decrement</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Get(System.String)">
            <summary>
            Get the value of a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Value of key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetBit(System.String,System.UInt32)">
            <summary>
            Returns the bit value at offset in the string value stored at key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="offset">Offset of key to check</param>
            <returns>Bit value stored at offset</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            Get a substring of the string stored at a key
            </summary>
            <param name="key">Key to lookup</param>
            <param name="start">Start offset</param>
            <param name="end">End offset</param>
            <returns>Substring in the specified range</returns>
        </member>
        <member name="M:CSRedis.RedisClient.GetSet(System.String,System.Object)">
            <summary>
            Set the string value of a key and return its old value
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Old value stored at key, or null if key did not exist</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Incr(System.String)">
            <summary>
            Increment the integer value of a key by one
            </summary>
            <param name="key">Key to modify</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.IncrBy(System.String,System.Int64)">
            <summary>
            Increment the integer value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.IncrByFloat(System.String,System.Decimal)">
            <summary>
            Increment the float value of a key by the given amount
            </summary>
            <param name="key">Key to modify</param>
            <param name="increment">Increment amount</param>
            <returns>Value of key after increment</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MGet(System.String[])">
            <summary>
            Get the values of all the given keys
            </summary>
            <param name="keys">Keys to lookup</param>
            <returns>Array of values at the specified keys</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSet(System.Tuple{System.String,System.Object}[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSet(System.Object[])">
            <summary>
            Set multiple keys to multiple values
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetNx(System.Tuple{System.String,System.Object}[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.MSetNx(System.Object[])">
            <summary>
            Set multiple keys to multiple values, only if none of the keys exist
            </summary>
            <param name="keyValues">Key values to set [k1, v1, k2, v2, ..]</param>
            <returns>True if all keys were set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PSetEx(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration in milliseconds of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="milliseconds">Expiration in milliseconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Set(System.String,System.Object)">
            <summary>
            Set the string value of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Set(System.String,System.Object,System.TimeSpan,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expiration">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Set(System.String,System.Object,System.Nullable{System.Int32},System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationSeconds">Set expiration to nearest second</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Set(System.String,System.Object,System.Nullable{System.Int64},System.Nullable{CSRedis.RedisExistence})">
            <summary>
            Set the string value of a key with atomic expiration and existence condition
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <param name="expirationMilliseconds">Set expiration to nearest millisecond</param>
            <param name="condition">Set key if existence condition</param>
            <returns>Status code, or null if condition not met</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            Sets or clears the bit at offset in the string value stored at key
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Modify key at offset</param>
            <param name="value">Value to set (on or off)</param>
            <returns>Original bit stored at offset</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetEx(System.String,System.Int64,System.Object)">
            <summary>
            Set the value and expiration of a key
            </summary>
            <param name="key">Key to modify</param>
            <param name="seconds">Expiration in seconds</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetNx(System.String,System.Object)">
            <summary>
            Set the value of a key, only if the key does not exist
            </summary>
            <param name="key">Key to modify</param>
            <param name="value">Value to set</param>
            <returns>True if key was set</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SetRange(System.String,System.UInt32,System.Object)">
            <summary>
            Overwrite part of a string at key starting at the specified offset
            </summary>
            <param name="key">Key to modify</param>
            <param name="offset">Start offset</param>
            <param name="value">Value to write at offset</param>
            <returns>Length of string after operation</returns>
        </member>
        <member name="M:CSRedis.RedisClient.StrLen(System.String)">
            <summary>
            Get the length of the value stored in a key
            </summary>
            <param name="key">Key to lookup</param>
            <returns>Length of string at key</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BgRewriteAof">
            <summary>
            Asyncronously rewrite the append-only file
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.BgSave">
            <summary>
            Asynchronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientKill(System.String,System.Int32)">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="ip">Client IP returned from CLIENT LIST</param>
            <param name="port">Client port returned from CLIENT LIST</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientKill(System.String,System.String,System.String,System.Nullable{System.Boolean})">
            <summary>
            Kill the connection of a client
            </summary>
            <param name="addr">client's ip:port</param>
            <param name="id">client's unique ID</param>
            <param name="type">client type (normal|slave|pubsub)</param>
            <param name="skipMe">do not kill the calling client</param>
            <returns>Nummber of clients killed</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientList">
            <summary>
            Get the list of client connections
            </summary>
            <returns>Formatted string of clients</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientPause(System.Int32)">
            <summary>
            Suspend all Redis clients for the specified amount of time
            </summary>
            <param name="milliseconds">Time to pause in milliseconds</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientPause(System.TimeSpan)">
            <summary>
            Suspend all Redis clients for the specified amount of time
            </summary>
            <param name="timeout">Time to pause</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientGetName">
            <summary>
            Get the current connection name
            </summary>
            <returns>Connection name</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ClientSetName(System.String)">
            <summary>
            Set the current connection name
            </summary>
            <param name="connectionName">Name of connection (no spaces)</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigGet(System.String)">
            <summary>
            Get the value of a configuration paramter
            </summary>
            <param name="parameter">Configuration parameter to lookup</param>
            <returns>Configuration value</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigResetStat">
            <summary>
            Reset the stats returned by INFO
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigRewrite">
            <summary>
            Rewrite the redis.conf file the server was started with, applying the minimal changes needed to make it reflect current configuration
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.ConfigSet(System.String,System.String)">
            <summary>
            Set a configuration parameter to the given value
            </summary>
            <param name="parameter">Parameter to set</param>
            <param name="value">Value to set</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DbSize">
            <summary>
            Return the number of keys in the selected database
            </summary>
            <returns>Number of keys</returns>
        </member>
        <member name="M:CSRedis.RedisClient.DebugSegFault">
            <summary>
            Make the server crash :(
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.FlushAll">
            <summary>
            Remove all keys from all databases
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.FlushDb">
            <summary>
            Remove all keys from the current database
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Info(System.String)">
            <summary>
            Get information and statistics about the server
            </summary>
            <param name="section">all|default|server|clients|memory|persistence|stats|replication|cpu|commandstats|cluster|keyspace</param>
            <returns>Formatted string</returns>
        </member>
        <member name="M:CSRedis.RedisClient.LastSave">
            <summary>
            Get the timestamp of the last successful save to disk
            </summary>
            <returns>Date of last save</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Monitor">
            <summary>
            Listen for all requests received by the server in real time
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Role">
            <summary>
            Get role information for the current Redis instance
            </summary>
            <returns>RedisMasterRole|RedisSlaveRole|RedisSentinelRole</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Save">
            <summary>
            Syncronously save the dataset to disk
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Shutdown(System.Nullable{System.Boolean})">
            <summary>
            Syncronously save the dataset to disk an then shut down the server
            </summary>
            <param name="save">Force a DB saving operation even if no save points are configured</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlaveOf(System.String,System.Int32)">
            <summary>
            Make the server a slave of another instance or promote it as master
            </summary>
            <param name="host">Master host</param>
            <param name="port">master port</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlaveOfNoOne">
            <summary>
            Turn off replication, turning the Redis server into a master
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogGet(System.Nullable{System.Int64})">
            <summary>
            Get latest entries from the slow log
            </summary>
            <param name="count">Limit entries returned</param>
            <returns>Slow log entries</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogLen">
            <summary>
            Get the length of the slow log
            </summary>
            <returns>Slow log length</returns>
        </member>
        <member name="M:CSRedis.RedisClient.SlowLogReset">
            <summary>
            Reset the slow log
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Sync">
            <summary>
            Internal command used for replication
            </summary>
            <returns>Byte array of Redis sync data</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Time">
            <summary>
            Return the current server time
            </summary>
            <returns>Server time</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Discard">
            <summary>
            Discard all commands issued after MULTI
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Exec">
            <summary>
            Execute all commands issued after MULTI
            </summary>
            <returns>Array of output from all transaction commands</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Multi">
            <summary>
            Mark the start of a transaction block
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Unwatch">
            <summary>
            Forget about all watched keys
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.Watch(System.String[])">
            <summary>
            Watch the given keys to determine execution of the MULTI/EXEC block
            </summary>
            <param name="keys">Keys to watch</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfAdd(System.String,System.Object[])">
            <summary>
            Adds the specified elements to the specified HyperLogLog.
            </summary>
            <param name="key">Key to update</param>
            <param name="elements">Elements to add</param>
            <returns>1 if at least 1 HyperLogLog internal register was altered. 0 otherwise.</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfCount(System.String[])">
            <summary>
            Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s)
            </summary>
            <param name="keys">One or more HyperLogLog keys to examine</param>
            <returns>Approximated number of unique elements observed via PFADD</returns>
        </member>
        <member name="M:CSRedis.RedisClient.PfMerge(System.String,System.String[])">
            <summary>
            Merge N different HyperLogLogs into a single key.
            </summary>
            <param name="destKey">Where to store the merged HyperLogLogs</param>
            <param name="sourceKeys">The HyperLogLogs keys that will be combined</param>
            <returns>Status code</returns>
        </member>
        <member name="T:CSRedis.RedisSentinelClient">
            <summary>
            Represents a client connection to a Redis sentinel instance
            </summary>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.ConnectAsync">
            <summary>
            Connect to the remote host
            </summary>
            <returns>True if connected</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.CallAsync(System.String,System.String[])">
            <summary>
            Call arbitrary Sentinel command (e.g. for a command not yet implemented in this library)
            </summary>
            <param name="command">The name of the command</param>
            <param name="args">Array of arguments to the command</param>
            <returns>Redis unified response</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.PingAsync">
            <summary>
            Ping the Sentinel server
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.MastersAsync">
            <summary>
            Get a list of monitored Redis masters
            </summary>
            <returns>Redis master info</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.MasterAsync(System.String)">
            <summary>
            Get information on the specified Redis master
            </summary>
            <param name="masterName">Name of the Redis master</param>
            <returns>Master information</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.SentinelsAsync(System.String)">
            <summary>
            Get a list of other Sentinels known to the current Sentinel
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>Sentinel hosts and ports</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.SlavesAsync(System.String)">
            <summary>
            Get a list of monitored Redis slaves to the given master 
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>Redis slave info</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.GetMasterAddrByNameAsync(System.String)">
            <summary>
            Get the IP and port of the current master Redis server
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>IP and port of master Redis server</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.IsMasterDownByAddrAsync(System.String,System.Int32,System.Int64,System.String)">
            <summary>
            Get master state information
            </summary>
            <param name="ip">Host IP</param>
            <param name="port">Host port</param>
            <param name="currentEpoch">Current epoch</param>
            <param name="runId">Run ID</param>
            <returns>Master state</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.ResetAsync(System.String)">
            <summary>
            Clear state in all masters with matching name
            </summary>
            <param name="pattern">Master name pattern</param>
            <returns>Number of masters that were reset</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.FailoverAsync(System.String)">
            <summary>
            Force a failover as if the master was not reachable, and without asking for agreement from other sentinels
            </summary>
            <param name="masterName">Master name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.MonitorAsync(System.String,System.Int32,System.Int32)">
            <summary>
            Start monitoring a new master
            </summary>
            <param name="name">Master name</param>
            <param name="port">Master port</param>
            <param name="quorum">Quorum count</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.RemoveAsync(System.String)">
            <summary>
            Remove the specified master
            </summary>
            <param name="name">Master name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.SetAsync(System.String,System.String,System.String)">
            <summary>
            Change configuration parameters of a specific master
            </summary>
            <param name="masterName">Master name</param>
            <param name="option">Config option name</param>
            <param name="value">Config option value</param>
            <returns>Status code</returns>
        </member>
        <member name="E:CSRedis.RedisSentinelClient.SubscriptionReceived">
            <summary>
            Occurs when a subscription message is received
            </summary>
        </member>
        <member name="E:CSRedis.RedisSentinelClient.SubscriptionChanged">
            <summary>
            Occurs when a subscription channel is added or removed
            </summary>
        </member>
        <member name="E:CSRedis.RedisSentinelClient.Reconnected">
            <summary>
            Occurs when the connection has sucessfully reconnected
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.Host">
            <summary>
            Get the Redis sentinel hostname
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.Port">
            <summary>
            Get the Redis sentinel port
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.Connected">
            <summary>
            Get a value indicating whether the Redis sentinel client is connected to the server
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.Encoding">
            <summary>
            Get the string encoding used to communicate with the server
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.ReceiveTimeout">
            <summary>
            Get or set the connection read timeout (milliseconds)
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.SendTimeout">
            <summary>
            Get or set the connection send timeout (milliseconds)
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.ReconnectAttempts">
            <summary>
            Get or set the number of times to attempt a reconnect after a connection fails
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelClient.ReconnectWait">
            <summary>
            Get or set the amount of time to wait between reconnect attempts
            </summary>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.#ctor(System.String)">
            <summary>
            Create a new RedisSentinelClient using default port and encoding
            </summary>
            <param name="host">Redis sentinel hostname</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.#ctor(System.String,System.Int32)">
            <summary>
            Create a new RedisSentinelClient using default encoding
            </summary>
            <param name="host">Redis sentinel hostname</param>
            <param name="port">Redis sentinel port</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.#ctor(System.String,System.Int32,System.Boolean)">
            <summary>
            Create a new RedisSentinelClient using default encoding
            </summary>
            <param name="host">Redis sentinel hostname</param>
            <param name="port">Redis sentinel port</param>
            <param name="ssl">Set to true if remote Redis server expects SSL</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Dispose">
            <summary>
            Release resoures used by the current RedisSentinelClient
            </summary>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Connect(System.Int32)">
            <summary>
            Connect to the remote host
            </summary>
            <param name="timeout">Connection timeout in milliseconds</param>
            <returns>True if connected</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Call(System.String,System.String[])">
            <summary>
            Call arbitrary Sentinel command (e.g. for a command not yet implemented in this library)
            </summary>
            <param name="command">The name of the command</param>
            <param name="args">Array of arguments to the command</param>
            <returns>Redis unified response</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Ping">
            <summary>
            Ping the Sentinel server
            </summary>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Masters">
            <summary>
            Get a list of monitored Redis masters
            </summary>
            <returns>Redis master info</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Master(System.String)">
            <summary>
            Get information on the specified Redis master
            </summary>
            <param name="masterName">Name of the Redis master</param>
            <returns>Master information</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Sentinels(System.String)">
            <summary>
            Get a list of other Sentinels known to the current Sentinel
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>Sentinel hosts and ports</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Slaves(System.String)">
            <summary>
            Get a list of monitored Redis slaves to the given master 
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>Redis slave info</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.GetMasterAddrByName(System.String)">
            <summary>
            Get the IP and port of the current master Redis server
            </summary>
            <param name="masterName">Name of monitored master</param>
            <returns>IP and port of master Redis server</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Subscribe(System.String[])">
            <summary>
            Open one or more subscription channels to Redis Sentinel server
            </summary>
            <param name="channels">Name of channels to open (refer to http://redis.io/ for channel names)</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Unsubscribe(System.String[])">
            <summary>
            Close one or more subscription channels to Redis Sentinel server
            </summary>
            <param name="channels">Name of channels to close</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.PSubscribe(System.String[])">
            <summary>
            Open one or more subscription channels to Redis Sentinel server
            </summary>
            <param name="channelPatterns">Pattern of channels to open (refer to http://redis.io/ for channel names)</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.PUnsubscribe(System.String[])">
            <summary>
            Close one or more subscription channels to Redis Sentinel server
            </summary>
            <param name="channelPatterns">Pattern of channels to close</param>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.IsMasterDownByAddr(System.String,System.Int32,System.Int64,System.String)">
            <summary>
            Get master state information
            </summary>
            <param name="ip">Host IP</param>
            <param name="port">Host port</param>
            <param name="currentEpoch">Current epoch</param>
            <param name="runId">Run ID</param>
            <returns>Master state</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Reset(System.String)">
            <summary>
            Clear state in all masters with matching name
            </summary>
            <param name="pattern">Master name pattern</param>
            <returns>Number of masters that were reset</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Failover(System.String)">
            <summary>
            Force a failover as if the master was not reachable, and without asking for agreement from other sentinels
            </summary>
            <param name="masterName">Master name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Monitor(System.String,System.Int32,System.Int32)">
            <summary>
            Start monitoring a new master
            </summary>
            <param name="name">Master name</param>
            <param name="port">Master port</param>
            <param name="quorum">Quorum count</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Remove(System.String)">
            <summary>
            Remove the specified master
            </summary>
            <param name="name">Master name</param>
            <returns>Status code</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelClient.Set(System.String,System.String,System.String)">
            <summary>
            Change configuration parameters of a specific master
            </summary>
            <param name="masterName">Master name</param>
            <param name="option">Config option name</param>
            <param name="value">Config option value</param>
            <returns>Status code</returns>
        </member>
        <member name="T:CSRedis.SentinelMasterConverter">
            <summary>
            哨兵主机转换委托
            </summary>
            <param name="master">哨兵返回的主机信息</param>
            <returns>客户端可连接的主机信息</returns>
        </member>
        <member name="T:CSRedis.RedisSentinelManager">
            <summary>
            Represents a managed connection to a Redis master instance via a set of Redis sentinel nodes
            </summary>
        </member>
        <member name="E:CSRedis.RedisSentinelManager.Connected">
            <summary>
            Occurs when the master connection has sucessfully connected
            </summary>
        </member>
        <member name="M:CSRedis.RedisSentinelManager.#ctor(System.Boolean,System.String[])">
            <summary>
            Create a new RedisSentinenlManager
            </summary>
            <param name="sentinels">Sentinel addresses (host:ip)</param>
        </member>
        <member name="M:CSRedis.RedisSentinelManager.Add(System.String)">
            <summary>
            Add a new sentinel host using default port
            </summary>
            <param name="host">Sentinel hostname</param>
        </member>
        <member name="M:CSRedis.RedisSentinelManager.Add(System.String,System.Int32)">
            <summary>
            Add a new sentinel host
            </summary>
            <param name="host">Sentinel hostname</param>
            <param name="port">Sentinel port</param>
        </member>
        <member name="M:CSRedis.RedisSentinelManager.Connect(System.String,System.Int32)">
            <summary>
            Obtain connection to the specified master node
            </summary>
            <param name="masterName">Name of Redis master</param>
            <param name="timeout">Connection timeout (milliseconds)</param>
            <returns>host:port of Master server that responded</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelManager.Call``1(System.Func{CSRedis.RedisClient,``0})">
            <summary>
            Execute command against the master, reconnecting if necessary
            </summary>
            <typeparam name="T">Command return type</typeparam>
            <param name="redisAction">Command to execute</param>
            <returns>Command result</returns>
        </member>
        <member name="M:CSRedis.RedisSentinelManager.Dispose">
            <summary>
            Release resources held by the current RedisSentinelManager
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelManager.SentinelMasterConverter">
            <summary>
            哨兵主机转换委托
            </summary>
            <value>客户端可识别的主机转换委托</value>
        </member>
        <member name="T:CSRedis.RedisObjectSubCommand">
            <summary>
            Sub-command used by Redis OBJECT command
            </summary>
        </member>
        <member name="F:CSRedis.RedisObjectSubCommand.RefCount">
            <summary>
            Return the number of references of the value associated with the specified key
            </summary>
        </member>
        <member name="F:CSRedis.RedisObjectSubCommand.IdleTime">
            <summary>
            Return the number of seconds since the object stored at the specified key is idle
            </summary>
        </member>
        <member name="T:CSRedis.RedisSortDir">
            <summary>
            Sort direction used by Redis SORT command
            </summary>
        </member>
        <member name="F:CSRedis.RedisSortDir.Asc">
            <summary>
            Sort ascending (a-z)
            </summary>
        </member>
        <member name="F:CSRedis.RedisSortDir.Desc">
            <summary>
            Sort descending (z-a)
            </summary>
        </member>
        <member name="T:CSRedis.RedisInsert">
            <summary>
            Insert position used by Redis LINSERT command
            </summary>
        </member>
        <member name="F:CSRedis.RedisInsert.Before">
            <summary>
            Insert before pivot element
            </summary>
        </member>
        <member name="F:CSRedis.RedisInsert.After">
            <summary>
            Insert after pivot element
            </summary>
        </member>
        <member name="T:CSRedis.RedisBitOp">
            <summary>
            Operation used by Redis BITOP command
            </summary>
        </member>
        <member name="F:CSRedis.RedisBitOp.And">
            <summary>
            Bitwise AND
            </summary>
        </member>
        <member name="F:CSRedis.RedisBitOp.Or">
            <summary>
            Bitwise OR
            </summary>
        </member>
        <member name="F:CSRedis.RedisBitOp.XOr">
            <summary>
            Bitwise EXCLUSIVE-OR
            </summary>
        </member>
        <member name="F:CSRedis.RedisBitOp.Not">
            <summary>
            Bitwise NOT
            </summary>
        </member>
        <member name="T:CSRedis.RedisAggregate">
            <summary>
            Aggregation function used by Reids set operations
            </summary>
        </member>
        <member name="F:CSRedis.RedisAggregate.Sum">
            <summary>
            Aggregate SUM
            </summary>
        </member>
        <member name="F:CSRedis.RedisAggregate.Min">
            <summary>
            Aggregate MIN
            </summary>
        </member>
        <member name="F:CSRedis.RedisAggregate.Max">
            <summary>
            Aggregate MAX
            </summary>
        </member>
        <member name="T:CSRedis.RedisMessage">
            <summary>
            Redis unified message prefix
            </summary>
        </member>
        <member name="F:CSRedis.RedisMessage.Error">
            <summary>
            Error message
            </summary>
        </member>
        <member name="F:CSRedis.RedisMessage.Status">
            <summary>
            Status message
            </summary>
        </member>
        <member name="F:CSRedis.RedisMessage.Bulk">
            <summary>
            Bulk message
            </summary>
        </member>
        <member name="F:CSRedis.RedisMessage.MultiBulk">
            <summary>
            Multi bulk message
            </summary>
        </member>
        <member name="F:CSRedis.RedisMessage.Int">
            <summary>
            Int message
            </summary>
        </member>
        <member name="T:CSRedis.RedisSubscriptionResponseType">
            <summary>
            Redis subscription response type
            </summary>
        </member>
        <member name="F:CSRedis.RedisSubscriptionResponseType.Subscribe">
            <summary>
            Channel subscribed
            </summary>
        </member>
        <member name="F:CSRedis.RedisSubscriptionResponseType.Message">
            <summary>
            Message published
            </summary>
        </member>
        <member name="F:CSRedis.RedisSubscriptionResponseType.Unsubscribe">
            <summary>
            Channel unsubscribed
            </summary>
        </member>
        <member name="F:CSRedis.RedisSubscriptionResponseType.PSubscribe">
            <summary>
            Channel pattern subscribed
            </summary>
        </member>
        <member name="F:CSRedis.RedisSubscriptionResponseType.PMessage">
            <summary>
            Message published to channel pattern
            </summary>
        </member>
        <member name="F:CSRedis.RedisSubscriptionResponseType.PUnsubscribe">
            <summary>
            Channel pattern unsubsribed
            </summary>
        </member>
        <member name="T:CSRedis.RedisExistence">
            <summary>
            Redis existence specification for SET command
            </summary>
        </member>
        <member name="F:CSRedis.RedisExistence.Nx">
            <summary>
            Only set the key if it does not already exist
            </summary>
        </member>
        <member name="F:CSRedis.RedisExistence.Xx">
            <summary>
            Only set the key if it already exists
            </summary>
        </member>
        <member name="T:CSRedis.RedisRole">
            <summary>
            Base class for Redis role information
            </summary>
        </member>
        <member name="P:CSRedis.RedisRole.RoleName">
            <summary>
            Get the role type
            </summary>
        </member>
        <member name="T:CSRedis.RedisMasterRole">
            <summary>
            Represents information on the Redis master role
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterRole.ReplicationOffset">
            <summary>
            Get the master replication offset
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterRole.Slaves">
            <summary>
            Get the slaves associated with the current master
            </summary>
        </member>
        <member name="T:CSRedis.RedisSlaveRole">
            <summary>
            Represents information on the Redis slave role
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveRole.MasterIp">
            <summary>
            Get the IP address of the master node
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveRole.MasterPort">
            <summary>
            Get the port of the master node
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveRole.ReplicationState">
            <summary>
            Get the replication state
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveRole.DataReceived">
            <summary>
            Get the number of bytes received
            </summary>
        </member>
        <member name="T:CSRedis.RedisSentinelRole">
            <summary>
            Represents information on the Redis sentinel role
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelRole.Masters">
            <summary>
            Get the masters known to the current Sentinel
            </summary>
        </member>
        <member name="T:CSRedis.RedisScan`1">
            <summary>
            Represents the result of a Redis SCAN or SSCAN operation
            </summary>
        </member>
        <member name="P:CSRedis.RedisScan`1.Cursor">
            <summary>
            Updated cursor that should be used as the cursor argument in the next call
            </summary>
        </member>
        <member name="P:CSRedis.RedisScan`1.Items">
            <summary>
            Collection of elements returned by the SCAN operation
            </summary>
        </member>
        <member name="T:CSRedis.RedisSubscriptionResponse">
            <summary>
            Represents a Redis subscription response
            </summary>
        </member>
        <member name="P:CSRedis.RedisSubscriptionResponse.Channel">
            <summary>
            Get the subscription channel name
            </summary>
        </member>
        <member name="P:CSRedis.RedisSubscriptionResponse.Pattern">
            <summary>
            Get the subscription pattern
            </summary>
        </member>
        <member name="P:CSRedis.RedisSubscriptionResponse.Type">
            <summary>
            Get the message type
            </summary>
        </member>
        <member name="T:CSRedis.RedisSubscriptionChannel">
            <summary>
            Represents a Redis subscription channel
            </summary>
        </member>
        <member name="P:CSRedis.RedisSubscriptionChannel.Count">
            <summary>
            Get the count of active subscriptions
            </summary>
        </member>
        <member name="T:CSRedis.RedisSubscriptionMessage">
            <summary>
            Represents a Redis subscription message
            </summary>
        </member>
        <member name="P:CSRedis.RedisSubscriptionMessage.Body">
            <summary>
            Get the subscription message
            </summary>
        </member>
        <member name="T:CSRedis.RedisServerInfo">
            <summary>
            Base class for Redis server-info objects reported by Sentinel
            </summary>
        </member>
        <member name="M:CSRedis.RedisServerInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create new RedisServerInfo via deserialization
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="P:CSRedis.RedisServerInfo.Name">
            <summary>
            Get or set Redis server name
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.Ip">
            <summary>
            Get or set Redis server IP
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.Port">
            <summary>
            Get or set Redis server port
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.RunId">
            <summary>
            Get or set Redis server run ID
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.Flags">
            <summary>
            Get or set Redis server flags
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.PendingCommands">
            <summary>
            Get or set number of pending Redis server commands
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.LastPingSent">
            <summary>
            Get or set last ping sent
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.LastOkPingReply">
            <summary>
            Get or set milliseconds since last successful ping reply
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.LastPingReply">
            <summary>
            Get or set milliseconds since last ping reply
            </summary>
        </member>
        <member name="P:CSRedis.RedisServerInfo.DownAfterMilliseconds">
            <summary>
            Get or set down after milliseconds
            </summary>
        </member>
        <member name="M:CSRedis.RedisServerInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Not implemented
            </summary>
            <param name="info">info</param>
            <param name="context">info</param>
        </member>
        <member name="T:CSRedis.RedisMasterSlaveInfo">
            <summary>
            Base class for Redis master/slave objects reported by Sentinel
            </summary>
        </member>
        <member name="M:CSRedis.RedisMasterSlaveInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create new RedisMasterSlaveInfo via deserialization
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="P:CSRedis.RedisMasterSlaveInfo.InfoRefresh">
            <summary>
            Get or set info refresh
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterSlaveInfo.RoleReported">
            <summary>
            Get or set role reported
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterSlaveInfo.RoleReportedTime">
            <summary>
            Get or set role reported time
            </summary>
        </member>
        <member name="T:CSRedis.RedisMasterInfo">
            <summary>
            Represents a Redis master node as reported by a Redis Sentinel
            </summary>
        </member>
        <member name="M:CSRedis.RedisMasterInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create new RedisMasterInfo via deserialization
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="P:CSRedis.RedisMasterInfo.ConfigEpoch">
            <summary>
            Get or set the config epoch
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterInfo.NumSlaves">
            <summary>
            Get or set number of slaves of the current master node
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterInfo.NumOtherSentinels">
            <summary>
            Get or set number of other Sentinels
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterInfo.Quorum">
            <summary>
            Get or set Sentinel quorum count
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterInfo.FailoverTimeout">
            <summary>
            Get or set the failover timeout
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterInfo.ParallelSyncs">
            <summary>
            Get or set the parallel syncs
            </summary>
        </member>
        <member name="T:CSRedis.RedisSlaveInfo">
            <summary>
            Represents a Redis slave node as reported by a Redis Setinel
            </summary>
        </member>
        <member name="M:CSRedis.RedisSlaveInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create new RedisSlaveInfo via deserialization
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="P:CSRedis.RedisSlaveInfo.MasterLinkDownTime">
            <summary>
            Get or set the master link down time
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveInfo.MasterLinkStatus">
            <summary>
            Get or set status of master link
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveInfo.MasterHost">
            <summary>
            Get or set the master host of the current Redis slave node
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveInfo.MasterPort">
            <summary>
            Get or set the master port of the current Redis slave node
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveInfo.SlavePriority">
            <summary>
            Get or set the priority of the current Redis slave node
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlaveInfo.SlaveReplOffset">
            <summary>
            Get or set the slave replication offset
            </summary>
        </member>
        <member name="T:CSRedis.RedisSentinelInfo">
            <summary>
            Represents a Redis Sentinel node as reported by a Redis Sentinel
            </summary>
        </member>
        <member name="M:CSRedis.RedisSentinelInfo.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Create new RedisSentinelInfo via deserialization
            </summary>
            <param name="info">Serialization info</param>
            <param name="context">Serialization context</param>
        </member>
        <member name="M:CSRedis.RedisSentinelInfo.GetSerializationItemValue``1(System.Runtime.Serialization.SerializationInfo,System.String)">
            <summary>
            Get a value from an instance of the SerializationInfo
            </summary>
            <typeparam name="T"></typeparam>
            <param name="info"></param>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="P:CSRedis.RedisSentinelInfo.SDownTime">
            <summary>
            Get or set the subjective down time
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelInfo.LastHelloMessage">
            <summary>
            Get or set milliseconds(?) since last hello message from current Sentinel node
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelInfo.VotedLeader">
            <summary>
            Get or set the voted-leader value
            </summary>
        </member>
        <member name="P:CSRedis.RedisSentinelInfo.VotedLeaderEpoch">
            <summary>
            Get or set the voted-leader epoch
            </summary>
        </member>
        <member name="T:CSRedis.RedisSlowLogEntry">
            <summary>
            Represents an entry from the Redis slow log
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlowLogEntry.Id">
            <summary>
            Get the entry ID
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlowLogEntry.Date">
            <summary>
            Get the entry date
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlowLogEntry.Latency">
            <summary>
            Get the entry latency
            </summary>
        </member>
        <member name="P:CSRedis.RedisSlowLogEntry.Arguments">
            <summary>
            Get the entry arguments
            </summary>
        </member>
        <member name="T:CSRedis.RedisMasterState">
            <summary>
            Represents state as reported by Sentinel
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterState.DownState">
            <summary>
            Get the master down state
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterState.Leader">
            <summary>
            Get the leader
            </summary>
        </member>
        <member name="P:CSRedis.RedisMasterState.VoteEpoch">
            <summary>
            Get the vote epoch
            </summary>
        </member>
        <member name="F:RedisHelper`1.NeverExpired">
            <summary>
            永不过期
            </summary>
        </member>
        <member name="M:RedisHelper`1.RandomExpired(System.Int32,System.Int32)">
            <summary>
            随机秒（防止所有key同一时间过期，雪崩）
            </summary>
            <param name="minTimeoutSeconds">最小秒数</param>
            <param name="maxTimeoutSeconds">最大秒数</param>
            <returns></returns>
        </member>
        <member name="P:RedisHelper`1.Instance">
            <summary>
            CSRedisClient 静态实例，使用前请初始化
            RedisHelper.Initialization(new CSRedis.CSRedisClient(\"127.0.0.1:6379,pass=123,defaultDatabase=13,poolsize=50,ssl=false,writeBuffer=10240,prefix=key前辍\"))
            </summary>
        </member>
        <member name="P:RedisHelper`1.Prefix">
            <summary>
            获取连接字符串指定的prefix前缀
            </summary>
        </member>
        <member name="M:RedisHelper`1.Initialization(CSRedis.CSRedisClient)">
            <summary>
            初始化csredis静态访问类
            RedisHelper.Initialization(new CSRedis.CSRedisClient(\"127.0.0.1:6379,pass=123,defaultDatabase=13,poolsize=50,ssl=false,writeBuffer=10240,prefix=key前辍\"))
            </summary>
            <param name="csredis"></param>
        </member>
        <member name="M:RedisHelper`1.CacheShell``1(System.String,System.Int32,System.Func{``0})">
            <summary>
            缓存壳
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.CacheShell``1(System.String,System.String,System.Int32,System.Func{``0})">
            <summary>
            缓存壳(哈希表)
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.CacheShell``1(System.String,System.String[],System.Int32,System.Func{System.String[],System.ValueTuple{System.String,``0}[]})">
            <summary>
            缓存壳(哈希表)，将 fields 每个元素存储到单独的缓存片，实现最大化复用
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getData">获取源数据的函数，输入参数是没有缓存的 fields，返回值应该是 (field, value)[]</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.StartPipe(System.Action{CSRedis.CSRedisClientPipe{System.String}})">
            <summary>
            创建管道传输
            </summary>
            <param name="handler"></param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.StartPipe">
            <summary>
            创建管道传输，打包提交如：RedisHelper.StartPipe().Set("a", "1").HSet("b", "f", "2").EndPipe();
            </summary>
            <returns></returns>
        </member>
        <member name="P:RedisHelper`1.NodesServerManager">
            <summary>
            在所有分区节点上，执行服务器命令
            </summary>
        </member>
        <member name="M:RedisHelper`1.NodeServerManager(System.String)">
            <summary>
            在指定分区节点上，执行服务器命令
            </summary>
            <param name="node">节点</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Echo(System.String,System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Echo(System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Ping(System.String)">
            <summary>
            查看服务是否运行
            </summary>
            <param name="nodeKey">分区key</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Ping">
            <summary>
            查看服务是否运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Eval(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="script">Lua 脚本</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.EvalSHA(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ScriptExists(System.String[])">
            <summary>
            校验所有分区节点中，脚本是否已经缓存。任何分区节点未缓存sha1，都返回false。
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ScriptFlush">
            <summary>
            清除所有分区节点中，所有 Lua 脚本缓存
            </summary>
        </member>
        <member name="M:RedisHelper`1.ScriptKill">
            <summary>
            杀死所有分区节点中，当前正在运行的 Lua 脚本
            </summary>
        </member>
        <member name="M:RedisHelper`1.ScriptLoad(System.String)">
            <summary>
            在所有分区节点中，缓存脚本后返回 sha1（同样的脚本在任何服务器，缓存后的 sha1 都是相同的）
            </summary>
            <param name="script">Lua 脚本</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Publish(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，最终消息发布格式：1|message
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PublishNoneMessageId(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，与 Publish 方法不同，不返回消息id头，即 1|
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PubSubChannels(System.String)">
            <summary>
            查看所有订阅频道
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PubSubNumPat">
            <summary>
            查看所有模糊订阅端的数量<para></para>
            注意：分区模式下，其他客户端的订阅可能不会返回
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PubSubNumSub(System.String[])">
            <summary>
            查看所有订阅端的数量<para></para>
            注意：分区模式下，其他客户端的订阅可能不会返回
            </summary>
            <param name="channels">频道</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Subscribe(System.ValueTuple{System.String,System.Action{CSRedis.CSRedisClient.SubscribeMessageEventArgs}}[])">
            <summary>
            订阅，根据分区规则返回SubscribeObject，Subscribe(("chan1", msg => Console.WriteLine(msg.Body)), ("chan2", msg => Console.WriteLine(msg.Body)))
            </summary>
            <param name="channels">频道和接收器</param>
            <returns>返回可停止订阅的对象</returns>
        </member>
        <member name="M:RedisHelper`1.PSubscribe(System.String[],System.Action{CSRedis.CSRedisClient.PSubscribePMessageEventArgs})">
            <summary>
            模糊订阅，订阅所有分区节点(同条消息只处理一次），返回SubscribeObject，PSubscribe(new [] { "chan1*", "chan2*" }, msg => Console.WriteLine(msg.Body))
            </summary>
            <param name="channelPatterns">模糊频道</param>
            <param name="pmessage">接收器</param>
            <returns>返回可停止模糊订阅的对象</returns>
        </member>
        <member name="M:RedisHelper`1.SubscribeListBroadcast(System.String,System.String,System.Action{System.String})">
            <summary>
            使用lpush + blpop订阅端（多端非争抢模式），都可以收到消息
            </summary>
            <param name="listKey">list key（不含prefix前辍）</param>
            <param name="clientId">订阅端标识，若重复则争抢，若唯一必然收到消息</param>
            <param name="onMessage">接收消息委托</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SubscribeList(System.String,System.Action{System.String})">
            <summary>
            使用lpush + blpop订阅端（多端争抢模式），只有一端收到消息
            </summary>
            <param name="listKey">list key（不含prefix前辍）</param>
            <param name="onMessage">接收消息委托</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SubscribeList(System.String[],System.Action{System.String,System.String})">
            <summary>
            使用lpush + blpop订阅端（多端争抢模式），只有一端收到消息
            </summary>
            <param name="listKeys">支持多个 key（不含prefix前辍）</param>
            <param name="onMessage">接收消息委托，参数1：key；参数2：消息体</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PfAdd``1(System.String,``0[])">
            <summary>
            添加指定元素到 HyperLogLog
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PfCount(System.String[])">
            <summary>
            返回给定 HyperLogLog 的基数估算值<para></para>
            注意：分区模式下，若keys分散在多个分区节点时，将报错
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PfMerge(System.String,System.String[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog<para></para>
            注意：分区模式下，若keys分散在多个分区节点时，将报错
            </summary>
            <param name="destKey">新的 HyperLogLog，不含prefix前辍</param>
            <param name="sourceKeys">源 HyperLogLog，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZAdd(System.String,System.ValueTuple{System.Decimal,System.Object}[])">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="scoreMembers">一个或多个成员分数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZCard(System.String)">
            <summary>
            获取有序集合的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZCount(System.String,System.Decimal,System.Decimal)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZCount(System.String,System.String,System.String)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZIncrBy(System.String,System.String,System.Decimal)">
            <summary>
            有序集合中对指定成员的分数加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="increment">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZInterStore(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的交集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRange(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByScore(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByScore``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByScoreWithScores(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByScoreWithScores``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRank(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的索引
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRem``1(System.String,``0[])">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRemRangeByRank(System.String,System.Int64,System.Int64)">
            <summary>
            移除有序集合中给定的排名区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRemRangeByScore(System.String,System.Decimal,System.Decimal)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRemRangeByScore(System.String,System.String,System.String)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeWithScores(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeWithScores``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeByScore(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeByScore``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeByScore(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeByScore``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeByScoreWithScores(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeByScoreWithScores``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeByScoreWithScores(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeByScoreWithScores``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRank(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZScore(System.String,System.Object)">
            <summary>
            返回有序集中，成员的分数值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZUnionStore(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的并集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByLex(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByLex``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRemRangeByLex(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZLexCount(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZPopMax(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZPopMax``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZPopMin(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZPopMin``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SAdd``1(System.String,``0[])">
            <summary>
            向集合添加一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SCard(System.String)">
            <summary>
            获取集合的成员数
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SDiff(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SDiff``1(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SDiffStore(System.String,System.String[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SInter(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SInter``1(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SInterStore(System.String,System.String[])">
            <summary>
            返回给定所有集合的交集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SIsMember(System.String,System.Object)">
            <summary>
            判断 member 元素是否是集合 key 的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SMembers(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SMembers``1(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SMove(System.String,System.String,System.Object)">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合
            </summary>
            <param name="source">无序集合key，不含prefix前辍</param>
            <param name="destination">目标无序集合key，不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SPop(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SPop``1(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SPop(System.String,System.Int64)">
            <summary>
            [redis-server 3.2] 移除并返回集合中的一个或多个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除并返回的个数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SPop``1(System.String,System.Int64)">
            <summary>
            [redis-server 3.2] 移除并返回集合中的一个或多个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除并返回的个数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SRandMember(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SRandMember``1(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SRandMembers(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SRandMembers``1(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SRem``1(System.String,``0[])">
            <summary>
            移除集合中一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SUnion(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SUnion``1(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SUnionStore(System.String,System.String[])">
            <summary>
            所有给定集合的并集存储在 destination 集合中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.BLPopWithKey(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.BLPopWithKey``1(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.BLPop(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.BLPop``1(System.Int32,System.String[])">
            <summary>
            它是 LPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BLPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.BRPopWithKey(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.BRPopWithKey``1(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.BRPop(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.BRPop``1(System.Int32,System.String[])">
            <summary>
            它是 RPOP 命令的阻塞版本，当给定列表内没有任何元素可供弹出的时候，连接将被 BRPOP 命令阻塞，直到等待超时或发现可弹出元素为止，超时返回null
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="timeout">超时(秒)</param>
            <param name="keys">一个或多个列表，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.BRPopLPush(System.String,System.String,System.Int32)">
            <summary>
            BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本，当给定列表 source 不为空时， BRPOPLPUSH 的表现和 RPOPLPUSH 一样。
            当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH 或 RPUSH 命令为止。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="timeout">超时(秒)</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.BRPopLPush``1(System.String,System.String,System.Int32)">
            <summary>
            BRPOPLPUSH 是 RPOPLPUSH 的阻塞版本，当给定列表 source 不为空时， BRPOPLPUSH 的表现和 RPOPLPUSH 一样。
            当列表 source 为空时， BRPOPLPUSH 命令将阻塞连接，直到等待超时，或有另一个客户端对 source 执行 LPUSH 或 RPUSH 命令为止。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="timeout">超时(秒)</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LIndex(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LIndex``1(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LInsertBefore(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素前面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LInsertAfter(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素后面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LLen(System.String)">
            <summary>
            获取列表长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LPop(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LPop``1(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LPush``1(System.String,``0[])">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 LPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:RedisHelper`1.LPushX(System.String,System.Object)">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns>执行 LPUSHX 命令后，列表的长度。</returns>
        </member>
        <member name="M:RedisHelper`1.LRange(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LRem(System.String,System.Int64,System.Object)">
            <summary>
            根据参数 count 的值，移除列表中与参数 value 相等的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除的数量，大于0时从表头删除数量count，小于0时从表尾删除数量-count，等于0移除所有</param>
            <param name="value">元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LSet(System.String,System.Int64,System.Object)">
            <summary>
            通过索引设置列表元素的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LTrim(System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.RPop(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.RPop``1(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.RPopLPush(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.RPopLPush``1(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.RPush``1(System.String,``0[])">
            <summary>
            在列表中添加一个或多个值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:RedisHelper`1.RPushX(System.String,System.Object)">
            <summary>
            为已存在的列表添加值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSHX 命令后，列表的长度</returns>
        </member>
        <member name="M:RedisHelper`1.HDel(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HExists(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HGet(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HGet``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HGetAll(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HGetAll``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HIncrBy(System.String,System.String,System.Int64)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HIncrByFloat(System.String,System.String,System.Decimal)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HKeys(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HLen(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HMGet(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HMGet``1(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">一个或多个字段</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HMSet(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HSet(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值</param>
            <returns>如果字段是哈希表中的一个新建字段，并且值设置成功，返回true。如果哈希表中域字段已经存在且旧值已被新值覆盖，返回false。</returns>
        </member>
        <member name="M:RedisHelper`1.HSetNx(System.String,System.String,System.Object)">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值(string 或 byte[])</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HVals(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HVals``1(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HScan(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HScan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Append(System.String,System.Object)">
            <summary>
            如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">字符串</param>
            <returns>追加指定值之后， key 中字符串的长度</returns>
        </member>
        <member name="M:RedisHelper`1.BitCount(System.String,System.Int64,System.Int64)">
            <summary>
            计算给定位置被设置为 1 的比特位的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置</param>
            <param name="end">结束位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.BitOp(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上
            </summary>
            <param name="op">And | Or | XOr | Not</param>
            <param name="destKey">不含prefix前辍</param>
            <param name="keys">不含prefix前辍</param>
            <returns>保存到 destkey 的长度，和输入 key 中最长的长度相等</returns>
        </member>
        <member name="M:RedisHelper`1.BitPos(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            对 key 所储存的值，查找范围内第一个被设置为1或者0的bit位
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="bit">查找值</param>
            <param name="start">开始位置，-1是最后一个，-2是倒数第二个</param>
            <param name="end">结果位置，-1是最后一个，-2是倒数第二个</param>
            <returns>返回范围内第一个被设置为1或者0的bit位</returns>
        </member>
        <member name="M:RedisHelper`1.Get(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Get``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Get(System.String,System.IO.Stream,System.Int32)">
            <summary>
            获取指定 key 的值（适用大对象返回）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="destination">读取后写入目标流中</param>
            <param name="bufferSize">读取缓冲区</param>
        </member>
        <member name="M:RedisHelper`1.GetBit(System.String,System.UInt32)">
            <summary>
            对 key 所储存的值，获取指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GetRange(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GetRange``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GetSet(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GetSet``1(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.IncrBy(System.String,System.Int64)">
            <summary>
            将 key 所储存的值加上给定的增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.IncrByFloat(System.String,System.Decimal)">
            <summary>
            将 key 所储存的值加上给定的浮点增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.MGet(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.MGet``1(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.MSet(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.MSetNx(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Set(System.String,System.Object,System.Int32,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <param name="expireSeconds">过期(秒单位)</param>
            <param name="exists">Nx, Xx</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SetBit(System.String,System.UInt32,System.Boolean)">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SetNx(System.String,System.Object)">
            <summary>
            只有在 key 不存在时设置 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SetRange(System.String,System.UInt32,System.Object)">
            <summary>
            用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns>被修改后的字符串长度</returns>
        </member>
        <member name="M:RedisHelper`1.StrLen(System.String)">
            <summary>
            返回 key 所储存的字符串值的长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Del(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Dump(System.String)">
            <summary>
            序列化给定 key ，并返回被序列化的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Exists(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Exists(System.String[])">
            <summary>
            [redis-server 3.0] 检查给定多个 key 是否存在
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Expire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="seconds">过期秒数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Expire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Keys(System.String)">
            <summary>
            查找所有分区节点中符合给定模式(pattern)的 key
            <para>Keys方法返回的keys[]包含prefix，使用前请自行处理</para>
            </summary>
            <param name="pattern">如：runoob*</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Move(System.String,System.Int32)">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="database">数据库</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ObjectEncoding(System.String)">
            <summary>
            该返回给定 key 锁储存的值所使用的内部表示(representation)
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ObjectRefCount(System.String)">
            <summary>
            该返回给定 key 引用所储存的值的次数。此命令主要用于除错
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ObjectIdleTime(System.String)">
            <summary>
            返回给定 key 自储存以来的空转时间(idle， 没有被读取也没有被写入)，以秒为单位
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Persist(System.String)">
            <summary>
            移除 key 的过期时间，key 将持久保持
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PExpire(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="milliseconds">过期毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PExpire(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PExpireAt(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PTtl(System.String)">
            <summary>
            以毫秒为单位返回 key 的剩余的过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.RandomKey">
            <summary>
            从所有节点中随机返回一个 key
            </summary>
            <returns>返回的 key 如果包含 prefix前辍，则会去除后返回</returns>
        </member>
        <member name="M:RedisHelper`1.Rename(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.RenameNx(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Restore(System.String,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Restore(System.String,System.Int64,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="ttlMilliseconds">毫秒为单位为 key 设置生存时间</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Sort(System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            返回给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SortAndStore(System.String,System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            保存给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Ttl(System.String)">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Type(System.String)">
            <summary>
            返回 key 所储存的值的类型
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Scan(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Scan``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoAdd(System.String,System.Decimal,System.Decimal,System.Object)">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="member">成员</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:RedisHelper`1.GeoAdd(System.String,System.ValueTuple{System.Decimal,System.Decimal,System.Object}[])">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="values">批量添加的值</param>
            <returns>添加到sorted set元素的数目，但不包括已更新score的元素。</returns>
        </member>
        <member name="M:RedisHelper`1.GeoDist(System.String,System.Object,System.Object,CSRedis.GeoUnit)">
            <summary>
            返回两个给定位置之间的距离。如果两个位置之间的其中一个不存在， 那么命令返回空值。GEODIST 命令在计算距离时会假设地球为完美的球形， 在极限情况下， 这一假设最大会造成 0.5% 的误差。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member1">成员1</param>
            <param name="member2">成员2</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <returns>计算出的距离会以双精度浮点数的形式被返回。 如果给定的位置元素不存在， 那么命令返回空值。</returns>
        </member>
        <member name="M:RedisHelper`1.GeoHash(System.String,System.Object[])">
            <summary>
            返回一个或多个位置元素的 Geohash 表示。通常使用表示位置的元素使用不同的技术，使用Geohash位置52点整数编码。由于编码和解码过程中所使用的初始最小和最大坐标不同，编码的编码也不同于标准。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>一个数组， 数组的每个项都是一个 geohash 。 命令返回的 geohash 的位置与用户给定的位置元素的位置一一对应。</returns>
        </member>
        <member name="M:RedisHelper`1.GeoPos(System.String,System.Object[])">
            <summary>
            从key里返回所有给定位置元素的位置（经度和纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>GEOPOS 命令返回一个数组， 数组中的每个项都由两个元素组成： 第一个元素为给定位置元素的经度， 而第二个元素则为给定位置元素的纬度。当给定的位置元素不存在时， 对应的数组项为空值。</returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadius(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadius``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusWithDist(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusWithDist``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusWithDistAndCoord(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusWithDistAndCoord``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusByMember(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusByMember``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusByMemberWithDist(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusByMemberWithDist``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusByMemberWithDistAndCoord(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusByMemberWithDistAndCoord``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.Lock(System.String,System.Int32,System.Boolean)">
            <summary> 
            开启分布式锁，若超时返回null
            </summary>
            <param name="name">锁名称</param>
            <param name="timeoutSeconds">超时（秒）</param>
            <param name="autoDelay">自动延长锁超时时间，看门狗线程的超时时间为timeoutSeconds/2 ， 在看门狗线程超时时间时自动延长锁的时间为timeoutSeconds。除非程序意外退出，否则永不超时。</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.CacheShellAsync``1(System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            缓存壳
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.CacheShellAsync``1(System.String,System.String,System.Int32,System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            缓存壳(哈希表)
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.CacheShellAsync``1(System.String,System.String[],System.Int32,System.Func{System.String[],System.Threading.Tasks.Task{System.ValueTuple{System.String,``0}[]}})">
            <summary>
            缓存壳(哈希表)，将 fields 每个元素存储到单独的缓存片，实现最大化复用
            </summary>
            <typeparam name="T">缓存类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <param name="timeoutSeconds">缓存秒数</param>
            <param name="getDataAsync">获取源数据的函数，输入参数是没有缓存的 fields，返回值应该是 (field, value)[]</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.EchoAsync(System.String,System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="nodeKey">分区key</param>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.EchoAsync(System.String)">
            <summary>
            打印字符串
            </summary>
            <param name="message">消息</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PingAsync(System.String)">
            <summary>
            查看服务是否运行
            </summary>
            <param name="nodeKey">分区key</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PingAsync">
            <summary>
            查看服务是否运行
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.EvalAsync(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="script">Lua 脚本</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.EvalSHAAsync(System.String,System.String,System.Object[])">
            <summary>
            执行脚本
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <param name="key">用于定位分区节点，不含prefix前辍</param>
            <param name="args">参数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ScriptExistsAsync(System.String[])">
            <summary>
            校验所有分区节点中，脚本是否已经缓存。任何分区节点未缓存sha1，都返回false。
            </summary>
            <param name="sha1">脚本缓存的sha1</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ScriptFlushAsync">
            <summary>
            清除所有分区节点中，所有 Lua 脚本缓存
            </summary>
        </member>
        <member name="M:RedisHelper`1.ScriptKillAsync">
            <summary>
            杀死所有分区节点中，当前正在运行的 Lua 脚本
            </summary>
        </member>
        <member name="M:RedisHelper`1.ScriptLoadAsync(System.String)">
            <summary>
            在所有分区节点中，缓存脚本后返回 sha1（同样的脚本在任何服务器，缓存后的 sha1 都是相同的）
            </summary>
            <param name="script">Lua 脚本</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PublishAsync(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，最终消息发布格式：1|message
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PublishNoneMessageIdAsync(System.String,System.String)">
            <summary>
            用于将信息发送到指定分区节点的频道，与 Publish 方法不同，不返回消息id头，即 1|
            </summary>
            <param name="channel">频道名</param>
            <param name="message">消息文本</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PubSubChannelsAsync(System.String)">
            <summary>
            查看所有订阅频道
            </summary>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PubSubNumPatAsync">
            <summary>
            查看所有模糊订阅端的数量
            </summary>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PubSubNumSubAsync(System.String[])">
            <summary>
            查看所有订阅端的数量
            </summary>
            <param name="channels">频道</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PfAddAsync``1(System.String,``0[])">
            <summary>
            添加指定元素到 HyperLogLog
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="elements">元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PfCountAsync(System.String[])">
            <summary>
            返回给定 HyperLogLog 的基数估算值
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PfMergeAsync(System.String,System.String[])">
            <summary>
            将多个 HyperLogLog 合并为一个 HyperLogLog
            </summary>
            <param name="destKey">新的 HyperLogLog，不含prefix前辍</param>
            <param name="sourceKeys">源 HyperLogLog，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZAddAsync(System.String,System.ValueTuple{System.Decimal,System.Object}[])">
            <summary>
            向有序集合添加一个或多个成员，或者更新已存在成员的分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="scoreMembers">一个或多个成员分数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZCardAsync(System.String)">
            <summary>
            获取有序集合的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZCountAsync(System.String,System.Decimal,System.Decimal)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZCountAsync(System.String,System.String,System.String)">
            <summary>
            计算在有序集合中指定区间分数的成员数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZIncrByAsync(System.String,System.String,System.Decimal)">
            <summary>
            有序集合中对指定成员的分数加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="increment">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZInterStoreAsync(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的交集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeWithScoresAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            通过索引区间返回有序集合成指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByScoreAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByScoreAsync``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByScoreAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByScoreAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByScoreWithScoresAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByScoreWithScoresAsync``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByScoreWithScoresAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            通过分数返回有序集合指定区间内的成员和分数
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRankAsync(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的索引
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRemAsync``1(System.String,``0[])">
            <summary>
            移除有序集合中的一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRemRangeByRankAsync(System.String,System.Int64,System.Int64)">
            <summary>
            移除有序集合中给定的排名区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRemRangeByScoreAsync(System.String,System.Decimal,System.Decimal)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRemRangeByScoreAsync(System.String,System.String,System.String)">
            <summary>
            移除有序集合中给定的分数区间的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeWithScoresAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeWithScoresAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回有序集中指定区间内的成员和分数，通过索引，分数从高到底
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeByScoreAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeByScoreAsync``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeByScoreAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeByScoreAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeByScoreWithScoresAsync(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeByScoreWithScoresAsync``1(System.String,System.Decimal,System.Decimal,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 decimal.MaxValue 10</param>
            <param name="min">分数最小值 decimal.MinValue 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeByScoreWithScoresAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRangeByScoreWithScoresAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            返回有序集中指定分数区间内的成员和分数，分数从高到低排序
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="max">分数最大值 +inf (10 10</param>
            <param name="min">分数最小值 -inf (1 1</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRevRankAsync(System.String,System.Object)">
            <summary>
            返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZScoreAsync(System.String,System.Object)">
            <summary>
            返回有序集中，成员的分数值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZUnionStoreAsync(System.String,System.Decimal[],CSRedis.RedisAggregate,System.String[])">
            <summary>
            计算给定的一个或多个有序集的并集，将结果集存储在新的有序集合 destination 中
            </summary>
            <param name="destination">新的有序集合，不含prefix前辍</param>
            <param name="weights">使用 WEIGHTS 选项，你可以为 每个 给定有序集 分别 指定一个乘法因子。如果没有指定 WEIGHTS 选项，乘法因子默认设置为 1 。</param>
            <param name="aggregate">Sum | Min | Max</param>
            <param name="keys">一个或多个有序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代有序集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByLexAsync(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRangeByLexAsync``1(System.String,System.String,System.String,System.Nullable{System.Int64},System.Int64)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="limit">返回多少成员</param>
            <param name="offset">返回条件偏移位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZRemRangeByLexAsync(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZLexCountAsync(System.String,System.String,System.String)">
            <summary>
            当有序集合的所有成员都具有相同的分值时，有序集合的元素会根据成员的字典序来进行排序，这个命令可以返回给定的有序集合键 key 中，值介于 min 和 max 之间的成员。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="min">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <param name="max">'(' 表示包含在范围，'[' 表示不包含在范围，'+' 正无穷大，'-' 负无限。 ZRANGEBYLEX zset - + ，命令将返回有序集合中的所有元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SAddAsync``1(System.String,``0[])">
            <summary>
            向集合添加一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SCardAsync(System.String)">
            <summary>
            获取集合的成员数
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SDiffAsync(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SDiffAsync``1(System.String[])">
            <summary>
            返回给定所有集合的差集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SDiffStoreAsync(System.String,System.String[])">
            <summary>
            返回给定所有集合的差集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SInterAsync(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SInterAsync``1(System.String[])">
            <summary>
            返回给定所有集合的交集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SInterStoreAsync(System.String,System.String[])">
            <summary>
            返回给定所有集合的交集并存储在 destination 中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SIsMemberAsync(System.String,System.Object)">
            <summary>
            判断 member 元素是否是集合 key 的成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SMembersAsync(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SMembersAsync``1(System.String)">
            <summary>
            返回集合中的所有成员
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SMoveAsync(System.String,System.String,System.Object)">
            <summary>
            将 member 元素从 source 集合移动到 destination 集合
            </summary>
            <param name="source">无序集合key，不含prefix前辍</param>
            <param name="destination">目标无序集合key，不含prefix前辍</param>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SPopAsync(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SPopAsync``1(System.String)">
            <summary>
            移除并返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SPopAsync(System.String,System.Int64)">
            <summary>
            [redis-server 3.2] 移除并返回集合中的一个或多个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除并返回的个数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SPopAsync``1(System.String,System.Int64)">
            <summary>
            [redis-server 3.2] 移除并返回集合中的一个或多个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除并返回的个数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SRandMemberAsync(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SRandMemberAsync``1(System.String)">
            <summary>
            返回集合中的一个随机元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SRandMembersAsync(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SRandMembersAsync``1(System.String,System.Int32)">
            <summary>
            返回集合中一个或多个随机数的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="count">返回个数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SRemAsync``1(System.String,``0[])">
            <summary>
            移除集合中一个或多个成员
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">一个或多个成员</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SUnionAsync(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SUnionAsync``1(System.String[])">
            <summary>
            返回所有给定集合的并集
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SUnionStoreAsync(System.String,System.String[])">
            <summary>
            所有给定集合的并集存储在 destination 集合中
            </summary>
            <param name="destination">新的无序集合，不含prefix前辍</param>
            <param name="keys">一个或多个无序集合，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代集合中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LIndexAsync(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LIndexAsync``1(System.String,System.Int64)">
            <summary>
            通过索引获取列表中的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LInsertBeforeAsync(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素前面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LInsertAfterAsync(System.String,System.Object,System.Object)">
            <summary>
            在列表中的元素后面插入元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="pivot">列表的元素</param>
            <param name="value">新元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LLenAsync(System.String)">
            <summary>
            获取列表长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LPopAsync(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LPopAsync``1(System.String)">
            <summary>
            移出并获取列表的第一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LPushAsync``1(System.String,``0[])">
            <summary>
            将一个或多个值插入到列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 LPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:RedisHelper`1.LPushXAsync(System.String,System.Object)">
            <summary>
            将一个值插入到已存在的列表头部
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns>执行 LPUSHX 命令后，列表的长度。</returns>
        </member>
        <member name="M:RedisHelper`1.LRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            获取列表指定范围内的元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LRemAsync(System.String,System.Int64,System.Object)">
            <summary>
            根据参数 count 的值，移除列表中与参数 value 相等的元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">移除的数量，大于0时从表头删除数量count，小于0时从表尾删除数量-count，等于0移除所有</param>
            <param name="value">元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LSetAsync(System.String,System.Int64,System.Object)">
            <summary>
            通过索引设置列表元素的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="index">索引</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.LTrimAsync(System.String,System.Int64,System.Int64)">
            <summary>
            对一个列表进行修剪，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="stop">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.RPopAsync(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.RPopAsync``1(System.String)">
            <summary>
            移除并获取列表最后一个元素
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.RPopLPushAsync(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.RPopLPushAsync``1(System.String,System.String)">
            <summary>
            将列表 source 中的最后一个元素(尾元素)弹出，并返回给客户端。
            将 source 弹出的元素插入到列表 destination ，作为 destination 列表的的头元素。
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="source">源key，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.RPushAsync``1(System.String,``0[])">
            <summary>
            在列表中添加一个或多个值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSH 命令后，列表的长度</returns>
        </member>
        <member name="M:RedisHelper`1.RPushXAsync(System.String,System.Object)">
            <summary>
            为已存在的列表添加值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">一个或多个值</param>
            <returns>执行 RPUSHX 命令后，列表的长度</returns>
        </member>
        <member name="M:RedisHelper`1.HDelAsync(System.String,System.String[])">
            <summary>
            删除一个或多个哈希表字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HExistsAsync(System.String,System.String)">
            <summary>
            查看哈希表 key 中，指定的字段是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HGetAsync(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HGetAsync``1(System.String,System.String)">
            <summary>
            获取存储在哈希表中指定字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HGetAllAsync(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HGetAllAsync``1(System.String)">
            <summary>
            获取在哈希表中指定 key 的所有字段和值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HIncrByAsync(System.String,System.String,System.Int64)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HIncrByFloatAsync(System.String,System.String,System.Decimal)">
            <summary>
            为哈希表 key 中的指定字段的整数值加上增量 increment
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HKeysAsync(System.String)">
            <summary>
            获取所有哈希表中的字段
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HLenAsync(System.String)">
            <summary>
            获取哈希表中字段的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HMGetAsync(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="fields">字段</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HMGetAsync``1(System.String,System.String[])">
            <summary>
            获取存储在哈希表中多个字段的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="fields">一个或多个字段</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HMSetAsync(System.String,System.Object[])">
            <summary>
            同时将多个 field-value (域-值)对设置到哈希表 key 中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HSetAsync(System.String,System.String,System.Object)">
            <summary>
            将哈希表 key 中的字段 field 的值设为 value
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值</param>
            <returns>如果字段是哈希表中的一个新建字段，并且值设置成功，返回true。如果哈希表中域字段已经存在且旧值已被新值覆盖，返回false。</returns>
        </member>
        <member name="M:RedisHelper`1.HSetNxAsync(System.String,System.String,System.Object)">
            <summary>
            只有在字段 field 不存在时，设置哈希表字段的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="field">字段</param>
            <param name="value">值(string 或 byte[])</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HValsAsync(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HValsAsync``1(System.String)">
            <summary>
            获取哈希表中所有值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HScanAsync(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.HScanAsync``1(System.String,System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代哈希表中的键值对
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZPopMaxAsync(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZPopMaxAsync``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最高得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最高的元素将是第一个元素，然后是分数较低的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZPopMinAsync(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ZPopMinAsync``1(System.String,System.Int64)">
            <summary>
            [redis-server 5.0.0] 删除并返回有序集合key中的最多count个具有最低得分的成员。如未指定，count的默认值为1。指定一个大于有序集合的基数的count不会产生错误。 当返回多个元素时候，得分最低的元素将是第一个元素，然后是分数较高的元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.AppendAsync(System.String,System.Object)">
            <summary>
            如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">字符串</param>
            <returns>追加指定值之后， key 中字符串的长度</returns>
        </member>
        <member name="M:RedisHelper`1.BitCountAsync(System.String,System.Int64,System.Int64)">
            <summary>
            计算给定位置被设置为 1 的比特位的数量
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置</param>
            <param name="end">结束位置</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.BitOpAsync(CSRedis.RedisBitOp,System.String,System.String[])">
            <summary>
            对一个或多个保存二进制位的字符串 key 进行位元操作，并将结果保存到 destkey 上
            </summary>
            <param name="op">And | Or | XOr | Not</param>
            <param name="destKey">不含prefix前辍</param>
            <param name="keys">不含prefix前辍</param>
            <returns>保存到 destkey 的长度，和输入 key 中最长的长度相等</returns>
        </member>
        <member name="M:RedisHelper`1.BitPosAsync(System.String,System.Boolean,System.Nullable{System.Int64},System.Nullable{System.Int64})">
            <summary>
            对 key 所储存的值，查找范围内第一个被设置为1或者0的bit位
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="bit">查找值</param>
            <param name="start">开始位置，-1是最后一个，-2是倒数第二个</param>
            <param name="end">结果位置，-1是最后一个，-2是倒数第二个</param>
            <returns>返回范围内第一个被设置为1或者0的bit位</returns>
        </member>
        <member name="M:RedisHelper`1.GetAsync(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GetAsync``1(System.String)">
            <summary>
            获取指定 key 的值
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GetBitAsync(System.String,System.UInt32)">
            <summary>
            对 key 所储存的值，获取指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GetRangeAsync(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GetRangeAsync``1(System.String,System.Int64,System.Int64)">
            <summary>
            返回 key 中字符串值的子字符
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="start">开始位置，0表示第一个元素，-1表示最后一个元素</param>
            <param name="end">结束位置，0表示第一个元素，-1表示最后一个元素</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GetSetAsync(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GetSetAsync``1(System.String,System.Object)">
            <summary>
            将给定 key 的值设为 value ，并返回 key 的旧值(old value)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.IncrByAsync(System.String,System.Int64)">
            <summary>
            将 key 所储存的值加上给定的增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.IncrByFloatAsync(System.String,System.Decimal)">
            <summary>
            将 key 所储存的值加上给定的浮点增量值（increment）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">增量值(默认=1)</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.MGetAsync(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.MGetAsync``1(System.String[])">
            <summary>
            获取多个指定 key 的值(数组)
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.MSetAsync(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.MSetNxAsync(System.Object[])">
            <summary>
            同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在
            </summary>
            <param name="keyValues">key1 value1 [key2 value2]</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SetAsync(System.String,System.Object,System.Int32,System.Nullable{CSRedis.RedisExistence})">
            <summary>
            设置指定 key 的值，所有写入参数object都支持string | byte[] | 数值 | 对象
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <param name="expireSeconds">过期(秒单位)</param>
            <param name="exists">Nx, Xx</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SetBitAsync(System.String,System.UInt32,System.Boolean)">
            <summary>
            对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SetNxAsync(System.String,System.Object)">
            <summary>
            只有在 key 不存在时设置 key 的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SetRangeAsync(System.String,System.UInt32,System.Object)">
            <summary>
            用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="offset">偏移量</param>
            <param name="value">值</param>
            <returns>被修改后的字符串长度</returns>
        </member>
        <member name="M:RedisHelper`1.StrLenAsync(System.String)">
            <summary>
            返回 key 所储存的字符串值的长度
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.DelAsync(System.String[])">
            <summary>
            用于在 key 存在时删除 key
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.DumpAsync(System.String)">
            <summary>
            序列化给定 key ，并返回被序列化的值
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ExistsAsync(System.String)">
            <summary>
            检查给定 key 是否存在
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ExistsAsync(System.String[])">
            <summary>
            [redis-server 3.0] 检查给定多个 key 是否存在
            </summary>
            <param name="keys">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ExpireAsync(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="seconds">过期秒数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ExpireAsync(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ExpireAtAsync(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.KeysAsync(System.String)">
            <summary>
            查找所有分区节点中符合给定模式(pattern)的 key
            </summary>
            <param name="pattern">如：runoob*</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.MoveAsync(System.String,System.Int32)">
            <summary>
            将当前数据库的 key 移动到给定的数据库 db 当中
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="database">数据库</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ObjectEncodingAsync(System.String)">
            <summary>
            该返回给定 key 锁储存的值所使用的内部表示(representation)
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ObjectRefCountAsync(System.String)">
            <summary>
            该返回给定 key 引用所储存的值的次数。此命令主要用于除错
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ObjectIdleTimeAsync(System.String)">
            <summary>
            返回给定 key 自储存以来的空转时间(idle， 没有被读取也没有被写入)，以秒为单位
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PersistAsync(System.String)">
            <summary>
            移除 key 的过期时间，key 将持久保持
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PExpireAsync(System.String,System.Int32)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="milliseconds">过期毫秒数</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PExpireAsync(System.String,System.TimeSpan)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PExpireAtAsync(System.String,System.DateTime)">
            <summary>
            为给定 key 设置过期时间（毫秒）
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="expire">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.PTtlAsync(System.String)">
            <summary>
            以毫秒为单位返回 key 的剩余的过期时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.RandomKeyAsync">
            <summary>
            从所有节点中随机返回一个 key
            </summary>
            <returns>返回的 key 如果包含 prefix前辍，则会去除后返回</returns>
        </member>
        <member name="M:RedisHelper`1.RenameAsync(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.RenameNxAsync(System.String,System.String)">
            <summary>
            修改 key 的名称
            </summary>
            <param name="key">旧名称，不含prefix前辍</param>
            <param name="newKey">新名称，不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.RestoreAsync(System.String,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.RestoreAsync(System.String,System.Int64,System.Byte[])">
            <summary>
            反序列化给定的序列化值，并将它和给定的 key 关联
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="ttlMilliseconds">毫秒为单位为 key 设置生存时间</param>
            <param name="serializedValue">序列化值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SortAsync(System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            返回给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.SortAndStoreAsync(System.String,System.String,System.Nullable{System.Int64},System.Int64,System.String,System.Nullable{CSRedis.RedisSortDir},System.Nullable{System.Boolean},System.String[])">
            <summary>
            保存给定列表、集合、有序集合 key 中经过排序的元素，参数资料：http://doc.redisfans.com/key/sort.html
            </summary>
            <param name="key">列表、集合、有序集合，不含prefix前辍</param>
            <param name="destination">目标key，不含prefix前辍</param>
            <param name="count">数量</param>
            <param name="offset">偏移量</param>
            <param name="by">排序字段</param>
            <param name="dir">排序方式</param>
            <param name="isAlpha">对字符串或数字进行排序</param>
            <param name="get">根据排序的结果来取出相应的键值</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.TtlAsync(System.String)">
            <summary>
            以秒为单位，返回给定 key 的剩余生存时间
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.TypeAsync(System.String)">
            <summary>
            返回 key 所储存的值的类型
            </summary>
            <param name="key">不含prefix前辍</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ScanAsync(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.ScanAsync``1(System.Int64,System.String,System.Nullable{System.Int64})">
            <summary>
            迭代当前数据库中的数据库键
            </summary>
            <typeparam name="T">byte[] 或其他类型</typeparam>
            <param name="cursor">位置</param>
            <param name="pattern">模式</param>
            <param name="count">数量</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoAddAsync(System.String,System.Decimal,System.Decimal,System.Object)">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="member">成员</param>
            <returns>是否成功</returns>
        </member>
        <member name="M:RedisHelper`1.GeoAddAsync(System.String,System.ValueTuple{System.Decimal,System.Decimal,System.Object}[])">
            <summary>
            将指定的地理空间位置（纬度、经度、成员）添加到指定的key中。这些数据将会存储到sorted set这样的目的是为了方便使用GEORADIUS或者GEORADIUSBYMEMBER命令对数据进行半径查询等操作。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="values">批量添加的值</param>
            <returns>添加到sorted set元素的数目，但不包括已更新score的元素。</returns>
        </member>
        <member name="M:RedisHelper`1.GeoDistAsync(System.String,System.Object,System.Object,CSRedis.GeoUnit)">
            <summary>
            返回两个给定位置之间的距离。如果两个位置之间的其中一个不存在， 那么命令返回空值。GEODIST 命令在计算距离时会假设地球为完美的球形， 在极限情况下， 这一假设最大会造成 0.5% 的误差。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member1">成员1</param>
            <param name="member2">成员2</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <returns>计算出的距离会以双精度浮点数的形式被返回。 如果给定的位置元素不存在， 那么命令返回空值。</returns>
        </member>
        <member name="M:RedisHelper`1.GeoHashAsync(System.String,System.Object[])">
            <summary>
            返回一个或多个位置元素的 Geohash 表示。通常使用表示位置的元素使用不同的技术，使用Geohash位置52点整数编码。由于编码和解码过程中所使用的初始最小和最大坐标不同，编码的编码也不同于标准。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>一个数组， 数组的每个项都是一个 geohash 。 命令返回的 geohash 的位置与用户给定的位置元素的位置一一对应。</returns>
        </member>
        <member name="M:RedisHelper`1.GeoPosAsync(System.String,System.Object[])">
            <summary>
            从key里返回所有给定位置元素的位置（经度和纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="members">多个查询的成员</param>
            <returns>GEOPOS 命令返回一个数组， 数组中的每个项都由两个元素组成： 第一个元素为给定位置元素的经度， 而第二个元素则为给定位置元素的纬度。当给定的位置元素不存在时， 对应的数组项为空值。</returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusAsync(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusAsync``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusWithDistAsync(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusWithDistAsync``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusWithDistAndCoordAsync(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusWithDistAndCoordAsync``1(System.String,System.Decimal,System.Decimal,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的经纬度为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="longitude">经度</param>
            <param name="latitude">纬度</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusByMemberAsync(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusByMemberAsync``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusByMemberWithDistAsync(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusByMemberWithDistAsync``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusByMemberWithDistAndCoordAsync(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
        <member name="M:RedisHelper`1.GeoRadiusByMemberWithDistAndCoordAsync``1(System.String,System.Object,System.Decimal,CSRedis.GeoUnit,System.Nullable{System.Int64},System.Nullable{CSRedis.GeoOrderBy})">
            <summary>
            以给定的成员为中心， 返回键包含的位置元素当中， 与中心的距离不超过给定最大距离的所有位置元素（包含距离、经度、纬度）。
            </summary>
            <param name="key">不含prefix前辍</param>
            <param name="member">成员</param>
            <param name="radius">距离</param>
            <param name="unit">m 表示单位为米；km 表示单位为千米；mi 表示单位为英里；ft 表示单位为英尺；</param>
            <param name="count">虽然用户可以使用 COUNT 选项去获取前 N 个匹配元素， 但是因为命令在内部可能会需要对所有被匹配的元素进行处理， 所以在对一个非常大的区域进行搜索时， 即使只使用 COUNT 选项去获取少量元素， 命令的执行速度也可能会非常慢。 但是从另一方面来说， 使用 COUNT 选项去减少需要返回的元素数量， 对于减少带宽来说仍然是非常有用的。</param>
            <param name="sorting">排序</param>
            <returns></returns>
        </member>
    </members>
</doc>
